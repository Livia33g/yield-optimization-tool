struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0a118f00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152e04c2b010; to 'JaxprTracer' at 0x152e04c2b930>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dff4c9e30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e070db1a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152e0359e930; to 'JaxprTracer' at 0x152e0359e0d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dff1fb730>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([          nan,   29.01803364,   77.51672183,  104.51413207,
        101.96819768,   52.32040443,   17.33193559,  705.48894773,
         64.94231654,  693.25114712,  976.39772929, 1016.34803131],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([          nan   29.01803364   77.51672183  104.51413207  101.96819768
   52.32040443   17.33193559  705.48894773   64.94231654  693.25114712
  976.39772929 1016.34803131], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([          nan   29.01803364   77.51672183  104.51413207  101.96819768
   52.32040443   17.33193559  705.48894773   64.94231654  693.25114712
  976.39772929 1016.34803131], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([          nan,   29.01803364,   77.51672183,  104.51413207,
        101.96819768,   52.32040443,   17.33193559,  705.48894773,
         64.94231654,  693.25114712,  976.39772929, 1016.34803131],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e070da570>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([       nan 0.01723066 0.00645022 0.00478404 0.00490349 0.0095565
 0.02884848 0.00070873 0.00769914 0.00072124 0.00051209 0.00049196], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([           nan 1.18758319e-03 1.66421412e-04 9.15482324e-05
 9.61768422e-05 3.65306849e-04 3.32893923e-03 2.00918335e-06
 2.37107039e-04 2.08074474e-06 1.04892993e-06 9.68088585e-07], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e01582ed0; to 'JaxprTracer' at 0x152e01583cf0>, <weakref at 0x152e01583c90; to 'JaxprTracer' at 0x152e01583c00>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152e001e48f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152f2efa0a70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([       nan 0.01723066 0.00645022 0.00478404 0.00490349 0.0095565
 0.02884848 0.00070873 0.00769914 0.00072124 0.00051209 0.00049196], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e01583f10; to 'JaxprTracer' at 0x152e01582080>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152e001e48f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([          nan   29.01803364   77.51672183  104.51413207  101.96819768
   52.32040443   17.33193559  705.48894773   64.94231654  693.25114712
  976.39772929 1016.34803131], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([          nan   29.01803364   77.51672183  104.51413207  101.96819768
   52.32040443   17.33193559  705.48894773   64.94231654  693.25114712
  976.39772929 1016.34803131], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([          nan,   29.01803364,   77.51672183,  104.51413207,
        101.96819768,   52.32040443,   17.33193559,  705.48894773,
         64.94231654,  693.25114712,  976.39772929, 1016.34803131],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0819dae0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([       nan 0.01723066 0.00645022 0.00478404 0.00490349 0.0095565
 0.02884848 0.00070873 0.00769914 0.00072124 0.00051209 0.00049196], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([           nan 1.18758319e-03 1.66421412e-04 9.15482324e-05
 9.61768422e-05 3.65306849e-04 3.32893923e-03 2.00918335e-06
 2.37107039e-04 2.08074474e-06 1.04892993e-06 9.68088585e-07], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e04daf8d0; to 'JaxprTracer' at 0x152e04dac780>, <weakref at 0x152e04dad940; to 'JaxprTracer' at 0x152e04daeb20>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152e001e48f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0819c4b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([       nan 0.01723066 0.00645022 0.00478404 0.00490349 0.0095565
 0.02884848 0.00070873 0.00769914 0.00072124 0.00051209 0.00049196], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e04dad1c0; to 'JaxprTracer' at 0x152e04dad630>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152e001e48f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 1: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704c800>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e0315e3e0; to 'JaxprTracer' at 0x152e0315fe80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dff2ce5b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704cca0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152e017706d0; to 'JaxprTracer' at 0x152e01770280>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dfeeafd70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0162a750>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df794f1a0; to 'JaxprTracer' at 0x152df794f0c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df7863fb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0162a9e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df7722110; to 'JaxprTracer' at 0x152df77220d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df7970d30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704e6b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dffbbb1a0; to 'JaxprTracer' at 0x152dffbbb070>, <weakref at 0x152dffbbbc90; to 'JaxprTracer' at 0x152dffbbb2f0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dff147070>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704cf40>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dffbbb830; to 'JaxprTracer' at 0x152dffbb80a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dff147070>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704e230>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dffa3ffb0; to 'JaxprTracer' at 0x152dffa3fd90>, <weakref at 0x152dffa3fe20; to 'JaxprTracer' at 0x152dffa3ff20>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dff147070>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704e990>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dffa3ff60; to 'JaxprTracer' at 0x152dffa3cfa0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dff147070>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 2: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704e430>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152dff9c8090; to 'JaxprTracer' at 0x152dff9cacb0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dfcffce30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704fea0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152dff9ca520; to 'JaxprTracer' at 0x152dff9c80f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df7754230>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e01628d20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df7740db0; to 'JaxprTracer' at 0x152df7740f50>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dfdb2c3f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e01629a70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df77427f0; to 'JaxprTracer' at 0x152df7742990>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df77b5cb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704fd60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dff9b98f0; to 'JaxprTracer' at 0x152dff9ba760>, <weakref at 0x152dff9b8ae0; to 'JaxprTracer' at 0x152dff9b8b90>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dfdb24ef0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704ccb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dff9b9b20; to 'JaxprTracer' at 0x152dff9b93b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dfdb24ef0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704dfd0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e0b879f80; to 'JaxprTracer' at 0x152e0b87afd0>, <weakref at 0x152e0b87b920; to 'JaxprTracer' at 0x152e0b87bf70>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dfdb24ef0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704f0e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e0b878220; to 'JaxprTracer' at 0x152e0b87ae40>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dfdb24ef0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 3: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704d2a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df7742070; to 'JaxprTracer' at 0x152df7743f70>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df77b2a30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704ca30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df7740fe0; to 'JaxprTracer' at 0x152df77435c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df7c5a7b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e01629320>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df77e6430; to 'JaxprTracer' at 0x152df77e63f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dfdb7bd70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e01629ed0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152e0832a5c0; to 'JaxprTracer' at 0x152e0832b250>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df789b570>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704c360>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df7802570; to 'JaxprTracer' at 0x152df7802440>, <weakref at 0x152df78024d0; to 'JaxprTracer' at 0x152df78025d0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df79a0030>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704dfb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df7802610; to 'JaxprTracer' at 0x152df78026c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df79a0030>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e01628d20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df75f4b30; to 'JaxprTracer' at 0x152df75f60d0>, <weakref at 0x152df75f4b80; to 'JaxprTracer' at 0x152df75f5ef0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df79a0030>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e01628a00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df75f4bd0; to 'JaxprTracer' at 0x152df75f6cb0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df79a0030>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 4: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e01629740>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e082937e0; to 'JaxprTracer' at 0x152e082918b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df7912430>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e01628970>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df785e700; to 'JaxprTracer' at 0x152df785c820>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dff10d5f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704e150>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df76dfba0; to 'JaxprTracer' at 0x152df76dfc00>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df78222f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704f460>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df76404a0; to 'JaxprTracer' at 0x152df7640500>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df767cb30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e01628770>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e047b9580; to 'JaxprTracer' at 0x152e047bbfc0>, <weakref at 0x152e047b9fd0; to 'JaxprTracer' at 0x152e047ba1c0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dfefb9030>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0162a340>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e047b89a0; to 'JaxprTracer' at 0x152e047ba8a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dfefb9030>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704cd70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e0c7131a0; to 'JaxprTracer' at 0x152e0c712b70>, <weakref at 0x152e0c710270; to 'JaxprTracer' at 0x152e0c710690>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dfefb9030>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704c870>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e0c710ea0; to 'JaxprTracer' at 0x152e0b8c6850>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dfefb9030>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 5: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704f080>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df7642930; to 'JaxprTracer' at 0x152df7642c60>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df76570b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704ffa0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df76405e0; to 'JaxprTracer' at 0x152df7640f50>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df7946770>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e01629360>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df7416f20; to 'JaxprTracer' at 0x152df7416fd0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df7854570>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e01628070>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df7415800; to 'JaxprTracer' at 0x152df7415770>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df7167b30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704ef80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e076ee660; to 'JaxprTracer' at 0x152df720d9a0>, <weakref at 0x152e076ec0e0; to 'JaxprTracer' at 0x152df720d900>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df760d970>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704df90>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e076ede90; to 'JaxprTracer' at 0x152df720d4a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df760d970>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e01629cd0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df79847c0; to 'JaxprTracer' at 0x152df7984780>, <weakref at 0x152df79867a0; to 'JaxprTracer' at 0x152df79849b0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df760d970>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e01629670>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df7985850; to 'JaxprTracer' at 0x152df7985590>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df760d970>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 6: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0162a860>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df717e9d0; to 'JaxprTracer' at 0x152df717ebc0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df7898a70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e01629b00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df717f100; to 'JaxprTracer' at 0x152df717fb10>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df76d95f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704d890>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152e016db790; to 'JaxprTracer' at 0x152e016d9040>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df7441db0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704e0d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df71dbfb0; to 'JaxprTracer' at 0x152df71db340>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df7055a70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704f3a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df7643ba0; to 'JaxprTracer' at 0x152df76431b0>, <weakref at 0x152df76426b0; to 'JaxprTracer' at 0x152df7641cc0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df7cbfa30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704d2b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df7643a60; to 'JaxprTracer' at 0x152df7640690>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df7cbfa30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704c510>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df7640090; to 'JaxprTracer' at 0x152df76435c0>, <weakref at 0x152df76434c0; to 'JaxprTracer' at 0x152df7641f40>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df7cbfa30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704e710>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df7642200; to 'JaxprTracer' at 0x152df7641090>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df7cbfa30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 7: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704d840>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df71db330; to 'JaxprTracer' at 0x152df71db520>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df7661a30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704f890>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152e0c713330; to 'JaxprTracer' at 0x152e0c713e80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df78c0130>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159ea80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df740a5c0; to 'JaxprTracer' at 0x152df7409720>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df70b91f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159f6f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152e035d5850; to 'JaxprTracer' at 0x152e035d51d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6f27ef0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704cfc0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df6fba8e0; to 'JaxprTracer' at 0x152df6fba800>, <weakref at 0x152df6fba890; to 'JaxprTracer' at 0x152df6fba760>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df7716fb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704f150>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df6fba390; to 'JaxprTracer' at 0x152df6fba530>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df7716fb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e01628b80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dff9a17b0; to 'JaxprTracer' at 0x152dff9a3750>, <weakref at 0x152dff9a0a40; to 'JaxprTracer' at 0x152dff9a14f0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df7716fb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e01629a40>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dff9a1fd0; to 'JaxprTracer' at 0x152dff9a1180>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df7716fb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 8: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0162a570>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e01718d60; to 'JaxprTracer' at 0x152e01718fa0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df79e05b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0162a0c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152e0171b1f0; to 'JaxprTracer' at 0x152e0171a800>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df73fcf70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159ece0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df78de660; to 'JaxprTracer' at 0x152df78dcc80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df7235830>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159fc10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df78ec630; to 'JaxprTracer' at 0x152df78ef430>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6e16eb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704e460>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e0b6db600; to 'JaxprTracer' at 0x152df6ec0f50>, <weakref at 0x152e07052570; to 'JaxprTracer' at 0x152df6ec0eb0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df703c330>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704cc10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e070537e0; to 'JaxprTracer' at 0x152df6ec0a50>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df703c330>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704c040>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e0c711800; to 'JaxprTracer' at 0x152e0358e030>, <weakref at 0x152e0c712ac0; to 'JaxprTracer' at 0x152e0358fb60>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df703c330>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704ff50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e0c710e50; to 'JaxprTracer' at 0x152e0358e300>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df703c330>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 9: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704d460>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e0c3a8900; to 'JaxprTracer' at 0x152e0c3ab4d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6d85630>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704d100>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df78ec770; to 'JaxprTracer' at 0x152df78ef0c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df77cfe70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159cda0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df7723b50; to 'JaxprTracer' at 0x152df7723e30>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df746df70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159d340>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152dffbae200; to 'JaxprTracer' at 0x152dffbaee90>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6ca9eb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e01629ec0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df6cbb920; to 'JaxprTracer' at 0x152df6cbb9d0>, <weakref at 0x152df6cbbb00; to 'JaxprTracer' at 0x152df6cbb8e0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6e2ceb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e01628f00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df6cbb510; to 'JaxprTracer' at 0x152df6cbb570>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6e2ceb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e016294c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dffb15710; to 'JaxprTracer' at 0x152dffb17d90>, <weakref at 0x152dffb15260; to 'JaxprTracer' at 0x152dffb15ef0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6e2ceb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0162a680>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dffb14ae0; to 'JaxprTracer' at 0x152dffb140f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6e2ceb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 10: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0162a000>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152dffbac860; to 'JaxprTracer' at 0x152dffbaf980>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df791ff30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e01628d00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152dffb14090; to 'JaxprTracer' at 0x152dffb14b40>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df70a8bb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159f000>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df79dc9a0; to 'JaxprTracer' at 0x152df79de990>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6e50e70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159fdf0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df75f5da0; to 'JaxprTracer' at 0x152df75f68f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df72b8ab0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e01628ea0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e0858d3a0; to 'JaxprTracer' at 0x152e0858e580>, <weakref at 0x152e0858e2a0; to 'JaxprTracer' at 0x152e0858d2c0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6e5dcf0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0162a940>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e0858f510; to 'JaxprTracer' at 0x152e0858da40>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6e5dcf0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e01629620>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e03002c50; to 'JaxprTracer' at 0x152e03003750>, <weakref at 0x152e03002d40; to 'JaxprTracer' at 0x152e03001090>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6e5dcf0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e01628080>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e03001030; to 'JaxprTracer' at 0x152e03002da0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6e5dcf0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 11: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e01628b80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e0858c860; to 'JaxprTracer' at 0x152e0858cd70>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dfeffd530>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e01629a60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152e03000fe0; to 'JaxprTracer' at 0x152e03000870>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df79472f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159f260>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152e0315e930; to 'JaxprTracer' at 0x152e0315e2b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6f9b2f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159f150>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152e015ccef0; to 'JaxprTracer' at 0x152e015cec10>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6b1ac70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704eda0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df6b12020; to 'JaxprTracer' at 0x152df6b11f40>, <weakref at 0x152df6b11fd0; to 'JaxprTracer' at 0x152df6b12080>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6cf96f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704f150>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df6b12160; to 'JaxprTracer' at 0x152df6b11cc0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6cf96f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704eb30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e05e5cea0; to 'JaxprTracer' at 0x152e05e5fb60>, <weakref at 0x152e05e5efc0; to 'JaxprTracer' at 0x152e05e5cbe0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6cf96f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704ea10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e05e5c400; to 'JaxprTracer' at 0x152df6b10320>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6cf96f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 12: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704d800>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e0864ff60; to 'JaxprTracer' at 0x152e0864f750>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dff085170>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704f8e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df6b13510; to 'JaxprTracer' at 0x152df6b12bc0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6e42af0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159c8a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df786a8e0; to 'JaxprTracer' at 0x152df7868910>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df72ff130>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159ef70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df786bec0; to 'JaxprTracer' at 0x152df7868870>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6be9130>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704e920>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df6bfb600; to 'JaxprTracer' at 0x152df6bfb480>, <weakref at 0x152df6bfb5b0; to 'JaxprTracer' at 0x152df6bfb430>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6b8e430>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704fce0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df6bfb060; to 'JaxprTracer' at 0x152df6bfb250>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6b8e430>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704ff70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e046836f0; to 'JaxprTracer' at 0x152e04680e10>, <weakref at 0x152e04682480; to 'JaxprTracer' at 0x152e046822b0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6b8e430>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704d640>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e04680360; to 'JaxprTracer' at 0x152e04682800>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6b8e430>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 13: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704fd10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e04682ca0; to 'JaxprTracer' at 0x152e04681810>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df72fb0f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704c8f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152e0d4d5d50; to 'JaxprTracer' at 0x152e0d4d5ef0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df705a9f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159ce90>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df78df240; to 'JaxprTracer' at 0x152df78dc140>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6e923f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159f820>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152e01489260; to 'JaxprTracer' at 0x152e01488c80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df69b3370>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704d850>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df69bf970; to 'JaxprTracer' at 0x152df69bfa20>, <weakref at 0x152df69bfb50; to 'JaxprTracer' at 0x152df69bf930>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6c11bf0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704cdc0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df69bf560; to 'JaxprTracer' at 0x152df69bf5c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6c11bf0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704c6c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e05e38b30; to 'JaxprTracer' at 0x152e05e385a0>, <weakref at 0x152e05e39b20; to 'JaxprTracer' at 0x152e05e38e60>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6c11bf0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704d580>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e05e3a1b0; to 'JaxprTracer' at 0x152e05e3ad00>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6c11bf0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 14: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704c9a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df74fb240; to 'JaxprTracer' at 0x152df74fb0c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6a511b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704eb30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df74f8fe0; to 'JaxprTracer' at 0x152df74f9400>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6a9c1f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159d420>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152e00062e80; to 'JaxprTracer' at 0x152e00063070>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6a595f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159fea0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152e00063c90; to 'JaxprTracer' at 0x152e000607d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df75c9cf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704f850>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df7572fc0; to 'JaxprTracer' at 0x152df75730c0>, <weakref at 0x152df7572c50; to 'JaxprTracer' at 0x152df7572f30>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df74ffab0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704c260>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df7572ac0; to 'JaxprTracer' at 0x152df7572da0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df74ffab0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704fd00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e000c1490; to 'JaxprTracer' at 0x152e07479f40>, <weakref at 0x152e000c2a70; to 'JaxprTracer' at 0x152e0747bcf0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df74ffab0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704d6f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e000c1620; to 'JaxprTracer' at 0x152e000c00f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df74ffab0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 15: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e016280f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e00060a40; to 'JaxprTracer' at 0x152e000617c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df72fa230>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e01629bc0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df75b3880; to 'JaxprTracer' at 0x152df75b3a20>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6c1e9b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159c210>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152e06f37fb0; to 'JaxprTracer' at 0x152e06f362b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df75961f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159df00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152e06f36a20; to 'JaxprTracer' at 0x152e06f36210>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6661930>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704e5f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e015cefc0; to 'JaxprTracer' at 0x152e015cd4f0>, <weakref at 0x152e015cdc10; to 'JaxprTracer' at 0x152e015ce2b0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6a6af70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704e340>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e015cffb0; to 'JaxprTracer' at 0x152e015cf7a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6a6af70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159e890>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e015ce0c0; to 'JaxprTracer' at 0x152e015cd0e0>, <weakref at 0x152e015cc6d0; to 'JaxprTracer' at 0x152e015cce60>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6a6af70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159da60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e015ceb10; to 'JaxprTracer' at 0x152e015cec60>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6a6af70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 16: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159d6f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e01c19d00; to 'JaxprTracer' at 0x152e01c19630>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6de15b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159d4c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152e01c1aac0; to 'JaxprTracer' at 0x152e01c1b7a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6a52970>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e01628530>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152e001dbe20; to 'JaxprTracer' at 0x152e001d9220>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df704ad70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0162a120>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152e01570e00; to 'JaxprTracer' at 0x152e01573ac0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df672b5f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159d380>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df68406d0; to 'JaxprTracer' at 0x152df68405f0>, <weakref at 0x152df6840680; to 'JaxprTracer' at 0x152df6840550>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6a0d4f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159dcd0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df6840630; to 'JaxprTracer' at 0x152df6840190>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6a0d4f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e01629350>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df78ec770; to 'JaxprTracer' at 0x152df78ee350>, <weakref at 0x152df78ee110; to 'JaxprTracer' at 0x152df78ed3b0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6a0d4f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0162a000>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df78ecdb0; to 'JaxprTracer' at 0x152df78edfe0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6a0d4f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 17: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0162ad40>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e00061030; to 'JaxprTracer' at 0x152e000607d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df7040570>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e01628f00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df78ecfe0; to 'JaxprTracer' at 0x152df78ec910>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df697fa30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159e290>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152dff9da660; to 'JaxprTracer' at 0x152dff9d8eb0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df67a12f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159c430>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df7742110; to 'JaxprTracer' at 0x152df7743a20>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df68dd970>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159f410>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df63d8540; to 'JaxprTracer' at 0x152df63d8460>, <weakref at 0x152df63d86d0; to 'JaxprTracer' at 0x152df63d85a0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6ae8f70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159fbe0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df63d8680; to 'JaxprTracer' at 0x152df63d81e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6ae8f70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159fa30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df72a4db0; to 'JaxprTracer' at 0x152df72a51d0>, <weakref at 0x152df72a4860; to 'JaxprTracer' at 0x152df72a59a0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6ae8f70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159e9f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df72a4220; to 'JaxprTracer' at 0x152df72a4f50>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6ae8f70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 18: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159e7d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df7742610; to 'JaxprTracer' at 0x152df7740f00>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df65fdc30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159d660>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152e0a24d620; to 'JaxprTracer' at 0x152e0a24d680>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6a17c30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e01629c80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df75f7ec0; to 'JaxprTracer' at 0x152df75f5130>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6458570>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e01628f80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df6f08ae0; to 'JaxprTracer' at 0x152df6f08410>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df63d0230>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159e700>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df61a64d0; to 'JaxprTracer' at 0x152df61a63f0>, <weakref at 0x152df61a6480; to 'JaxprTracer' at 0x152df61a6350>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6835eb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159e960>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df61a5f80; to 'JaxprTracer' at 0x152df61a6120>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6835eb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0162a7c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df7640360; to 'JaxprTracer' at 0x152df76416d0>, <weakref at 0x152df7643150; to 'JaxprTracer' at 0x152df76402d0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6835eb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e01629440>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df7642480; to 'JaxprTracer' at 0x152df76430c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6835eb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 19: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e016288e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df76436f0; to 'JaxprTracer' at 0x152df7643f70>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df66289f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e016296d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df77893a0; to 'JaxprTracer' at 0x152df778b3e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df67b8170>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927e890>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152e0c31b650; to 'JaxprTracer' at 0x152e0c31be30>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df63a1d30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927d290>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df68f0310; to 'JaxprTracer' at 0x152df68f05f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5ff9d30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e01629520>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e085ac8b0; to 'JaxprTracer' at 0x152e085ae1c0>, <weakref at 0x152e085af150; to 'JaxprTracer' at 0x152e085afca0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6a71cb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0162a410>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e085aeac0; to 'JaxprTracer' at 0x152e085adae0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6a71cb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e01628d00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dff9d81d0; to 'JaxprTracer' at 0x152dff9d9a40>, <weakref at 0x152dff9d9300; to 'JaxprTracer' at 0x152dff9db2f0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6a71cb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e01628b80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dff9db010; to 'JaxprTracer' at 0x152dff9daf30>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6a71cb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 20: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0162a470>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df6002020; to 'JaxprTracer' at 0x152df60025d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5ffc4f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e01628bc0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df6001f30; to 'JaxprTracer' at 0x152df6002170>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df686ea70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927ea50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152e0c710720; to 'JaxprTracer' at 0x152e0c713a70>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df60bc1b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927e940>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152e01561d50; to 'JaxprTracer' at 0x152e01562c60>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5f19770>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159d480>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dffa8f970; to 'JaxprTracer' at 0x152dffa8c230>, <weakref at 0x152dffa8f4c0; to 'JaxprTracer' at 0x152dffa8c690>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6abc4b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159dfb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dffa8d300; to 'JaxprTracer' at 0x152dffa8ccd0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6abc4b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e01628850>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df6f2c5e0; to 'JaxprTracer' at 0x152df6f2f160>, <weakref at 0x152df6f2d800; to 'JaxprTracer' at 0x152df6f2ec60>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6abc4b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e016297d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df6f2e660; to 'JaxprTracer' at 0x152df6f2e800>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6abc4b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 21: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0162a8e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e070e4130; to 'JaxprTracer' at 0x152e070e6670>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df63c15f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e01628f40>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df6d205e0; to 'JaxprTracer' at 0x152df6d22d50>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df63abe30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927d200>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df7722930; to 'JaxprTracer' at 0x152df7723ac0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df60cd470>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927ece0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152e0c649da0; to 'JaxprTracer' at 0x152e0c648500>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6487af0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159d0c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df75c36f0; to 'JaxprTracer' at 0x152df75c33e0>, <weakref at 0x152df75c1210; to 'JaxprTracer' at 0x152df75c0050>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df67c01b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159fac0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df75c1300; to 'JaxprTracer' at 0x152df75c2ad0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df67c01b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e01628a40>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df75c3f10; to 'JaxprTracer' at 0x152df75c18b0>, <weakref at 0x152df75c3fb0; to 'JaxprTracer' at 0x152df75c17c0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df67c01b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0162acb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df75c2fc0; to 'JaxprTracer' at 0x152df75c0aa0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df67c01b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 22: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e01628380>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e0148bdd0; to 'JaxprTracer' at 0x152e01489d60>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df61e0170>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0704fc30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152e0148bce0; to 'JaxprTracer' at 0x152e01488230>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6018230>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927f160>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df6f0bab0; to 'JaxprTracer' at 0x152df6f08a50>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5c76b30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927d310>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152e08736e80; to 'JaxprTracer' at 0x152e08736760>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5c959f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0162a720>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df5d21e40; to 'JaxprTracer' at 0x152df5d21d60>, <weakref at 0x152df5d21df0; to 'JaxprTracer' at 0x152df5d21cc0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df60df2b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e01629e10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df5d21da0; to 'JaxprTracer' at 0x152df5d21900>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df60df2b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e01629150>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e0a3d4950; to 'JaxprTracer' at 0x152e0a3d6170>, <weakref at 0x152e0a3d6ac0; to 'JaxprTracer' at 0x152e0a3d5310>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df60df2b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0162a870>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df5d203b0; to 'JaxprTracer' at 0x152e0a3d5590>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df60df2b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 23: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159ca50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e05c0cb80; to 'JaxprTracer' at 0x152e05c0d720>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df686b5b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159cb80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152dffd50ae0; to 'JaxprTracer' at 0x152dffd52e40>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5c81bb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927c900>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152e0315afc0; to 'JaxprTracer' at 0x152e03158b90>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5cd38f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927d200>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df7723e70; to 'JaxprTracer' at 0x152df7720a50>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5b6c4f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159ecc0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e03042fc0; to 'JaxprTracer' at 0x152e03040d20>, <weakref at 0x152e03040040; to 'JaxprTracer' at 0x152e030423a0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df64dbcf0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159fd60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e0c47e570; to 'JaxprTracer' at 0x152e0c47cbe0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df64dbcf0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0162ad20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e0c47c1d0; to 'JaxprTracer' at 0x152e0c47f980>, <weakref at 0x152e0c47e2f0; to 'JaxprTracer' at 0x152e0c47e2b0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df64dbcf0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0162a4c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e0c47e430; to 'JaxprTracer' at 0x152e0c47e1c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df64dbcf0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 24: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159fb50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e001da0c0; to 'JaxprTracer' at 0x152e001daa80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6028df0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159c0e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152e031af100; to 'JaxprTracer' at 0x152e031ae9e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df65ea070>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927c980>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152e0010dd00; to 'JaxprTracer' at 0x152e0010c960>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5d410b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927e8e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152e0010cf40; to 'JaxprTracer' at 0x152e0010d9a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5a4ecb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159eb00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dffb4b880; to 'JaxprTracer' at 0x152dffb4a990>, <weakref at 0x152dffb4a660; to 'JaxprTracer' at 0x152dffb49c70>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5cec1f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159e700>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dffb4b790; to 'JaxprTracer' at 0x152dffb49e00>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5cec1f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159d170>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dffb48590; to 'JaxprTracer' at 0x152dffb4a350>, <weakref at 0x152dffb4b290; to 'JaxprTracer' at 0x152dffb49130>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5cec1f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159ee20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dffb4a7f0; to 'JaxprTracer' at 0x152dffb49a90>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5cec1f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 25: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159cc50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e0d1630b0; to 'JaxprTracer' at 0x152e0d162170>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df61c1c70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159c800>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152dffd51f80; to 'JaxprTracer' at 0x152dffd52300>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5b88af0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927e6f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152e001dad40; to 'JaxprTracer' at 0x152e001d84b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5c39cf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927e970>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152e061397b0; to 'JaxprTracer' at 0x152e06139db0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5939470>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159dcd0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df5dc5440; to 'JaxprTracer' at 0x152df5dc5360>, <weakref at 0x152df5dc55d0; to 'JaxprTracer' at 0x152df5dc54a0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5c36570>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159d610>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df5dc5580; to 'JaxprTracer' at 0x152df5dc50e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5c36570>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159d8b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e01488fe0; to 'JaxprTracer' at 0x152e0148b020>, <weakref at 0x152e01488e00; to 'JaxprTracer' at 0x152e0148be30>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5c36570>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159c680>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e0148a430; to 'JaxprTracer' at 0x152e0148bb60>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5c36570>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 26: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159f9b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e017f8c70; to 'JaxprTracer' at 0x152e017f89b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df61915f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159df70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152e01445b20; to 'JaxprTracer' at 0x152e01445f40>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5b8d270>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927eff0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df61747c0; to 'JaxprTracer' at 0x152df61744b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df59a2070>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927cba0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df6176840; to 'JaxprTracer' at 0x152df6177340>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5848bb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159f200>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e047cf6f0; to 'JaxprTracer' at 0x152e047ccc80>, <weakref at 0x152e047cd580; to 'JaxprTracer' at 0x152e047cdea0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df594c970>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159e940>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e047ce520; to 'JaxprTracer' at 0x152e047cce60>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df594c970>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927e640>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e04d632e0; to 'JaxprTracer' at 0x152e04d610e0>, <weakref at 0x152e04d612b0; to 'JaxprTracer' at 0x152e04d62990>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df594c970>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927e340>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e04d61080; to 'JaxprTracer' at 0x152e04d63610>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df594c970>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 27: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927c980>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e070e49f0; to 'JaxprTracer' at 0x152e070e4500>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5a23470>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927e4b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df79d3b00; to 'JaxprTracer' at 0x152df79d0780>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5ace9b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159c950>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df6503ab0; to 'JaxprTracer' at 0x152df65026c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df594edb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba4fe0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df6503740; to 'JaxprTracer' at 0x152df65039d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5e2af30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159cf70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df740a070; to 'JaxprTracer' at 0x152df740b4d0>, <weakref at 0x152df7408770; to 'JaxprTracer' at 0x152df740b610>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152e07bbd5f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159e640>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df740b830; to 'JaxprTracer' at 0x152df7408730>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152e07bbd5f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159ed70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df74080e0; to 'JaxprTracer' at 0x152df740b7f0>, <weakref at 0x152df74096c0; to 'JaxprTracer' at 0x152df74099f0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152e07bbd5f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159d890>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df7409df0; to 'JaxprTracer' at 0x152df7409590>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152e07bbd5f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 28: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159c590>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df5945580; to 'JaxprTracer' at 0x152df5945a90>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df59908f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159e910>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df56984f0; to 'JaxprTracer' at 0x152df5944460>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5b92fb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba51a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152e071062a0; to 'JaxprTracer' at 0x152e07106260>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df580c330>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba4e30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152e0857fba0; to 'JaxprTracer' at 0x152e0857f3e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df57190b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159fbe0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df5568680; to 'JaxprTracer' at 0x152df55685a0>, <weakref at 0x152df5568630; to 'JaxprTracer' at 0x152df5568500>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df60d15b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159f200>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df55685e0; to 'JaxprTracer' at 0x152df5568140>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df60d15b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927e360>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df572b880; to 'JaxprTracer' at 0x152df572a710>, <weakref at 0x152df5729d00; to 'JaxprTracer' at 0x152df572b110>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df60d15b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927f740>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df572b4c0; to 'JaxprTracer' at 0x152df5729cc0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df60d15b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 29: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927cf30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df572bb50; to 'JaxprTracer' at 0x152df5729ef0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df58596b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927ff50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df79d3b50; to 'JaxprTracer' at 0x152df79d0190>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df57c57b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba4d90>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df569ad90; to 'JaxprTracer' at 0x152df569ae90>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5e77270>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba5120>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df6671b20; to 'JaxprTracer' at 0x152df66737f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df55db870>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927ded0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df545d6c0; to 'JaxprTracer' at 0x152df545d5e0>, <weakref at 0x152df545d850; to 'JaxprTracer' at 0x152df545d720>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5dfb370>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927e750>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df545d800; to 'JaxprTracer' at 0x152df545d360>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5dfb370>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159ed60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e001d97b0; to 'JaxprTracer' at 0x152e001dbb10>, <weakref at 0x152e001d9c10; to 'JaxprTracer' at 0x152e001da2b0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5dfb370>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159e7f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e001d8090; to 'JaxprTracer' at 0x152dffb09f40>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5dfb370>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 30: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159f870>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df6671080; to 'JaxprTracer' at 0x152df6671040>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df572e9f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159c7f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df6673a10; to 'JaxprTracer' at 0x152df66722b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df57de3b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba6d30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df63d9800; to 'JaxprTracer' at 0x152df63db430>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df577dff0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba43e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df63da070; to 'JaxprTracer' at 0x152df63d9680>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df550da70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927c640>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df5356250; to 'JaxprTracer' at 0x152df5356170>, <weakref at 0x152df5356200; to 'JaxprTracer' at 0x152df53562b0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df55f0730>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927d870>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df5356390; to 'JaxprTracer' at 0x152df5355ef0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df55f0730>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927ef10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df6091670; to 'JaxprTracer' at 0x152df6090be0>, <weakref at 0x152df60931f0; to 'JaxprTracer' at 0x152df60922b0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df55f0730>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927d610>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df6093100; to 'JaxprTracer' at 0x152df6092990>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df55f0730>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 31: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927cf30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df551eb10; to 'JaxprTracer' at 0x152df551edf0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5a5d5b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927ea10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152dffa60680; to 'JaxprTracer' at 0x152dffa60320>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df562ffb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba48a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df55edbc0; to 'JaxprTracer' at 0x152df55edb30>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df591e9b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba7420>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df55eee30; to 'JaxprTracer' at 0x152df55eec60>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df62c0370>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927efd0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df6291bc0; to 'JaxprTracer' at 0x152df6291a90>, <weakref at 0x152df6291b20; to 'JaxprTracer' at 0x152df6291c20>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5df56f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927e880>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df6291c60; to 'JaxprTracer' at 0x152df6291d10>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5df56f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927f240>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df6283b00; to 'JaxprTracer' at 0x152df6281720>, <weakref at 0x152df62824d0; to 'JaxprTracer' at 0x152df6280eb0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5df56f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927e380>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df62835b0; to 'JaxprTracer' at 0x152df6282030>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5df56f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 32: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927c0f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e07107970; to 'JaxprTracer' at 0x152e07106620>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5c2faf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927c500>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df74175b0; to 'JaxprTracer' at 0x152df7417070>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df62a6fb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba70f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152e03150cc0; to 'JaxprTracer' at 0x152e031510e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df53616f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba5170>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152e03153510; to 'JaxprTracer' at 0x152e031507d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df512f070>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927dc80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df626b420; to 'JaxprTracer' at 0x152df626b4d0>, <weakref at 0x152df626b600; to 'JaxprTracer' at 0x152df626b3e0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df630de70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927d0e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df626b5b0; to 'JaxprTracer' at 0x152df626b020>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df630de70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927f3e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df626a8e0; to 'JaxprTracer' at 0x152df6269c20>, <weakref at 0x152df626aca0; to 'JaxprTracer' at 0x152df626bcf0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df630de70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927d5a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df626ade0; to 'JaxprTracer' at 0x152df626ac10>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df630de70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 33: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927d340>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e016080e0; to 'JaxprTracer' at 0x152e0160b0c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df59a3a70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927fd30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152e0160b2e0; to 'JaxprTracer' at 0x152e016099a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5e038f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba6a40>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df74f9490; to 'JaxprTracer' at 0x152df74f8dc0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5326270>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba5070>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152e0022a700; to 'JaxprTracer' at 0x152e00229ef0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5116070>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927f7c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df527a3e0; to 'JaxprTracer' at 0x152df527a300>, <weakref at 0x152df527a570; to 'JaxprTracer' at 0x152df527a440>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df74f44b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927c180>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df527a520; to 'JaxprTracer' at 0x152df527a080>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df74f44b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927d600>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e05d799e0; to 'JaxprTracer' at 0x152e05d7ae90>, <weakref at 0x152e05d7ade0; to 'JaxprTracer' at 0x152e05d7bc00>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df74f44b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927fef0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e05d797b0; to 'JaxprTracer' at 0x152df778a9e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df74f44b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 34: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927d940>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df74fb290; to 'JaxprTracer' at 0x152df74f8230>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5764470>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927f690>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df76f63e0; to 'JaxprTracer' at 0x152df76f4690>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df62fb9f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba6780>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df62681d0; to 'JaxprTracer' at 0x152df62680a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df52bf2b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba7640>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df62693a0; to 'JaxprTracer' at 0x152df626acb0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4fffcb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927eb20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df4ffa2a0; to 'JaxprTracer' at 0x152df4ffa1c0>, <weakref at 0x152df4ffa250; to 'JaxprTracer' at 0x152df4ffa120>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df51bbbb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927ce70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df4ffa200; to 'JaxprTracer' at 0x152df4ff9d60>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df51bbbb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927e640>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e0c45fc90; to 'JaxprTracer' at 0x152e0c45f200>, <weakref at 0x152e0c45f470; to 'JaxprTracer' at 0x152e0c45f250>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df51bbbb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927fd30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e0c45cbd0; to 'JaxprTracer' at 0x152e0c45d9a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df51bbbb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 35: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927c170>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df79d06d0; to 'JaxprTracer' at 0x152df79d26c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df55f08f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927ceb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df6268680; to 'JaxprTracer' at 0x152df6268280>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6301d70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba6610>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152e0022b470; to 'JaxprTracer' at 0x152e00228e60>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df6c348b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba6570>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152e0914afc0; to 'JaxprTracer' at 0x152e0914ae90>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4cdaaf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159fe50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df4c51e90; to 'JaxprTracer' at 0x152df4c51f40>, <weakref at 0x152df4c52070; to 'JaxprTracer' at 0x152df4c51e50>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5e46f70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159c6d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df4c52020; to 'JaxprTracer' at 0x152df4c51a90>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5e46f70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159d480>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df580aed0; to 'JaxprTracer' at 0x152df5809720>, <weakref at 0x152df580b330; to 'JaxprTracer' at 0x152df58099f0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5e46f70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159f5b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df5808fe0; to 'JaxprTracer' at 0x152df580af80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5e46f70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 36: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159d230>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152dffbbabb0; to 'JaxprTracer' at 0x152dffbb99a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5953430>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159de40>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152dffbb9d50; to 'JaxprTracer' at 0x152dffbb8e60>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df518f770>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba57f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152e0160b3d0; to 'JaxprTracer' at 0x152e01608230>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4cd3030>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba50f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152e0160a840; to 'JaxprTracer' at 0x152e01608280>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4bc0830>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927c7d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df4bb5b70; to 'JaxprTracer' at 0x152df4bb5a90>, <weakref at 0x152df4bb5d00; to 'JaxprTracer' at 0x152df4bb5bd0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df504e430>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927e040>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df4bb5cb0; to 'JaxprTracer' at 0x152df4bb5810>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df504e430>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927f020>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df740ba10; to 'JaxprTracer' at 0x152df740b250>, <weakref at 0x152df7409170; to 'JaxprTracer' at 0x152df7409040>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df504e430>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927fc40>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df7408c70; to 'JaxprTracer' at 0x152e04bae0d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df504e430>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 37: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927d090>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df74151c0; to 'JaxprTracer' at 0x152df74153b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df55b0a70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927d040>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df774c540; to 'JaxprTracer' at 0x152df774c7d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4bbe4f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159eb70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df7642890; to 'JaxprTracer' at 0x152df7643980>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4cc7a70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159efa0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df521f6f0; to 'JaxprTracer' at 0x152df521d040>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4aaa8b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba6df0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df4a34fe0; to 'JaxprTracer' at 0x152df4a34f00>, <weakref at 0x152df4a35170; to 'JaxprTracer' at 0x152df4a35040>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5236670>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba5b90>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df4a35260; to 'JaxprTracer' at 0x152df4a350e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5236670>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927c1e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df4a344a0; to 'JaxprTracer' at 0x152df4a356d0>, <weakref at 0x152df4a35620; to 'JaxprTracer' at 0x152df4a37ac0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5236670>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927e9e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df4a35c60; to 'JaxprTracer' at 0x152df4a352c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5236670>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 38: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06f64170>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e0171a3e0; to 'JaxprTracer' at 0x152e01719ae0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5e0d670>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06f645f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df6fba610; to 'JaxprTracer' at 0x152df6fbb7f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4b45570>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba7770>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152e01561b70; to 'JaxprTracer' at 0x152e015615e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4ce95f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba46a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152e01560c70; to 'JaxprTracer' at 0x152e01562440>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df49024f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06f64f90>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e04693ec0; to 'JaxprTracer' at 0x152e04690410>, <weakref at 0x152e04693330; to 'JaxprTracer' at 0x152e04693480>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df53801b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06f651f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e04693e70; to 'JaxprTracer' at 0x152e046914f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df53801b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06f643e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df496a980; to 'JaxprTracer' at 0x152df4969f40>, <weakref at 0x152df496a890; to 'JaxprTracer' at 0x152df4969e00>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df53801b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06f647d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df496acf0; to 'JaxprTracer' at 0x152df4968e60>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df53801b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 39: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06f64670>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df7759940; to 'JaxprTracer' at 0x152df77580a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5456430>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06f65820>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152e03077bf0; to 'JaxprTracer' at 0x152e03075b30>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df55162f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba58f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df69be110; to 'JaxprTracer' at 0x152df69bc9b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df543e5f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159d200>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df5e34400; to 'JaxprTracer' at 0x152df5e372a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4858570>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927db20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df71b8f90; to 'JaxprTracer' at 0x152df71ba850>, <weakref at 0x152df71b9fd0; to 'JaxprTracer' at 0x152df71b9540>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4a5b1f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927c7f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df71b8400; to 'JaxprTracer' at 0x152df71b8dc0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4a5b1f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06f64de0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df7572980; to 'JaxprTracer' at 0x152df7570d20>, <weakref at 0x152df7573060; to 'JaxprTracer' at 0x152df75712c0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4a5b1f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06f643e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df7573dd0; to 'JaxprTracer' at 0x152df7571680>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4a5b1f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 40: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06f655e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e0613b150; to 'JaxprTracer' at 0x152e06139a90>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df485caf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06f65770>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df52781d0; to 'JaxprTracer' at 0x152df527a4e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4a5d1b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba4730>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152e03075030; to 'JaxprTracer' at 0x152e03077bb0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df469a1f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba5000>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152e03074090; to 'JaxprTracer' at 0x152e03076080>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df473eb70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927f230>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df5d21ad0; to 'JaxprTracer' at 0x152df5d22800>, <weakref at 0x152df5d20ea0; to 'JaxprTracer' at 0x152df5d20d20>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df465ed30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927d840>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df5d229d0; to 'JaxprTracer' at 0x152df5d21400>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df465ed30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06f64110>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df5d219e0; to 'JaxprTracer' at 0x152df5d23250>, <weakref at 0x152df5d200e0; to 'JaxprTracer' at 0x152df5d21090>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df465ed30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06f65040>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df5d21a30; to 'JaxprTracer' at 0x152df5d23de0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df465ed30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 41: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06f64760>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df4b35c10; to 'JaxprTracer' at 0x152df4b34280>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4fdd470>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06f643e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df4b359e0; to 'JaxprTracer' at 0x152df4b37ed0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4d04470>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba5710>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df7363740; to 'JaxprTracer' at 0x152df7362580>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4eb3f70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba7190>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152e0aef1f30; to 'JaxprTracer' at 0x152e0aef2b70>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df45d46f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06f65610>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df6f2e200; to 'JaxprTracer' at 0x152df6f2d220>, <weakref at 0x152df6f2ff10; to 'JaxprTracer' at 0x152df6f2df90>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df48382f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06f65770>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df6f2f7e0; to 'JaxprTracer' at 0x152df6f2c190>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df48382f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927dac0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dfff9e930; to 'JaxprTracer' at 0x152dfff9ea80>, <weakref at 0x152dfff9d260; to 'JaxprTracer' at 0x152dfff9d130>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df48382f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927c7f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dfff9e020; to 'JaxprTracer' at 0x152dfff9e9e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df48382f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 42: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159f6e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df5729670; to 'JaxprTracer' at 0x152df5729310>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4704e70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159ecb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df5808f40; to 'JaxprTracer' at 0x152df580b160>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4742170>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06f64570>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152dffb48900; to 'JaxprTracer' at 0x152dffb48730>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df47201b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09311f60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152dffb48860; to 'JaxprTracer' at 0x152dffb488c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4543930>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba5ff0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e0316e480; to 'JaxprTracer' at 0x152e0316c370>, <weakref at 0x152e0316c4a0; to 'JaxprTracer' at 0x152e0316d630>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5315a70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba7470>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e0316e890; to 'JaxprTracer' at 0x152e0316ed50>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5315a70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159e6f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e07199a30; to 'JaxprTracer' at 0x152e07199d60>, <weakref at 0x152e0719b650; to 'JaxprTracer' at 0x152e07199540>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5315a70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159e8b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e07198950; to 'JaxprTracer' at 0x152e0719b250>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5315a70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 43: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06f64040>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df7779e40; to 'JaxprTracer' at 0x152df77792c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4684c70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159ec80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152e01bd8590; to 'JaxprTracer' at 0x152e01bd87d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4d001f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09310700>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df64954e0; to 'JaxprTracer' at 0x152df6494e60>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4473bb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09310130>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152dffa3eed0; to 'JaxprTracer' at 0x152dffa3e440>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df42e5b30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06f65680>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df45dcd60; to 'JaxprTracer' at 0x152df45dcc30>, <weakref at 0x152df45dcf90; to 'JaxprTracer' at 0x152df45dce10>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4d02bb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06f657c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df45dd0d0; to 'JaxprTracer' at 0x152df45dceb0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4d02bb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159e7f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df6cb89a0; to 'JaxprTracer' at 0x152df6cbac60>, <weakref at 0x152df6cbb4c0; to 'JaxprTracer' at 0x152df6cb85a0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4d02bb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159c890>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df6cb84a0; to 'JaxprTracer' at 0x152df6cbb7a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4d02bb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 44: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06f647f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df789f060; to 'JaxprTracer' at 0x152df789fbb0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df5060fb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159d960>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152dffc4e8e0; to 'JaxprTracer' at 0x152dffc4db80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df461b230>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09311ae0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df4a6d850; to 'JaxprTracer' at 0x152df4a6db80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4be4ff0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e093135f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152dffbb89f0; to 'JaxprTracer' at 0x152dffbb8190>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df41c50b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06f64c20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df5354ea0; to 'JaxprTracer' at 0x152df53577a0>, <weakref at 0x152df5354310; to 'JaxprTracer' at 0x152df5357930>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df45a0170>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06f652b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df5357a10; to 'JaxprTracer' at 0x152df5357f70>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df45a0170>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159fba0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df53541d0; to 'JaxprTracer' at 0x152df5355770>, <weakref at 0x152df53566b0; to 'JaxprTracer' at 0x152df53569e0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df45a0170>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159e450>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df5355d50; to 'JaxprTracer' at 0x152df5354aa0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df45a0170>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 45: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927f200>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152dffa8f9c0; to 'JaxprTracer' at 0x152dffa8d950>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4878830>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927d610>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152e05c50c70; to 'JaxprTracer' at 0x152e05c53890>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df442e470>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09310c90>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df70fe660; to 'JaxprTracer' at 0x152df70ff2f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df45650b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09311190>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152e01c1bd30; to 'JaxprTracer' at 0x152e01c1acb0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df40a7570>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba4650>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df7363970; to 'JaxprTracer' at 0x152df7363ac0>, <weakref at 0x152df7361a30; to 'JaxprTracer' at 0x152df7361900>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4cca8b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e01628f40>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df7362700; to 'JaxprTracer' at 0x152df7361180>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4cca8b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159ff40>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e05e3aa20; to 'JaxprTracer' at 0x152e05e38b40>, <weakref at 0x152e05e38c20; to 'JaxprTracer' at 0x152e05e39630>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4cca8b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159e620>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e05e3b6a0; to 'JaxprTracer' at 0x152dffb16350>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4cca8b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 46: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927ce70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e062e1c10; to 'JaxprTracer' at 0x152e062e0500>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df45d3df0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159f260>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152e000c3e70; to 'JaxprTracer' at 0x152e000c0b90>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df43924b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e093105b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df77f7f10; to 'JaxprTracer' at 0x152df77f6080>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df428ad70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09311770>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df77f5800; to 'JaxprTracer' at 0x152df77f7340>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4166030>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0927ea80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df70fc1d0; to 'JaxprTracer' at 0x152df70ffde0>, <weakref at 0x152df70fd4e0; to 'JaxprTracer' at 0x152df70ff1b0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4f38d70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159d230>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df70fef70; to 'JaxprTracer' at 0x152df70ff930>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4f38d70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06f654d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df5b036f0; to 'JaxprTracer' at 0x152df5b03750>, <weakref at 0x152df5b03b00; to 'JaxprTracer' at 0x152df5b01400>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4f38d70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159f6e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df5b022f0; to 'JaxprTracer' at 0x152df5b00410>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4f38d70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 47: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06f65700>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e05c50590; to 'JaxprTracer' at 0x152e05c52850>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df41e0bf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06f64320>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152dff9a3650; to 'JaxprTracer' at 0x152dff9a2710>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4292af0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09313170>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152e0a3c6e80; to 'JaxprTracer' at 0x152e0a3c5720>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df40e57f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09310f50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df409cf90; to 'JaxprTracer' at 0x152df409ce10>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3e880b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159d960>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e03001760; to 'JaxprTracer' at 0x152e03000190>, <weakref at 0x152e030018a0; to 'JaxprTracer' at 0x152e03001a90>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4173c70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159f4e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e03003650; to 'JaxprTracer' at 0x152e03000c80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4173c70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09313660>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dff9d8b80; to 'JaxprTracer' at 0x152dff9db1b0>, <weakref at 0x152dff9d88b0; to 'JaxprTracer' at 0x152dff9dbb10>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4173c70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09312c90>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dff9db150; to 'JaxprTracer' at 0x152dff9d8690>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4173c70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 48: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09313d70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df77c10d0; to 'JaxprTracer' at 0x152df77c1ef0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4169930>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09313830>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df77c1300; to 'JaxprTracer' at 0x152df77c3a20>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df41b8bf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba7160>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df6bfb920; to 'JaxprTracer' at 0x152df6bf9d10>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df42518b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba4320>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df78ec220; to 'JaxprTracer' at 0x152df78eefd0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3d9e4b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09311fa0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df3d27bf0; to 'JaxprTracer' at 0x152df3d27a20>, <weakref at 0x152df3d27b50; to 'JaxprTracer' at 0x152df3d27c50>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4563a30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e093103e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df3d27880; to 'JaxprTracer' at 0x152df3d27840>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4563a30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba4730>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df3d9a570; to 'JaxprTracer' at 0x152df3d98d20>, <weakref at 0x152df3d9a390; to 'JaxprTracer' at 0x152df3d9a2b0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4563a30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba42e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df3d99710; to 'JaxprTracer' at 0x152df3d99310>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4563a30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 49: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba50b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df4a2f0b0; to 'JaxprTracer' at 0x152df4a2de50>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df47b75b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba6760>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df4a2c270; to 'JaxprTracer' at 0x152df4a2d3b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df40dd6b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09312400>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152e0010d170; to 'JaxprTracer' at 0x152e0010e120>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3dff530>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09313cc0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152e00079ee0; to 'JaxprTracer' at 0x152e0007bde0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3b6c9f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba7c70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df3b667a0; to 'JaxprTracer' at 0x152df3b666c0>, <weakref at 0x152df3b66930; to 'JaxprTracer' at 0x152df3b66800>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3dbc530>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba6aa0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df3b66430; to 'JaxprTracer' at 0x152df3b663f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3dbc530>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159f9a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e087ade90; to 'JaxprTracer' at 0x152e087ae0d0>, <weakref at 0x152e087ae3e0; to 'JaxprTracer' at 0x152e087aee40>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3dbc530>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0159f710>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e087ac8b0; to 'JaxprTracer' at 0x152e087adfe0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3dbc530>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 50: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba7270>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df57297b0; to 'JaxprTracer' at 0x152df572bfc0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4089cb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba6260>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152e03151490; to 'JaxprTracer' at 0x152e03152a80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df41b3170>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09311360>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df41c19e0; to 'JaxprTracer' at 0x152df41c1130>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3d64d70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02dee0a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152e0616f600; to 'JaxprTracer' at 0x152e0616f110>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3c0bfb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba5e70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df75b35b0; to 'JaxprTracer' at 0x152df75b1d60>, <weakref at 0x152df75b28e0; to 'JaxprTracer' at 0x152df75b17c0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3b92eb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba49c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df75b31f0; to 'JaxprTracer' at 0x152df75b36b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3b92eb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba6a30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df75b0180; to 'JaxprTracer' at 0x152df75b0e60>, <weakref at 0x152df75b3fb0; to 'JaxprTracer' at 0x152df75b1e00>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3b92eb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba5150>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df75b17b0; to 'JaxprTracer' at 0x152df75b3b60>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3b92eb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 51: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba79e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df569abb0; to 'JaxprTracer' at 0x152df56998b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3c55ef0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba7cd0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df6ec3f10; to 'JaxprTracer' at 0x152df6ec3980>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3b13fb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02dee960>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152dffad88b0; to 'JaxprTracer' at 0x152dffad8d70>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3c2e2f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02ded830>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152e03002480; to 'JaxprTracer' at 0x152e03000af0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4dea3f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e093132b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df61749f0; to 'JaxprTracer' at 0x152df6174b90>, <weakref at 0x152df6177a10; to 'JaxprTracer' at 0x152df61764e0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3b92c70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09312bb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df6176430; to 'JaxprTracer' at 0x152df6174d20>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3b92c70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09310330>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df4d9cf40; to 'JaxprTracer' at 0x152df4d9f070>, <weakref at 0x152df4d9ec00; to 'JaxprTracer' at 0x152df4d9ed50>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3b92c70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e093124b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df4d9e7f0; to 'JaxprTracer' at 0x152df4d9d720>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3b92c70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 52: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09311aa0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e00078720; to 'JaxprTracer' at 0x152e0007ac60>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3bad3b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09312a30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df41c09a0; to 'JaxprTracer' at 0x152df41c1c20>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3d5fdf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02deef90>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152e0a265710; to 'JaxprTracer' at 0x152e0a265770>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3ad47b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02dee3a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df6bfa660; to 'JaxprTracer' at 0x152df6bf94f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df37f0fb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba5fa0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df37e87c0; to 'JaxprTracer' at 0x152df37e86e0>, <weakref at 0x152df37e8950; to 'JaxprTracer' at 0x152df37e8820>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3b78cf0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba7560>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df37e8450; to 'JaxprTracer' at 0x152df37e8410>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3b78cf0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba4ec0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df377e0c0; to 'JaxprTracer' at 0x152df377eb20>, <weakref at 0x152df377e7f0; to 'JaxprTracer' at 0x152df377ec10>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3b78cf0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba6790>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df377f7e0; to 'JaxprTracer' at 0x152df377e710>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3b78cf0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 53: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba5040>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df626ad90; to 'JaxprTracer' at 0x152df6269d10>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3b44130>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba6b00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df5355bc0; to 'JaxprTracer' at 0x152df5356940>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3c08330>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02deceb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df6176ed0; to 'JaxprTracer' at 0x152df6175cc0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4e4c1f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02dedd10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df61768e0; to 'JaxprTracer' at 0x152df6174690>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df36e73f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba79b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df36dacf0; to 'JaxprTracer' at 0x152df36dac10>, <weakref at 0x152df36daca0; to 'JaxprTracer' at 0x152df36dab70>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3dd4c70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba4e90>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df36dac50; to 'JaxprTracer' at 0x152df36da7b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3dd4c70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e093127f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df36d8f40; to 'JaxprTracer' at 0x152df36d8dc0>, <weakref at 0x152df36db380; to 'JaxprTracer' at 0x152df36d8aa0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3dd4c70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e093108a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df36daa70; to 'JaxprTracer' at 0x152df36d9bd0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3dd4c70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 54: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09312fd0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e06363a60; to 'JaxprTracer' at 0x152e06363d90>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3b04770>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09311540>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152e0177f6a0; to 'JaxprTracer' at 0x152e0177c640>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df37526b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02dedc10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df672d990; to 'JaxprTracer' at 0x152df672f430>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df369adf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02ded4e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df672ed90; to 'JaxprTracer' at 0x152df672c1e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df35d1db0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e093101a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e087dcb30; to 'JaxprTracer' at 0x152e087de0d0>, <weakref at 0x152e087ddee0; to 'JaxprTracer' at 0x152e087ddf40>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3769ef0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e093130e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e087dd4e0; to 'JaxprTracer' at 0x152e082788c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3769ef0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09310800>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df780f290; to 'JaxprTracer' at 0x152df780ff70>, <weakref at 0x152df780d120; to 'JaxprTracer' at 0x152df780d680>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3769ef0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e093115b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df780d210; to 'JaxprTracer' at 0x152e0c362a80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3769ef0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 55: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09311fa0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152dffb8d800; to 'JaxprTracer' at 0x152dffb8c0f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4e4b9b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09312950>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152e06f36ed0; to 'JaxprTracer' at 0x152e06f373e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df36cecb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba4930>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df45d8a40; to 'JaxprTracer' at 0x152df45d8460>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3592cf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba7a70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152e01773ab0; to 'JaxprTracer' at 0x152e01773f70>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3a94430>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e093128d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e087ad6c0; to 'JaxprTracer' at 0x152e087acc30>, <weakref at 0x152e087ac9f0; to 'JaxprTracer' at 0x152e087af840>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df367c1b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e093126f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dffb163e0; to 'JaxprTracer' at 0x152dffb17110>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df367c1b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09310f30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e015613f0; to 'JaxprTracer' at 0x152e01563f20>, <weakref at 0x152e015618f0; to 'JaxprTracer' at 0x152e01563250>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df367c1b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09310880>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e01562890; to 'JaxprTracer' at 0x152e01563340>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df367c1b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 56: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09310f50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df6841030; to 'JaxprTracer' at 0x152df6841b80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df38129b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09311a80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df6842840; to 'JaxprTracer' at 0x152df68429e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3d927b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba7460>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df7415940; to 'JaxprTracer' at 0x152df7417ca0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3a4b0b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba6170>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152dffc16de0; to 'JaxprTracer' at 0x152dffc15f40>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df347edf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09312ef0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dffa8cc70; to 'JaxprTracer' at 0x152dffa8c2d0>, <weakref at 0x152dffa8dda0; to 'JaxprTracer' at 0x152dffa8c960>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3a220f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09310670>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dffa8f8d0; to 'JaxprTracer' at 0x152dffa8ccd0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3a220f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09313cd0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df355ae80; to 'JaxprTracer' at 0x152df355a800>, <weakref at 0x152df355a980; to 'JaxprTracer' at 0x152df355b7a0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3a220f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e093130a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df35596c0; to 'JaxprTracer' at 0x152df3558b40>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3a220f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 57: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba4390>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df3d9a9d0; to 'JaxprTracer' at 0x152df3d9b110>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3442270>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba4f30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df3d981d0; to 'JaxprTracer' at 0x152df3d9a300>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df341f030>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02decdf0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df6177600; to 'JaxprTracer' at 0x152df6176350>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3401ff0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02dee7b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df61777e0; to 'JaxprTracer' at 0x152df6175450>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df31ec9f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09310540>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df32595d0; to 'JaxprTracer' at 0x152df32594f0>, <weakref at 0x152df3259580; to 'JaxprTracer' at 0x152df3259450>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df33eb5b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09312c50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df3259080; to 'JaxprTracer' at 0x152df3259220>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df33eb5b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e093106a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df6fb8e50; to 'JaxprTracer' at 0x152df6fba260>, <weakref at 0x152df6fb9ee0; to 'JaxprTracer' at 0x152df6fb94f0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df33eb5b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09311a80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df6fb86d0; to 'JaxprTracer' at 0x152df6fb9770>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df33eb5b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 58: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e093106e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e000625c0; to 'JaxprTracer' at 0x152e00061b80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df33e4bb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e093103c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df790ef20; to 'JaxprTracer' at 0x152df790ea80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df378d2f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02ded4e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df4a6e3e0; to 'JaxprTracer' at 0x152df4a6ed00>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3469630>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c0590>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df4a6c6d0; to 'JaxprTracer' at 0x152df4a6fc50>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df33170b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09312af0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e015f8cc0; to 'JaxprTracer' at 0x152e015f8e60>, <weakref at 0x152e015fa980; to 'JaxprTracer' at 0x152e015fb480>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3a3acf0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09311bf0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e015f94e0; to 'JaxprTracer' at 0x152e015f85f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3a3acf0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09310b20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e015fa0c0; to 'JaxprTracer' at 0x152e015faa30>, <weakref at 0x152e015f8e50; to 'JaxprTracer' at 0x152e015f8d20>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3a3acf0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e093104b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e015f8a90; to 'JaxprTracer' at 0x152e015fa620>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3a3acf0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 59: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e093134a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df3d9bb50; to 'JaxprTracer' at 0x152df3d98820>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df32acbf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09311490>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df3d9bce0; to 'JaxprTracer' at 0x152df3d998b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df32e92f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c0fd0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152e03001030; to 'JaxprTracer' at 0x152e03001b30>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df32c3170>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c0fe0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df7759490; to 'JaxprTracer' at 0x152e05c349b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2f299f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09311bd0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df30eba10; to 'JaxprTracer' at 0x152df30eb890>, <weakref at 0x152df30eb9c0; to 'JaxprTracer' at 0x152df30eb840>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3207030>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09312880>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df30eb470; to 'JaxprTracer' at 0x152df30eb660>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3207030>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e093120e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df76dc180; to 'JaxprTracer' at 0x152df76ded00>, <weakref at 0x152df76dc860; to 'JaxprTracer' at 0x152df76dd400>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3207030>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09311dd0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df76de5c0; to 'JaxprTracer' at 0x152df76dc1e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3207030>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 60: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e093105c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df377cf90; to 'JaxprTracer' at 0x152df377f390>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3475430>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e093127e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df377ddf0; to 'JaxprTracer' at 0x152df377c460>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df30717b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c18c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df30e1210; to 'JaxprTracer' at 0x152df30e1040>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df32e5570>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c1eb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df30e2ca0; to 'JaxprTracer' at 0x152df30e2ad0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2e17bf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba67b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df2e0e930; to 'JaxprTracer' at 0x152df2e0e850>, <weakref at 0x152df2e0e8e0; to 'JaxprTracer' at 0x152df2e0e990>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2f302b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba4b70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df2e0ea70; to 'JaxprTracer' at 0x152df2e0e5d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2f302b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09312e70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df2e0d800; to 'JaxprTracer' at 0x152df2e0e490>, <weakref at 0x152df2e0cb80; to 'JaxprTracer' at 0x152df2e0e620>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2f302b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09311490>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df2e0cd60; to 'JaxprTracer' at 0x152df2e0dd10>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2f302b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 61: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09313c30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df774e480; to 'JaxprTracer' at 0x152df774fa70>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df336b2b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09312510>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df6d20950; to 'JaxprTracer' at 0x152df6d22990>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3347430>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c1fd0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df6176ac0; to 'JaxprTracer' at 0x152df6176440>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2e3af70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c0aa0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df6175440; to 'JaxprTracer' at 0x152df6175630>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2eddcf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba6550>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df3b65a80; to 'JaxprTracer' at 0x152df3b66b70>, <weakref at 0x152df3b65d00; to 'JaxprTracer' at 0x152df3b66080>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2e3e570>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba46b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df3b676a0; to 'JaxprTracer' at 0x152df4b35810>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2e3e570>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02ded570>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e047ad1c0; to 'JaxprTracer' at 0x152e047ae0d0>, <weakref at 0x152e047af7e0; to 'JaxprTracer' at 0x152e047ad180>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2e3e570>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02dec230>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e047aee30; to 'JaxprTracer' at 0x152e047ad900>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2e3e570>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 62: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02dedfb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df545c680; to 'JaxprTracer' at 0x152df545fc00>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3104130>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02dec290>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df7640630; to 'JaxprTracer' at 0x152df76434d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2ead130>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c1c20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152e085a8680; to 'JaxprTracer' at 0x152e085abcf0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2d3a270>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c3140>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df6e27ce0; to 'JaxprTracer' at 0x152df6e27f70>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2bad370>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba4650>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df55ec270; to 'JaxprTracer' at 0x152df55ecb90>, <weakref at 0x152df55ef100; to 'JaxprTracer' at 0x152df55eccd0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2eb66f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba49b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df55ee930; to 'JaxprTracer' at 0x152df55ee490>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2eb66f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba4c90>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df30e0630; to 'JaxprTracer' at 0x152df30e1090>, <weakref at 0x152df30e09a0; to 'JaxprTracer' at 0x152df30e0c80>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2eb66f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba6760>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df30e0cc0; to 'JaxprTracer' at 0x152df30e05f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2eb66f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 63: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e093115a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e000f5530; to 'JaxprTracer' at 0x152e000f5130>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2cdadb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba4510>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df4a2e200; to 'JaxprTracer' at 0x152df4a2cf50>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2e36030>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c14c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152e047af9c0; to 'JaxprTracer' at 0x152e047af2f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2e86a70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c0280>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df62901d0; to 'JaxprTracer' at 0x152df62934d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2c5ba70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09311f70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df2ae5620; to 'JaxprTracer' at 0x152df2ae5540>, <weakref at 0x152df2ae57b0; to 'JaxprTracer' at 0x152df2ae5680>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4d63ef0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09313af0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df2ae5760; to 'JaxprTracer' at 0x152df2ae52c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4d63ef0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02dee240>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e06360e50; to 'JaxprTracer' at 0x152e063631b0>, <weakref at 0x152e06363a10; to 'JaxprTracer' at 0x152e06363700>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4d63ef0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02ded510>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e06361080; to 'JaxprTracer' at 0x152e063612c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df4d63ef0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 64: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02ded310>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df4b34cc0; to 'JaxprTracer' at 0x152df4b34370>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2f63870>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02dec790>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152e0ad81f30; to 'JaxprTracer' at 0x152e0ad80f50>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2f9bc70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c02b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df774f290; to 'JaxprTracer' at 0x152df774efd0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2ff0af0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c3100>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df774de40; to 'JaxprTracer' at 0x152df774c5a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2ac5df0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02ded730>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df2ad7bf0; to 'JaxprTracer' at 0x152df2ad7b10>, <weakref at 0x152df2ad7c40; to 'JaxprTracer' at 0x152df2ad7ca0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2c651f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02deddb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df2ad7e20; to 'JaxprTracer' at 0x152df2ad78e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2c651f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02deca60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e03136d40; to 'JaxprTracer' at 0x152e03134230>, <weakref at 0x152e031344f0; to 'JaxprTracer' at 0x152e03136300>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2c651f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02deccf0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e03136ac0; to 'JaxprTracer' at 0x152df2ad68f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2c651f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 65: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02decea0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152dff9dae80; to 'JaxprTracer' at 0x152dff9db2f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2acdf30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02ded080>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152e0c33bd30; to 'JaxprTracer' at 0x152e0c33af80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2ff3bb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c1be0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df2c76cf0; to 'JaxprTracer' at 0x152df2c75c70>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2c67830>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c11b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152e03066110; to 'JaxprTracer' at 0x152e030675c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df289c0b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09312850>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e01563d80; to 'JaxprTracer' at 0x152e01563d40>, <weakref at 0x152e01560180; to 'JaxprTracer' at 0x152e01563160>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df32cfc30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09313c70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e01563ec0; to 'JaxprTracer' at 0x152e01563980>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df32cfc30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e093137b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e0858d4e0; to 'JaxprTracer' at 0x152e0858c8c0>, <weakref at 0x152e0858c0e0; to 'JaxprTracer' at 0x152e0858dcc0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df32cfc30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09312790>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e0858f100; to 'JaxprTracer' at 0x152e0c64a670>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df32cfc30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 66: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba7b50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e05c53f60; to 'JaxprTracer' at 0x152e05c526c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2fdc130>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09311f90>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df76f4400; to 'JaxprTracer' at 0x152df76f4280>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2b506f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c37c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df75f52b0; to 'JaxprTracer' at 0x152df75f4460>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2a23730>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c1580>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df6fb8c20; to 'JaxprTracer' at 0x152df6fb9900>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df27a6c70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02ded710>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df2736f70; to 'JaxprTracer' at 0x152df2736da0>, <weakref at 0x152df2736ed0; to 'JaxprTracer' at 0x152df2736fd0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df285a730>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02decb50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df2736c00; to 'JaxprTracer' at 0x152df2736bc0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df285a730>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba43f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df279c3b0; to 'JaxprTracer' at 0x152df279c460>, <weakref at 0x152df279cc70; to 'JaxprTracer' at 0x152df279cf00>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df285a730>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba4e90>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df279cb80; to 'JaxprTracer' at 0x152e02f995e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df285a730>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 67: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02dec120>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df79d3150; to 'JaxprTracer' at 0x152df79d0410>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2ac16f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02decf50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df5dc5710; to 'JaxprTracer' at 0x152df5dc47d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df29667b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c34d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df78929d0; to 'JaxprTracer' at 0x152df7893340>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df288d270>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c2370>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df6e24db0; to 'JaxprTracer' at 0x152df6e27660>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df261c230>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02dec790>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df2694630; to 'JaxprTracer' at 0x152df2694550>, <weakref at 0x152df26947c0; to 'JaxprTracer' at 0x152df2694690>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2b81a70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02dec520>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df26942c0; to 'JaxprTracer' at 0x152df2694280>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2b81a70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09310540>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df262fa10; to 'JaxprTracer' at 0x152df262efd0>, <weakref at 0x152df262e7f0; to 'JaxprTracer' at 0x152df262ec60>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2b81a70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09313220>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df262e160; to 'JaxprTracer' at 0x152df262e350>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2b81a70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 68: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e05ba47f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df790fc40; to 'JaxprTracer' at 0x152df790d180>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2d565b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09310290>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152e015cf8d0; to 'JaxprTracer' at 0x152e015cdea0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2a21830>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c0980>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df76df1f0; to 'JaxprTracer' at 0x152df76de1c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2681d70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c3940>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df4734d60; to 'JaxprTracer' at 0x152df325adf0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2402970>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02ded970>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df6fb9670; to 'JaxprTracer' at 0x152df6fb9130>, <weakref at 0x152df6fba520; to 'JaxprTracer' at 0x152df6fbbcf0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df35d0ef0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02dec630>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e0d1639c0; to 'JaxprTracer' at 0x152e0d163e80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df35d0ef0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09312a80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e046eecf0; to 'JaxprTracer' at 0x152e046eeda0>, <weakref at 0x152e046ef740; to 'JaxprTracer' at 0x152e046ec730>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df35d0ef0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09310b90>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e046edc10; to 'JaxprTracer' at 0x152e046eed50>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df35d0ef0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 69: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02deddf0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df298ff10; to 'JaxprTracer' at 0x152df298d5e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df23c4ab0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02dec590>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df298f0b0; to 'JaxprTracer' at 0x152df298c5a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2728c30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c1110>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df66735b0; to 'JaxprTracer' at 0x152df6670730>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df29b6f70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c3ac0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152e03066200; to 'JaxprTracer' at 0x152e03065ae0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df24eaaf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02deeeb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df5c14540; to 'JaxprTracer' at 0x152df5c15860>, <weakref at 0x152df5c16610; to 'JaxprTracer' at 0x152df5c15d10>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2425130>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02ded8a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df5c155d0; to 'JaxprTracer' at 0x152df5c15a90>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2425130>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02decf20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e092520c0; to 'JaxprTracer' at 0x152e09252580>, <weakref at 0x152e09252250; to 'JaxprTracer' at 0x152e092505f0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2425130>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02dede80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e092536a0; to 'JaxprTracer' at 0x152e09253070>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2425130>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 70: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02ded080>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df3a1bb00; to 'JaxprTracer' at 0x152df3a18500>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df24d9bf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02dedc30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df3a19c60; to 'JaxprTracer' at 0x152df3a1b980>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df25de970>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09311000>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df79432e0; to 'JaxprTracer' at 0x152df7940eb0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df238d2b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c1040>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152e047cdad0; to 'JaxprTracer' at 0x152e047ce9e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df218c6b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02ded140>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df2200310; to 'JaxprTracer' at 0x152df2200230>, <weakref at 0x152df22002c0; to 'JaxprTracer' at 0x152df2200190>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df295a8f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02dee1b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df2197f60; to 'JaxprTracer' at 0x152df2197f20>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df295a8f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02dedd10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df298e840; to 'JaxprTracer' at 0x152df298caf0>, <weakref at 0x152df298fa60; to 'JaxprTracer' at 0x152df298c690>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df295a8f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02decea0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df298e200; to 'JaxprTracer' at 0x152df298da40>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df295a8f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 71: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02dee830>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e016d9b20; to 'JaxprTracer' at 0x152e016db0c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df27616f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02dec5b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152e0171b1a0; to 'JaxprTracer' at 0x152e017181e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df278c330>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c1240>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df4a35e40; to 'JaxprTracer' at 0x152df4a36ad0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df25386b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c0050>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df789cfe0; to 'JaxprTracer' at 0x152df789e530>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df20e7670>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02dec2c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df20e0360; to 'JaxprTracer' at 0x152df20e0280>, <weakref at 0x152df20e04f0; to 'JaxprTracer' at 0x152df20e03c0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df21f84b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02dedca0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df20e04a0; to 'JaxprTracer' at 0x152df20e2440>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df21f84b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02dee690>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df5c17ce0; to 'JaxprTracer' at 0x152df5c16d00>, <weakref at 0x152df5c17830; to 'JaxprTracer' at 0x152df5c144b0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df21f84b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02dedc10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df5c15530; to 'JaxprTracer' at 0x152df5c14370>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df21f84b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 72: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02dec210>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df2079f80; to 'JaxprTracer' at 0x152df207ac10>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2b720b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e09310aa0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df207b830; to 'JaxprTracer' at 0x152df207b890>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df256aaf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06e436c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df2203510; to 'JaxprTracer' at 0x152df2203340>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df220f870>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06e43490>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df2200ea0; to 'JaxprTracer' at 0x152df2200be0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1fc98f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c0160>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df1fbca40; to 'JaxprTracer' at 0x152df1fbc960>, <weakref at 0x152df1fbc9f0; to 'JaxprTracer' at 0x152df1fbcaa0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df250ddf0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c0a30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df1fbc6d0; to 'JaxprTracer' at 0x152df1fbc690>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df250ddf0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02ded230>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df1f53970; to 'JaxprTracer' at 0x152df1f53c50>, <weakref at 0x152df1f53740; to 'JaxprTracer' at 0x152df1f53b60>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df250ddf0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02dee070>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df1f53510; to 'JaxprTracer' at 0x152df1f53ac0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df250ddf0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 73: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06e43b40>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e047ccd60; to 'JaxprTracer' at 0x152e047cd770>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2041870>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06e42730>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152e047cf0b0; to 'JaxprTracer' at 0x152e047ce990>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df219da30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c2270>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df741f240; to 'JaxprTracer' at 0x152df741d860>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df20d88f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c2e80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df5c9ef20; to 'JaxprTracer' at 0x152df5c9f7a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df38ff570>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02dee9a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df78010d0; to 'JaxprTracer' at 0x152df7801720>, <weakref at 0x152df78013f0; to 'JaxprTracer' at 0x152df78025d0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1fabf70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02ded9f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df78024d0; to 'JaxprTracer' at 0x152df7801f40>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1fabf70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c1d30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df521e110; to 'JaxprTracer' at 0x152df521fbb0>, <weakref at 0x152df521d940; to 'JaxprTracer' at 0x152df521eb70>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1fabf70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c3700>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df521ce00; to 'JaxprTracer' at 0x152df521e440>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1fabf70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 74: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c1110>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e03176160; to 'JaxprTracer' at 0x152e03176da0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df27c9830>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c0890>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152e03174a40; to 'JaxprTracer' at 0x152e031763f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1f31830>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06e42e20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152dfff78680; to 'JaxprTracer' at 0x152dfff7b160>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2857530>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06e43e60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152e03087f60; to 'JaxprTracer' at 0x152e03085180>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1ca9a70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02dedc10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e087623e0; to 'JaxprTracer' at 0x152e08761310>, <weakref at 0x152e08760900; to 'JaxprTracer' at 0x152e08762940>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1e014b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02deee00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e087603b0; to 'JaxprTracer' at 0x152e08762ee0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1e014b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c1a50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e087601d0; to 'JaxprTracer' at 0x152e08763c50>, <weakref at 0x152e08763380; to 'JaxprTracer' at 0x152e08761680>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1e014b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c1830>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e08761300; to 'JaxprTracer' at 0x152e08763c00>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1e014b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 75: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06e43b00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152dfff7ac50; to 'JaxprTracer' at 0x152dfff78960>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df21995f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06e43340>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152e01488220; to 'JaxprTracer' at 0x152e0148b840>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1fabab0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471c8a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df78030b0; to 'JaxprTracer' at 0x152df78014f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1e47f70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471d240>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df7802ed0; to 'JaxprTracer' at 0x152df7800b90>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1b799b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06e42b30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df1b718f0; to 'JaxprTracer' at 0x152df1b71810>, <weakref at 0x152df1b718a0; to 'JaxprTracer' at 0x152df1b71770>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1e460b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06e43fd0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df1b71850; to 'JaxprTracer' at 0x152df1b713b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1e460b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06e426a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df1b689a0; to 'JaxprTracer' at 0x152df1b684b0>, <weakref at 0x152df1b69f30; to 'JaxprTracer' at 0x152df1b68be0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1e460b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06e43330>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df1b68b30; to 'JaxprTracer' at 0x152e0358e170>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1e460b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 76: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06e43c20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e031761b0; to 'JaxprTracer' at 0x152e03174be0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3919f30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06e43000>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df789fc40; to 'JaxprTracer' at 0x152df789f980>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1e958b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471eda0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df6a991c0; to 'JaxprTracer' at 0x152df6a9b7f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1c84c30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471d4c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df6a9b1a0; to 'JaxprTracer' at 0x152df6a992c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1a4b770>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06e434d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df1a45850; to 'JaxprTracer' at 0x152df1a45770>, <weakref at 0x152df1a459e0; to 'JaxprTracer' at 0x152df1a458b0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1f245b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06e42770>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df1a45990; to 'JaxprTracer' at 0x152df1a454f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1f245b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06e43dd0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df1a45e40; to 'JaxprTracer' at 0x152df1a44d20>, <weakref at 0x152df1a46660; to 'JaxprTracer' at 0x152df1a44ff0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1f245b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06e439c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df1a44630; to 'JaxprTracer' at 0x152df1a456d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1f245b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 77: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06e43b00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df71dbf60; to 'JaxprTracer' at 0x152df71db980>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1faefb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06e43bb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df63d8130; to 'JaxprTracer' at 0x152df63d8a00>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df394bc70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471ed80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152dff9a1030; to 'JaxprTracer' at 0x152dff9a3160>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1cef370>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471c690>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152e01446160; to 'JaxprTracer' at 0x152e01444820>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df193d5b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06e431a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e001d86d0; to 'JaxprTracer' at 0x152e001d90e0>, <weakref at 0x152e001d8450; to 'JaxprTracer' at 0x152e001d9720>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1b14a70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06e43fc0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e001d99e0; to 'JaxprTracer' at 0x152e001da4e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1b14a70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06e42ef0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df4a26fc0; to 'JaxprTracer' at 0x152df4a27a20>, <weakref at 0x152df4a26f20; to 'JaxprTracer' at 0x152df4a25d60>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1b14a70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06e43c10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df4a24ae0; to 'JaxprTracer' at 0x152df4a27b10>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1b14a70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 78: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06e434b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df6d227a0; to 'JaxprTracer' at 0x152df6d22cb0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1b007f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06e42a60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df37ea110; to 'JaxprTracer' at 0x152df37e9090>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1c8f4f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471e350>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df4ff9620; to 'JaxprTracer' at 0x152df4ffa260>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1a35530>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471fb50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df2fd8a40; to 'JaxprTracer' at 0x152df2fd91d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1813b70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06e432b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e06f91bc0; to 'JaxprTracer' at 0x152e06f93750>, <weakref at 0x152e06f93010; to 'JaxprTracer' at 0x152e06f91c70>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1af8370>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06e433d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e06f91030; to 'JaxprTracer' at 0x152e06f91e50>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1af8370>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06e43a20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df2ad6cf0; to 'JaxprTracer' at 0x152df2ad7ed0>, <weakref at 0x152df2ad6b10; to 'JaxprTracer' at 0x152df2ad6620>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1af8370>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06e43680>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df2ad6660; to 'JaxprTracer' at 0x152df2ad59f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1af8370>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 79: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02dee060>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df6a99580; to 'JaxprTracer' at 0x152df6a988c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df19077f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02dee2a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df72a49a0; to 'JaxprTracer' at 0x152df72a7430>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df19c16b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471f950>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df3b67880; to 'JaxprTracer' at 0x152df3b669e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1c170f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471c220>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152e0178ba60; to 'JaxprTracer' at 0x152e01788370>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df16f6330>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c2cb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df16ea110; to 'JaxprTracer' at 0x152df16ea030>, <weakref at 0x152df16ea0c0; to 'JaxprTracer' at 0x152df16ea170>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df195ef30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c36f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df16e9da0; to 'JaxprTracer' at 0x152df16e9d60>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df195ef30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06e42a00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e0a0e1850; to 'JaxprTracer' at 0x152e0a0e2030>, <weakref at 0x152e0a0e01d0; to 'JaxprTracer' at 0x152e0a0e3890>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df195ef30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06e434b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e0a0e2a20; to 'JaxprTracer' at 0x152e0a0e2bc0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df195ef30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 80: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06e43320>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152dffd52d40; to 'JaxprTracer' at 0x152dffd50410>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df16fc870>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c2850>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df4de76f0; to 'JaxprTracer' at 0x152df4de4730>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1d239f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471c8f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df63d9c10; to 'JaxprTracer' at 0x152df63da1c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1ae7270>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471ecd0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df1a466b0; to 'JaxprTracer' at 0x152df1a46080>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1600370>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06e43800>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df15f3c90; to 'JaxprTracer' at 0x152df15f3b10>, <weakref at 0x152df31f1b20; to 'JaxprTracer' at 0x152df15f3d90>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df17015b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06e42bc0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df31f0a90; to 'JaxprTracer' at 0x152df15f3890>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df17015b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06e43e10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df190fce0; to 'JaxprTracer' at 0x152df190ee90>, <weakref at 0x152df190ec00; to 'JaxprTracer' at 0x152df190e120>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df17015b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e06e43690>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df190ce50; to 'JaxprTracer' at 0x152df190e850>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df17015b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 81: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c0830>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df707b9c0; to 'JaxprTracer' at 0x152df707b3e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1adfc30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c1aa0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df70787c0; to 'JaxprTracer' at 0x152df70799a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1702530>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471e670>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df20e3b50; to 'JaxprTracer' at 0x152df20e2e40>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df29458f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471c240>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df20e2700; to 'JaxprTracer' at 0x152df20e3390>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1498830>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02ded4f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e0167cf90; to 'JaxprTracer' at 0x152e0167d4a0>, <weakref at 0x152e0167e200; to 'JaxprTracer' at 0x152e0167c820>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df27df4f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e02deec10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e0167dc10; to 'JaxprTracer' at 0x152e0167e670>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df27df4f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471ca40>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df78ddfd0; to 'JaxprTracer' at 0x152df78dd2c0>, <weakref at 0x152df78de520; to 'JaxprTracer' at 0x152df78de210>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df27df4f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471f460>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df78dc720; to 'JaxprTracer' at 0x152df78dffc0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df27df4f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 82: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471ffa0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df79de8e0; to 'JaxprTracer' at 0x152df79dd090>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df14b6430>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471cc50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df24fa610; to 'JaxprTracer' at 0x152df24fa260>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df15ca6f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c0a40>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df1a451c0; to 'JaxprTracer' at 0x152df1a445f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df16bbd30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c28e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df45dbbf0; to 'JaxprTracer' at 0x152df45db5c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df13623f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471e020>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df1365bc0; to 'JaxprTracer' at 0x152df1365a40>, <weakref at 0x152df1365b70; to 'JaxprTracer' at 0x152df13659f0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1911a30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471cc60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df1365620; to 'JaxprTracer' at 0x152df1365810>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1911a30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c0e90>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df545d9e0; to 'JaxprTracer' at 0x152df545d2c0>, <weakref at 0x152df545d350; to 'JaxprTracer' at 0x152df545db80>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1911a30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c0e50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df545fab0; to 'JaxprTracer' at 0x152df545fe30>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1911a30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 83: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c1200>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152dffae5620; to 'JaxprTracer' at 0x152dffae5b30>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1665f30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c37d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df190d6c0; to 'JaxprTracer' at 0x152df190cb90>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df16e08f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471c0e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152e06151df0; to 'JaxprTracer' at 0x152e06153980>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1383070>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471f4c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152dffbb8540; to 'JaxprTracer' at 0x152dffbb85a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1297b30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471f810>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df128d670; to 'JaxprTracer' at 0x152df128d590>, <weakref at 0x152df128d620; to 'JaxprTracer' at 0x152df128d4f0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1423e30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471f3d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df128d5d0; to 'JaxprTracer' at 0x152df128d130>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1423e30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471d0e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df5568630; to 'JaxprTracer' at 0x152df55689b0>, <weakref at 0x152df556b3d0; to 'JaxprTracer' at 0x152df556b020>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1423e30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471fa10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df556b380; to 'JaxprTracer' at 0x152df5569310>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1423e30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 84: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471ce10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e062e36f0; to 'JaxprTracer' at 0x152e062e1860>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df141e870>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471dd50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df2697240; to 'JaxprTracer' at 0x152df2694410>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df147d030>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c2580>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df1a44ea0; to 'JaxprTracer' at 0x152df1a47430>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2281d70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c1d10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df1a44ef0; to 'JaxprTracer' at 0x152df1a470c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df230ecf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471c2d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df2300310; to 'JaxprTracer' at 0x152df2300230>, <weakref at 0x152df23004a0; to 'JaxprTracer' at 0x152df2300370>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df140c370>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471d730>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df2300450; to 'JaxprTracer' at 0x152df2303c50>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df140c370>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e7745f7d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df4969b70; to 'JaxprTracer' at 0x152df496bca0>, <weakref at 0x152df4968040; to 'JaxprTracer' at 0x152df4968aa0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df140c370>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e7745e880>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df4968090; to 'JaxprTracer' at 0x152df496b700>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df140c370>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 85: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e7745d1a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df1b69ad0; to 'JaxprTracer' at 0x152df1b6bf20>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df12eb4f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e7745e100>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df1b69d00; to 'JaxprTracer' at 0x152df1b6bac0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df229a5f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c3a70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df4737330; to 'JaxprTracer' at 0x152df4737200>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2335170>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c1920>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df4735df0; to 'JaxprTracer' at 0x152df47354f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df11bcfb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e7745e5f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df114b560; to 'JaxprTracer' at 0x152df114b390>, <weakref at 0x152df114b4c0; to 'JaxprTracer' at 0x152df114b5c0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df227fa30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e7745cea0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df114b1f0; to 'JaxprTracer' at 0x152df114b1b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df227fa30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471de10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df114b060; to 'JaxprTracer' at 0x152df1149630>, <weakref at 0x152df114a6b0; to 'JaxprTracer' at 0x152df114b610>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df227fa30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471dab0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df114a430; to 'JaxprTracer' at 0x152df1149900>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df227fa30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 86: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471f240>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df521c860; to 'JaxprTracer' at 0x152df521ceb0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df14d45b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471ea20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df521ca90; to 'JaxprTracer' at 0x152df521e080>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df124c5f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c1920>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152e0007b330; to 'JaxprTracer' at 0x152e0007b700>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df22aaef0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c3c10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152e0708c360; to 'JaxprTracer' at 0x152e0708c4b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df0e5b3f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e7745edf0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df0e4d990; to 'JaxprTracer' at 0x152df0e4d8b0>, <weakref at 0x152df0e4db20; to 'JaxprTracer' at 0x152df0e4d9f0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df22f79f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e7745fd70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df0e4dad0; to 'JaxprTracer' at 0x152df0e4d630>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df22f79f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471ff60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df0de3e20; to 'JaxprTracer' at 0x152df0de1f40>, <weakref at 0x152df0de34c0; to 'JaxprTracer' at 0x152df0de37a0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df22f79f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471e650>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df0de37e0; to 'JaxprTracer' at 0x152df0de21c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df22f79f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 87: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471ecf0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df496b240; to 'JaxprTracer' at 0x152df4969ae0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1420530>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471c6f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df4bb7d30; to 'JaxprTracer' at 0x152df4bb55e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df22da8b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c1240>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df4734040; to 'JaxprTracer' at 0x152df47344b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df0de9530>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c2f70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152e01bd9800; to 'JaxprTracer' at 0x152e01bd9400>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df0ca8d30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e7745e5f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df10ae250; to 'JaxprTracer' at 0x152df10ae170>, <weakref at 0x152df10ae200; to 'JaxprTracer' at 0x152df10ae2b0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df227e670>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e7745eab0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df10ae390; to 'JaxprTracer' at 0x152df10adef0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df227e670>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e7745ea90>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df10ac7c0; to 'JaxprTracer' at 0x152e06f90550>, <weakref at 0x152df10aeed0; to 'JaxprTracer' at 0x152e06f90a00>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df227e670>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e7745d890>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df10aed40; to 'JaxprTracer' at 0x152e06f915e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df227e670>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 88: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c3660>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df17ef880; to 'JaxprTracer' at 0x152df17efe30>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df0d851b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c3420>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df17ecc20; to 'JaxprTracer' at 0x152df17effc0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df22fdab0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471cc00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df3258900; to 'JaxprTracer' at 0x152df3259b30>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df10106b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471d530>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df3259fd0; to 'JaxprTracer' at 0x152df325ab20>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df0cc7cf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e7745d510>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e0154c4f0; to 'JaxprTracer' at 0x152e0154c8c0>, <weakref at 0x152e0154f8d0; to 'JaxprTracer' at 0x152e0154c7d0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df10474b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e7745ea50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e0154c040; to 'JaxprTracer' at 0x152e0154c320>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df10474b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e7745fff0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e0160a110; to 'JaxprTracer' at 0x152e0160ad00>, <weakref at 0x152e0160a480; to 'JaxprTracer' at 0x152e0160bed0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df10474b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e7745ebc0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e01609580; to 'JaxprTracer' at 0x152e0160bf70>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df10474b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 89: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e7745dd20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df4bb6ac0; to 'JaxprTracer' at 0x152df4bb60d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df3326030>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e7745ffe0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df0e4eca0; to 'JaxprTracer' at 0x152df0e4f390>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df0d9fe30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830f520>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df24fa2f0; to 'JaxprTracer' at 0x152df24f9860>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df0fdc030>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830fe00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df24f8860; to 'JaxprTracer' at 0x152df24fb4d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df0efe770>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e7745fb90>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df77e7650; to 'JaxprTracer' at 0x152df77e55e0>, <weakref at 0x152df77e4b30; to 'JaxprTracer' at 0x152df77e4550>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df106a8f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e7745deb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df77e5fd0; to 'JaxprTracer' at 0x152df77e7c00>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df106a8f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471e3b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df0f11c60; to 'JaxprTracer' at 0x152df0f13e80>, <weakref at 0x152df0f13650; to 'JaxprTracer' at 0x152df0f105a0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df106a8f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471d4a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df0f11f30; to 'JaxprTracer' at 0x152df0f136b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df106a8f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 90: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471de80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df5809760; to 'JaxprTracer' at 0x152df580b9d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1f9d9b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471d8f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df4c51a30; to 'JaxprTracer' at 0x152df4c522b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df0d31f70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830d640>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152dffc3af70; to 'JaxprTracer' at 0x152dffc381e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df1062670>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830e5b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df460ea20; to 'JaxprTracer' at 0x152df460ec10>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df08bc430>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e7745f870>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df45d89f0; to 'JaxprTracer' at 0x152df45dbca0>, <weakref at 0x152df45d9260; to 'JaxprTracer' at 0x152df45da710>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df11461f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e7745d1d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df45d9a80; to 'JaxprTracer' at 0x152df45d99f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df11461f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e7745dd20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df45d8630; to 'JaxprTracer' at 0x152df45d9a90>, <weakref at 0x152df45dae80; to 'JaxprTracer' at 0x152df45d8960>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df11461f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e7745ee30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df45d8400; to 'JaxprTracer' at 0x152df45d8500>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df11461f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 91: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e7745ffb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df71d96c0; to 'JaxprTracer' at 0x152df71d85f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df0928430>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e7745eb00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152dffb81e40; to 'JaxprTracer' at 0x152dffb80370>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df104b470>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830da50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df7435120; to 'JaxprTracer' at 0x152df7436080>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df0f46670>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830e150>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df74355d0; to 'JaxprTracer' at 0x152df7434140>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df079b130>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e7745f540>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df095afc0; to 'JaxprTracer' at 0x152df095adf0>, <weakref at 0x152df095af20; to 'JaxprTracer' at 0x152df095b020>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df0be98f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e7745ed90>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df095af70; to 'JaxprTracer' at 0x152df095ac60>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df0be98f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e7745d800>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e0afbaf20; to 'JaxprTracer' at 0x152e0afb92c0>, <weakref at 0x152e0afbb7e0; to 'JaxprTracer' at 0x152e0afbb4d0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df0be98f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e7745d900>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e0afb8a40; to 'JaxprTracer' at 0x152e0afbaa30>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df0be98f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 92: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c0640>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df0f84810; to 'JaxprTracer' at 0x152df0f872f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df079daf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c1440>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df0f86d40; to 'JaxprTracer' at 0x152df0f86760>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df0bc04f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830def0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152dff9d81d0; to 'JaxprTracer' at 0x152dff9db570>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df0967030>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830d130>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152dff9c90d0; to 'JaxprTracer' at 0x152dff9ca4e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df06991f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471ed80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df2200e00; to 'JaxprTracer' at 0x152df22027b0>, <weakref at 0x152df2201a30; to 'JaxprTracer' at 0x152df2200550>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df09a2070>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471f5e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df2202a20; to 'JaxprTracer' at 0x152df2200dc0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df09a2070>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471e4a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e063607c0; to 'JaxprTracer' at 0x152e063634d0>, <weakref at 0x152e06362d90; to 'JaxprTracer' at 0x152e06363890>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df09a2070>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471c840>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e06362fc0; to 'JaxprTracer' at 0x152e063633e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df09a2070>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 93: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471ed80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df377f010; to 'JaxprTracer' at 0x152df377d540>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df08caf70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471ecf0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152e016bacf0; to 'JaxprTracer' at 0x152e016b80a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df0be8cb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830fec0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df556b830; to 'JaxprTracer' at 0x152df55694f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df0b49d30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830d740>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df55696c0; to 'JaxprTracer' at 0x152df556a300>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df0757cb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e7745e4e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e07459350; to 'JaxprTracer' at 0x152df05714f0>, <weakref at 0x152e0745ac50; to 'JaxprTracer' at 0x152df0571450>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df0854870>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e7745d600>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df580b380; to 'JaxprTracer' at 0x152df0570ff0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df0854870>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c2080>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df0959300; to 'JaxprTracer' at 0x152df0958500>, <weakref at 0x152df095a110; to 'JaxprTracer' at 0x152df0958140>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df0854870>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c1020>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df095b100; to 'JaxprTracer' at 0x152df095b1b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df0854870>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 94: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c1350>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df10adda0; to 'JaxprTracer' at 0x152df10ae260>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df0ed8170>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c2c80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152e01619b70; to 'JaxprTracer' at 0x152e016199f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df0920d30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830cb30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df5a5b380; to 'JaxprTracer' at 0x152df5a5bb60>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df05c2330>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830cbf0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df5a5b740; to 'JaxprTracer' at 0x152df5a587d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df0465af0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471fcb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df0560360; to 'JaxprTracer' at 0x152df0560230>, <weakref at 0x152df0560310; to 'JaxprTracer' at 0x152df0560140>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df071ef30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471ea60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df0560450; to 'JaxprTracer' at 0x152df05604b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df071ef30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e7745ed70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e03153560; to 'JaxprTracer' at 0x152e03150be0>, <weakref at 0x152e03152520; to 'JaxprTracer' at 0x152e03150f50>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df071ef30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e7745e8a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e031535b0; to 'JaxprTracer' at 0x152e03152ee0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df071ef30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 95: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471d000>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df31f0720; to 'JaxprTracer' at 0x152df31f0910>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df2eb3bb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471f100>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df794c860; to 'JaxprTracer' at 0x152df794ee40>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df06f2e70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830e760>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152dff9f2bb0; to 'JaxprTracer' at 0x152dff9f2e90>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df070fd30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830ca80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152dffc3b420; to 'JaxprTracer' at 0x152dffc385f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df03311b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471cc70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df4f6d5d0; to 'JaxprTracer' at 0x152df4f6caa0>, <weakref at 0x152df4f6ccc0; to 'JaxprTracer' at 0x152df4f6db80>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df0bbb030>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471e340>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df4f6e660; to 'JaxprTracer' at 0x152df4f6e9e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df0bbb030>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830dc30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df4f6e700; to 'JaxprTracer' at 0x152df4f6dc70>, <weakref at 0x152df4f6f010; to 'JaxprTracer' at 0x152df4f6c870>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df0bbb030>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830e750>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df4f6f600; to 'JaxprTracer' at 0x152df4f6c140>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df0bbb030>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 96: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830fb70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df77f7d80; to 'JaxprTracer' at 0x152df77f4af0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df07525b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830fdf0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df77f6c50; to 'JaxprTracer' at 0x152df77f48c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df09690f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c2860>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df13667f0; to 'JaxprTracer' at 0x152df1364690>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df04e56b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c3440>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df1366d40; to 'JaxprTracer' at 0x152df1365630>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df038b330>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830f290>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df36d8090; to 'JaxprTracer' at 0x152df36d9130>, <weakref at 0x152df36db600; to 'JaxprTracer' at 0x152df36d9680>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df054bd30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830de30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df36d80e0; to 'JaxprTracer' at 0x152df36da260>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df054bd30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471fbe0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e017faed0; to 'JaxprTracer' at 0x152e017fb5c0>, <weakref at 0x152e017f9f80; to 'JaxprTracer' at 0x152e017f90e0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df054bd30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471cc00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e017fae30; to 'JaxprTracer' at 0x152e017f8050>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df054bd30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 97: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471f270>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df262eca0; to 'JaxprTracer' at 0x152df262c140>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df04f2e70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471fea0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df262fe70; to 'JaxprTracer' at 0x152df262caa0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df0bd0d30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830efd0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df16eb880; to 'JaxprTracer' at 0x152df16ea2b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df04c3830>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830dec0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df16e8b30; to 'JaxprTracer' at 0x152df16e94a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df00e16b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471f610>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df790e110; to 'JaxprTracer' at 0x152df790f610>, <weakref at 0x152df790d7b0; to 'JaxprTracer' at 0x152df790fcf0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df01cc430>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471d630>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df790cd10; to 'JaxprTracer' at 0x152df790cdc0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df01cc430>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830d080>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df790f3d0; to 'JaxprTracer' at 0x152df790dd10>, <weakref at 0x152df790f600; to 'JaxprTracer' at 0x152df790c820>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df01cc430>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830f250>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df790f880; to 'JaxprTracer' at 0x152df741eb20>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df01cc430>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 98: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830da60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df780eb60; to 'JaxprTracer' at 0x152df780db80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df05beb30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830fb40>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df2fdbd30; to 'JaxprTracer' at 0x152df2fdad50>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df043fe30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76e4a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152dff9d98a0; to 'JaxprTracer' at 0x152dff9d89b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df014c0b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76e5c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152e06120400; to 'JaxprTracer' at 0x152e06122530>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df00d3eb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830c2c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df6092cf0; to 'JaxprTracer' at 0x152df60925d0>, <weakref at 0x152df6090630; to 'JaxprTracer' at 0x152df6091220>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df04a8f70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830ea00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df60936a0; to 'JaxprTracer' at 0x152df60903c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df04a8f70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471c2d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df5944900; to 'JaxprTracer' at 0x152df59445f0>, <weakref at 0x152df5947c90; to 'JaxprTracer' at 0x152df59475c0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df04a8f70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471d8f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df59460c0; to 'JaxprTracer' at 0x152df59454f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df04a8f70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 99: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471f560>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df4d9ef70; to 'JaxprTracer' at 0x152df4d9ce60>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df04498b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471dd80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df5944720; to 'JaxprTracer' at 0x152df5947e80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df0bc4a70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76e1d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df521d350; to 'JaxprTracer' at 0x152df521c190>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df00bd1b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76eee0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df521c090; to 'JaxprTracer' at 0x152df521db80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152defed27f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c39b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152defec5df0; to 'JaxprTracer' at 0x152defec5d10>, <weakref at 0x152defec5da0; to 'JaxprTracer' at 0x152defec5c70>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deff755f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c2e60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152defec5d50; to 'JaxprTracer' at 0x152defec58b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deff755f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c1aa0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152defec75b0; to 'JaxprTracer' at 0x152defec46e0>, <weakref at 0x152defec6c50; to 'JaxprTracer' at 0x152defec49b0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deff755f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c08d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152defec4ea0; to 'JaxprTracer' at 0x152defec52c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deff755f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 100: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471d040>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df13d9170; to 'JaxprTracer' at 0x152df13dbcf0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df03aa5f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c1db0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df13db830; to 'JaxprTracer' at 0x152df13db110>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df00a3af0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76f030>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152deff5c810; to 'JaxprTracer' at 0x152deff5c7d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152defff9330>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76eea0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152deff5ea70; to 'JaxprTracer' at 0x152deff5de50>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152defdf04f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830cc90>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dff9ba5c0; to 'JaxprTracer' at 0x152dff9b8be0>, <weakref at 0x152dff9ba930; to 'JaxprTracer' at 0x152dff9bada0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152defea0330>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830e440>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dff9bae80; to 'JaxprTracer' at 0x152dff9ba530>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152defea0330>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76fce0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df5a59d50; to 'JaxprTracer' at 0x152df5a5ba20>, <weakref at 0x152df5a5b420; to 'JaxprTracer' at 0x152df5a58320>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152defea0330>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76ff00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df5a59c10; to 'JaxprTracer' at 0x152df5a59180>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152defea0330>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 101: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76ee20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df2c75da0; to 'JaxprTracer' at 0x152df2c75720>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deffccb30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76ebf0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df37e8b80; to 'JaxprTracer' at 0x152df37ea300>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152defee4db0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471d4b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152defec5df0; to 'JaxprTracer' at 0x152defec4500>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152defed1770>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830fa20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df6174b30; to 'JaxprTracer' at 0x152df6177890>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df073a470>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76f0f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df5b01a30; to 'JaxprTracer' at 0x152df5b019a0>, <weakref at 0x152df5b01760; to 'JaxprTracer' at 0x152df5b02d00>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df07ff9b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76fcd0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df5b01080; to 'JaxprTracer' at 0x152df5b01d60>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df07ff9b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76e170>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df6cba8e0; to 'JaxprTracer' at 0x152df6cb9e50>, <weakref at 0x152df6cbbec0; to 'JaxprTracer' at 0x152df6cb9b80>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df07ff9b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76f610>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df6cbbbf0; to 'JaxprTracer' at 0x152df6cba9e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df07ff9b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 102: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76f6d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df70fe7f0; to 'JaxprTracer' at 0x152df70fcf50>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deff0ddf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76fe50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df75c31a0; to 'JaxprTracer' at 0x152df75c32a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152defd885f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830cfb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df2696890; to 'JaxprTracer' at 0x152df2694c80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152defc1a470>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830c280>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df031e390; to 'JaxprTracer' at 0x152df031c550>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152defcbe970>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76ef50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152defb53650; to 'JaxprTracer' at 0x152defb53570>, <weakref at 0x152defb536a0; to 'JaxprTracer' at 0x152defb53700>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152defb825b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76f7a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152defb53880; to 'JaxprTracer' at 0x152defb53340>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152defb825b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76f820>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152defb52cf0; to 'JaxprTracer' at 0x152defb538e0>, <weakref at 0x152defb52ca0; to 'JaxprTracer' at 0x152defb53b10>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152defb825b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76fdf0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152defb53fb0; to 'JaxprTracer' at 0x152defb53e30>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152defb825b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 103: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76f090>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152dff9b8310; to 'JaxprTracer' at 0x152dff9b91d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152defdea730>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76f0d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df31f3bf0; to 'JaxprTracer' at 0x152df31f3660>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deff6d670>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0471ca80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df30e20c0; to 'JaxprTracer' at 0x152df30e2800>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152defadc9f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830e740>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152dffadac50; to 'JaxprTracer' at 0x152dffad89b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def95c930>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830d850>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152def9551c0; to 'JaxprTracer' at 0x152def9550e0>, <weakref at 0x152def955170; to 'JaxprTracer' at 0x152def955220>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152defc3fab0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830fb70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152def955300; to 'JaxprTracer' at 0x152def954e60>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152defc3fab0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830de60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df41c19e0; to 'JaxprTracer' at 0x152df41c1c20>, <weakref at 0x152df41c3d30; to 'JaxprTracer' at 0x152df41c3160>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152defc3fab0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830ebb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df41c3100; to 'JaxprTracer' at 0x152df75f7930>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152defc3fab0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 104: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830ef40>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e000aa8e0; to 'JaxprTracer' at 0x152e000a9450>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152defd59b70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830ec80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152e0154f290; to 'JaxprTracer' at 0x152e0154d860>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152defdb5470>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76f1f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df69be020; to 'JaxprTracer' at 0x152df69bf070>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def7b2c30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc381a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df31f2f20; to 'JaxprTracer' at 0x152df31f2760>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def846430>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c2650>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df4bb7510; to 'JaxprTracer' at 0x152df4bb70c0>, <weakref at 0x152df4bb59e0; to 'JaxprTracer' at 0x152df4bb7980>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df091a530>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c1ab0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df4bb4220; to 'JaxprTracer' at 0x152df4bb4d70>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df091a530>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76e5c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152defcb7f10; to 'JaxprTracer' at 0x152defcb7660>, <weakref at 0x152defcb6fc0; to 'JaxprTracer' at 0x152defcb5810>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df091a530>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76fa60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152defcb63e0; to 'JaxprTracer' at 0x152defcb5130>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df091a530>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 105: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76fe70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e076cd3a0; to 'JaxprTracer' at 0x152e076cf930>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df05561f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76f820>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152e08292610; to 'JaxprTracer' at 0x152e08290410>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152defe337b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc38620>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df13dba10; to 'JaxprTracer' at 0x152df13d8410>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def8342f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc383b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df13da570; to 'JaxprTracer' at 0x152df13dab20>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df0ae0eb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c2f50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df0a6b8d0; to 'JaxprTracer' at 0x152df0a6b980>, <weakref at 0x152df0a6bab0; to 'JaxprTracer' at 0x152df0a6b890>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def8a8e70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff9c1ff0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df0a6b4c0; to 'JaxprTracer' at 0x152df0a6b520>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def8a8e70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830cc00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df7362bb0; to 'JaxprTracer' at 0x152df73614f0>, <weakref at 0x152df7363b00; to 'JaxprTracer' at 0x152df7361220>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def8a8e70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830eed0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df7362ac0; to 'JaxprTracer' at 0x152df7363a70>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def8a8e70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 106: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830cdc0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e047cc7c0; to 'JaxprTracer' at 0x152e047cf070>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def8e61b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830c130>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df6e244f0; to 'JaxprTracer' at 0x152df6e26ee0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def8f9130>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc38ce0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152dffb80450; to 'JaxprTracer' at 0x152dffb80320>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def95d6b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc39060>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152e0493e4d0; to 'JaxprTracer' at 0x152e0493d770>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def50f730>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830dde0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dffd190d0; to 'JaxprTracer' at 0x152dffd18280>, <weakref at 0x152dffd1a430; to 'JaxprTracer' at 0x152dffd1b520>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df0aaf730>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830c520>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dffd1ab10; to 'JaxprTracer' at 0x152dffd1a6c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df0aaf730>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76f7d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df786a890; to 'JaxprTracer' at 0x152df7869c20>, <weakref at 0x152df7869d50; to 'JaxprTracer' at 0x152df7868c80>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df0aaf730>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76e9f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df786b830; to 'JaxprTracer' at 0x152df786a300>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df0aaf730>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 107: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76f590>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df62832e0; to 'JaxprTracer' at 0x152df6282f80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def82bef0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76e6d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df6281a30; to 'JaxprTracer' at 0x152df6283bb0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df0a86170>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc391a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df5352ed0; to 'JaxprTracer' at 0x152df5352260>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df0a72a30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc38950>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df5350400; to 'JaxprTracer' at 0x152df53502d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def3f1270>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830c720>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152def3e2430; to 'JaxprTracer' at 0x152def3e2350>, <weakref at 0x152def3e25c0; to 'JaxprTracer' at 0x152def3e2490>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def8326f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830fc60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152def3e20c0; to 'JaxprTracer' at 0x152def3e2080>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def8326f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830efd0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df717f240; to 'JaxprTracer' at 0x152e0d161400>, <weakref at 0x152df717fab0; to 'JaxprTracer' at 0x152df717e710>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def8326f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830dbb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df717fce0; to 'JaxprTracer' at 0x152dffa8c140>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def8326f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 108: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830ca50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152deff5c220; to 'JaxprTracer' at 0x152deff5c4b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def93fc70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830c5a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df13db600; to 'JaxprTracer' at 0x152df13db520>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152defdb22b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc39a50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152e05c1b830; to 'JaxprTracer' at 0x152e015f8910>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152defd652b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc39c80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df2ae66b0; to 'JaxprTracer' at 0x152df2ae5b30>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def4a5430>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76f8a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df6b10680; to 'JaxprTracer' at 0x152df6b12620>, <weakref at 0x152df6b109a0; to 'JaxprTracer' at 0x152df6b137f0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152defda44b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76ec30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df6b12ed0; to 'JaxprTracer' at 0x152df6b100a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152defda44b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76ecc0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df6b11f30; to 'JaxprTracer' at 0x152df6b116d0>, <weakref at 0x152df6b11d50; to 'JaxprTracer' at 0x152df6b126c0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152defda44b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76f5f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df6b13f60; to 'JaxprTracer' at 0x152df6b114a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152defda44b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 109: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76fed0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df30ebdd0; to 'JaxprTracer' at 0x152df30e9360>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152defb38ef0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76f250>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152e0824a750; to 'JaxprTracer' at 0x152e08249720>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def5e7b30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc39fb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152dfff89490; to 'JaxprTracer' at 0x152dfff8a300>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def645870>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc39ba0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df55ecd10; to 'JaxprTracer' at 0x152df55ee3a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def3322f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830ff00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152def99d440; to 'JaxprTracer' at 0x152def99d360>, <weakref at 0x152def99d3f0; to 'JaxprTracer' at 0x152def99d4a0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def40c8f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830fc50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152def99d0d0; to 'JaxprTracer' at 0x152def99d090>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def40c8f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830cb40>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df325bfb0; to 'JaxprTracer' at 0x152df325ab20>, <weakref at 0x152df3259800; to 'JaxprTracer' at 0x152df3259130>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def40c8f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830ebf0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df32584a0; to 'JaxprTracer' at 0x152df325bed0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def40c8f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 110: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830d990>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df37ebd30; to 'JaxprTracer' at 0x152df37e92c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df0a79670>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830eb20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df37eb740; to 'JaxprTracer' at 0x152df37e8dc0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def69e6b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc39c80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152e0b8c5ad0; to 'JaxprTracer' at 0x152e0b8c50e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def70d030>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc38720>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152e04693920; to 'JaxprTracer' at 0x152e046907d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152defa1cfb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830da90>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152def0686d0; to 'JaxprTracer' at 0x152def0685f0>, <weakref at 0x152def068860; to 'JaxprTracer' at 0x152def068730>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def636f70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830d530>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152def068360; to 'JaxprTracer' at 0x152def068320>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def636f70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830d380>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df2ae72e0; to 'JaxprTracer' at 0x152df2ae5ef0>, <weakref at 0x152df2ae6ed0; to 'JaxprTracer' at 0x152df2ae7160>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def636f70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830ef10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df2ae6e80; to 'JaxprTracer' at 0x152df2ae6530>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def636f70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 111: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830dbb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df1f52fc0; to 'JaxprTracer' at 0x152df1f52b70>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def5798b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830d960>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df1f53970; to 'JaxprTracer' at 0x152df1f530c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def2dc9b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc39f60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152deff5f970; to 'JaxprTracer' at 0x152deff5c5a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def375f70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc38330>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152deff5f830; to 'JaxprTracer' at 0x152deff5fc50>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deef578b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830d840>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152deef4abb0; to 'JaxprTracer' at 0x152deef4aad0>, <weakref at 0x152deef4ab60; to 'JaxprTracer' at 0x152deef4ac10>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def2f07b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830db50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152deef4a840; to 'JaxprTracer' at 0x152deef4a800>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def2f07b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76e180>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e04834860; to 'JaxprTracer' at 0x152e04834eb0>, <weakref at 0x152e04835fd0; to 'JaxprTracer' at 0x152e048346e0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def2f07b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76fd50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e04834d60; to 'JaxprTracer' at 0x152e04834050>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def2f07b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 112: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76e620>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152defb51030; to 'JaxprTracer' at 0x152defb53f20>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def307a30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76e3d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152defb50590; to 'JaxprTracer' at 0x152defb51130>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def37a830>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc39c80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152def069620; to 'JaxprTracer' at 0x152def06a5d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def998bf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc39a30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df2ae6110; to 'JaxprTracer' at 0x152df2ae78e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def015e30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830db60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df75f6ed0; to 'JaxprTracer' at 0x152df75f6030>, <weakref at 0x152df75f7790; to 'JaxprTracer' at 0x152df75f4280>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df32a49b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830d5e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df75f6a20; to 'JaxprTracer' at 0x152df75f4d20>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df32a49b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830dc80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df2196520; to 'JaxprTracer' at 0x152df2195ae0>, <weakref at 0x152df21962a0; to 'JaxprTracer' at 0x152df21943c0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df32a49b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830e680>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df21950d0; to 'JaxprTracer' at 0x152df2194c80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df32a49b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 113: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830e560>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e017fab60; to 'JaxprTracer' at 0x152e017f8460>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def00c230>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830ec60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152e09253420; to 'JaxprTracer' at 0x152e09252120>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def2f3e70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc39ec0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df3259760; to 'JaxprTracer' at 0x152df3259d60>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deef9afb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3b880>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df325a0c0; to 'JaxprTracer' at 0x152df3258050>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deee1fbf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830e390>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e04b962f0; to 'JaxprTracer' at 0x152e04b97bb0>, <weakref at 0x152e04b94b30; to 'JaxprTracer' at 0x152e04b979d0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def6e4770>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830f200>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e04b96700; to 'JaxprTracer' at 0x152e0703c370>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def6e4770>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76fe20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dffb48a90; to 'JaxprTracer' at 0x152dffb48370>, <weakref at 0x152dffb4abb0; to 'JaxprTracer' at 0x152dffb4ba20>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def6e4770>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76ffc0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dffb49c60; to 'JaxprTracer' at 0x152dffb4a850>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def6e4770>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 114: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76e600>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152def110130; to 'JaxprTracer' at 0x152def111540>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def146bb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76fae0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152def111030; to 'JaxprTracer' at 0x152def110ff0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def11db30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc399f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df30ea070; to 'JaxprTracer' at 0x152df30ebd90>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deeccdef0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3bd10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152e09250ef0; to 'JaxprTracer' at 0x152e092519a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deec0e3f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76f5f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df77c1030; to 'JaxprTracer' at 0x152df77c1770>, <weakref at 0x152df77c0860; to 'JaxprTracer' at 0x152df77c0be0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deeebe5b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76ed90>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df77c3e20; to 'JaxprTracer' at 0x152df77c35c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deeebe5b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76f590>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dffbe44a0; to 'JaxprTracer' at 0x152dffbe5450>, <weakref at 0x152dffbe4c20; to 'JaxprTracer' at 0x152dffbe7700>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deeebe5b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76ec20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dffbe7f10; to 'JaxprTracer' at 0x152dffbe63a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deeebe5b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 115: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76ea20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e047ce390; to 'JaxprTracer' at 0x152e047cf070>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deed45ef0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76f7a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df7640270; to 'JaxprTracer' at 0x152df7643110>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deed7cc30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3b880>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df3d24810; to 'JaxprTracer' at 0x152df3d26d50>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def43e930>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3bec0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152dffd1ac00; to 'JaxprTracer' at 0x152dffd1a4e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deeaaa870>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76e520>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dff9c9ee0; to 'JaxprTracer' at 0x152dff9cb430>, <weakref at 0x152dff9c9e90; to 'JaxprTracer' at 0x152dff9c90e0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deff74370>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76ee10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dff9c8090; to 'JaxprTracer' at 0x152dff9cb840>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deff74370>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76e730>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e03001a80; to 'JaxprTracer' at 0x152e03002080>, <weakref at 0x152e03001da0; to 'JaxprTracer' at 0x152e03003890>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deff74370>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76ec60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e030004f0; to 'JaxprTracer' at 0x152e03001f90>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deff74370>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 116: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830ef50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152deee31620; to 'JaxprTracer' at 0x152deee30ff0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deec795f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830fe50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df7987830; to 'JaxprTracer' at 0x152df7987d90>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deea9a7b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3bac0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152dffb8d990; to 'JaxprTracer' at 0x152dffb8ecb0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deee1bd30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3b6f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df4bb5da0; to 'JaxprTracer' at 0x152df4bb63a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee9e6f30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830d1f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152deea25080; to 'JaxprTracer' at 0x152deea24eb0>, <weakref at 0x152deea24fe0; to 'JaxprTracer' at 0x152deea250e0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deea98e70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830eb70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152deea25030; to 'JaxprTracer' at 0x152deea24d20>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deea98e70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76f110>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df77a9440; to 'JaxprTracer' at 0x152df77ab070>, <weakref at 0x152df77a9080; to 'JaxprTracer' at 0x152df77abde0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deea98e70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76ffd0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df77a8f40; to 'JaxprTracer' at 0x152dee9d05a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deea98e70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 117: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830ee50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e04836340; to 'JaxprTracer' at 0x152e04bace60>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df0a356f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76eed0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152e09250d60; to 'JaxprTracer' at 0x152e09250960>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deec45e70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc38490>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152e000604f0; to 'JaxprTracer' at 0x152e00063f20>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deea22ff0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc387a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152dfff89f30; to 'JaxprTracer' at 0x152dfff8acb0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee837b30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830ce60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dee83bc90; to 'JaxprTracer' at 0x152dee83bac0>, <weakref at 0x152dee83bbf0; to 'JaxprTracer' at 0x152dee83bcf0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deea5d330>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830c6a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dee83bc40; to 'JaxprTracer' at 0x152dee83b930>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deea5d330>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830d850>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152deff5f920; to 'JaxprTracer' at 0x152deff5ea80>, <weakref at 0x152deff5fe70; to 'JaxprTracer' at 0x152deff5c140>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deea5d330>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830c130>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152deff5c090; to 'JaxprTracer' at 0x152deff5dfe0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deea5d330>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 118: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76f4f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df521f790; to 'JaxprTracer' at 0x152df521d630>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee99de30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830eba0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df6ec3a10; to 'JaxprTracer' at 0x152df6ec2fd0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee81c1f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3b6c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df30e1300; to 'JaxprTracer' at 0x152df30e3ca0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee9b5cb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea743a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152dffb8f560; to 'JaxprTracer' at 0x152dffb8d720>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def232070>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76f240>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152def22a700; to 'JaxprTracer' at 0x152def22a580>, <weakref at 0x152e031cf9c0; to 'JaxprTracer' at 0x152def22a800>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee8f5f70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76e5b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152def22a2f0; to 'JaxprTracer' at 0x152def22a2b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee8f5f70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830c6a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152def1ba750; to 'JaxprTracer' at 0x152def1bba70>, <weakref at 0x152def1b9ee0; to 'JaxprTracer' at 0x152def1bb3e0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee8f5f70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830f0d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152def1bbbf0; to 'JaxprTracer' at 0x152def1bb110>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee8f5f70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 119: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76edb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df055b740; to 'JaxprTracer' at 0x152df0559860>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deeaf27f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830cf80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152deef49990; to 'JaxprTracer' at 0x152deef4ba70>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deeacfb30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea743c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152def99cc20; to 'JaxprTracer' at 0x152def99fc00>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def1d0870>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea745d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152def99e110; to 'JaxprTracer' at 0x152def99e1c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee6a3f70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc38400>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dee69dfd0; to 'JaxprTracer' at 0x152dee69def0>, <weakref at 0x152dee69e160; to 'JaxprTracer' at 0x152dee69e030>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deee9b330>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3b5e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dee69e110; to 'JaxprTracer' at 0x152dee69dc70>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deee9b330>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830ff30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152def111c10; to 'JaxprTracer' at 0x152def1107d0>, <weakref at 0x152def1127f0; to 'JaxprTracer' at 0x152def113340>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deee9b330>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830ee60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152def112700; to 'JaxprTracer' at 0x152def110320>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deee9b330>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 120: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830c520>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df6ec18f0; to 'JaxprTracer' at 0x152df6ec1220>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def17d5b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76e4a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152deec03100; to 'JaxprTracer' at 0x152deec000f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee84d170>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea74730>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df409ea20; to 'JaxprTracer' at 0x152df409c410>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def2720f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea74c30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df569b290; to 'JaxprTracer' at 0x152df5699680>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee7ed2f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830f180>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e015e23e0; to 'JaxprTracer' at 0x152e015e2440>, <weakref at 0x152e015e1080; to 'JaxprTracer' at 0x152e015e3610>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee654070>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830c8c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e015e2610; to 'JaxprTracer' at 0x152e015e3520>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee654070>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830ecd0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dffd1a5c0; to 'JaxprTracer' at 0x152dffd1a0d0>, <weakref at 0x152dffd1ab60; to 'JaxprTracer' at 0x152dffd18230>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee654070>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830e4f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dffd19cb0; to 'JaxprTracer' at 0x152dffd19ef0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee654070>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 121: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830dbd0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df095a0c0; to 'JaxprTracer' at 0x152df0958a50>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deea5e0b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76e810>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152dffb8d440; to 'JaxprTracer' at 0x152dffb8f110>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee9ca7f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea75050>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152e0614ec00; to 'JaxprTracer' at 0x152e0614d090>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee79f930>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea75560>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df5dc5e90; to 'JaxprTracer' at 0x152df5dc6120>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee2e30b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc39110>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dee354d10; to 'JaxprTracer' at 0x152dee354c30>, <weakref at 0x152dee354ea0; to 'JaxprTracer' at 0x152dee354d70>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee6793b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc39ab0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dee3549a0; to 'JaxprTracer' at 0x152dee354960>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee6793b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830fdd0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152deff5c590; to 'JaxprTracer' at 0x152deff5c820>, <weakref at 0x152deff5e8e0; to 'JaxprTracer' at 0x152deff5d9f0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee6793b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830c980>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152deff5ffb0; to 'JaxprTracer' at 0x152deff5f430>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee6793b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 122: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830d380>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df720c270; to 'JaxprTracer' at 0x152df720d450>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee2d8870>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76f230>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df521f9c0; to 'JaxprTracer' at 0x152df521dc20>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee845d70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea744a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df190f1a0; to 'JaxprTracer' at 0x152df190e580>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee33f870>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea74f70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df190c5e0; to 'JaxprTracer' at 0x152df190d9a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee19dcb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc38690>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dee54e840; to 'JaxprTracer' at 0x152dee54e710>, <weakref at 0x152dee54ea70; to 'JaxprTracer' at 0x152dee54e8f0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def1dcd30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc39170>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dee54ebb0; to 'JaxprTracer' at 0x152dee54e990>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def1dcd30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dff76e270>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dee57cea0; to 'JaxprTracer' at 0x152dee57cd20>, <weakref at 0x152dee57fb00; to 'JaxprTracer' at 0x152dee57cf50>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def1dcd30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830c6a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dee57df30; to 'JaxprTracer' at 0x152dee57e210>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def1dcd30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 123: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc389e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152def1b8680; to 'JaxprTracer' at 0x152def1bb520>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deec2a530>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3aff0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152e002297b0; to 'JaxprTracer' at 0x152e002283c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee523330>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea75b70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df6bfbec0; to 'JaxprTracer' at 0x152df6bfadf0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee6df630>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea74a70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152e0493cc70; to 'JaxprTracer' at 0x152e0493c1e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee1bf430>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3a9c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df77ab1a0; to 'JaxprTracer' at 0x152df77a8d20>, <weakref at 0x152df77ab650; to 'JaxprTracer' at 0x152df77aa260>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deebd31f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3ac10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df77aac50; to 'JaxprTracer' at 0x152df77a88c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deebd31f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830c7e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dee2251c0; to 'JaxprTracer' at 0x152dee226300>, <weakref at 0x152dee224e50; to 'JaxprTracer' at 0x152dee225a90>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deebd31f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152e0830c5a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dee2244f0; to 'JaxprTracer' at 0x152e031aead0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deebd31f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 124: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3bf70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df7522b10; to 'JaxprTracer' at 0x152df7522b70>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee220d70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc387a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df30e95d0; to 'JaxprTracer' at 0x152df30ebb60>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def259b30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea761e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df789dee0; to 'JaxprTracer' at 0x152df789fa20>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee1f66f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea754e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df055aca0; to 'JaxprTracer' at 0x152df055a800>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dedf492f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc387b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df20798f0; to 'JaxprTracer' at 0x152df2078af0>, <weakref at 0x152df2078630; to 'JaxprTracer' at 0x152df20794a0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee1fcff0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3ada0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df2079620; to 'JaxprTracer' at 0x152df2fd8ff0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee1fcff0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc398c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dee482de0; to 'JaxprTracer' at 0x152dee4823a0>, <weakref at 0x152dee482660; to 'JaxprTracer' at 0x152dee480640>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee1fcff0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3b7a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dee481cb0; to 'JaxprTracer' at 0x152dee480410>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee1fcff0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 125: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3b1e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e03177380; to 'JaxprTracer' at 0x152e03177e80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152defe369b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3a870>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152dffb4bc90; to 'JaxprTracer' at 0x152dffb48c80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee201d70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea75df0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df2ad5990; to 'JaxprTracer' at 0x152df2ad4d70>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee42ef70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea74d20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df67254e0; to 'JaxprTracer' at 0x152df67260d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deddbe1f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc391e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df36dac00; to 'JaxprTracer' at 0x152df36d8d70>, <weakref at 0x152df36d9350; to 'JaxprTracer' at 0x152df36d9900>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df00074f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3ae80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df36d9b70; to 'JaxprTracer' at 0x152df36d94f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df00074f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3b530>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df36d91c0; to 'JaxprTracer' at 0x152df36d94a0>, <weakref at 0x152df36d9e40; to 'JaxprTracer' at 0x152df36dba70>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df00074f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3bb20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df36da570; to 'JaxprTracer' at 0x152df36da3f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df00074f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 126: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3b350>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df409dbc0; to 'JaxprTracer' at 0x152df409edf0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee71b970>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3b000>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df6175c60; to 'JaxprTracer' at 0x152df6174e60>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee45b930>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea76d10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152dfff7bab0; to 'JaxprTracer' at 0x152dfff780a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dedfca330>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea75f70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df7891f80; to 'JaxprTracer' at 0x152df7891270>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dedca84b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3ad80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e0154e110; to 'JaxprTracer' at 0x152e0154db80>, <weakref at 0x152e0154d350; to 'JaxprTracer' at 0x152e0154ceb0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deddcd8f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3a250>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e0154cb30; to 'JaxprTracer' at 0x152e0154c280>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deddcd8f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc39da0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dee480db0; to 'JaxprTracer' at 0x152dee481090>, <weakref at 0x152dee4818a0; to 'JaxprTracer' at 0x152dee482990>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deddcd8f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3a6f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dee481120; to 'JaxprTracer' at 0x152dee480280>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deddcd8f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 127: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc395e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df1367d30; to 'JaxprTracer' at 0x152df1364780>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee1d18b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc39f80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df6fbbc40; to 'JaxprTracer' at 0x152df6fbaf30>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee3f73b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea77360>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152deea24db0; to 'JaxprTracer' at 0x152deea26670>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee44feb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea74e00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152deea26520; to 'JaxprTracer' at 0x152deea26a80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dedb95bf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc392f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dedd5bab0; to 'JaxprTracer' at 0x152dedd5bb60>, <weakref at 0x152dedd5bc90; to 'JaxprTracer' at 0x152dedd5ba70>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dede99730>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3bda0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dedd5bc40; to 'JaxprTracer' at 0x152dedd5b6b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dede99730>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3b2f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df3d9aed0; to 'JaxprTracer' at 0x152df3d98730>, <weakref at 0x152df3d9b420; to 'JaxprTracer' at 0x152df3d98b40>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dede99730>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3b280>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df3d98130; to 'JaxprTracer' at 0x152df3d99090>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dede99730>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 128: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3bbb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df2c74720; to 'JaxprTracer' at 0x152df2c745f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dede96770>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3b230>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df0de2390; to 'JaxprTracer' at 0x152df0de00f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee1fc670>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea769e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df77f7920; to 'JaxprTracer' at 0x152df77f7480>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dedbc0db0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea771f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df78921b0; to 'JaxprTracer' at 0x152df7893110>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dedc4bb30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3a890>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152deda724d0; to 'JaxprTracer' at 0x152deda723f0>, <weakref at 0x152deda72480; to 'JaxprTracer' at 0x152deda72530>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dedee96b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc38d80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152deda72610; to 'JaxprTracer' at 0x152deda72170>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dedee96b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3bf30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e015f9bc0; to 'JaxprTracer' at 0x152e015fbd40>, <weakref at 0x152e015f8fe0; to 'JaxprTracer' at 0x152e015f8f00>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dedee96b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3a950>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e015fb600; to 'JaxprTracer' at 0x152df6fbb610>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dedee96b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 129: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3b790>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e03137290; to 'JaxprTracer' at 0x152e03137ed0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dedf3d730>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc39930>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df4f6db70; to 'JaxprTracer' at 0x152df4f6d310>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee7d50f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea769f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152deea248b0; to 'JaxprTracer' at 0x152deea26a30>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dedd87e30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea77ad0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152deea240e0; to 'JaxprTracer' at 0x152deea24820>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded965cb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3ac70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df4a24e50; to 'JaxprTracer' at 0x152df4a27ac0>, <weakref at 0x152df4a27290; to 'JaxprTracer' at 0x152df4a24b90>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dedb15b30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3a8d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df4a259e0; to 'JaxprTracer' at 0x152df4a27930>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dedb15b30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc39610>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df4a27bf0; to 'JaxprTracer' at 0x152df16e8550>, <weakref at 0x152df4a269d0; to 'JaxprTracer' at 0x152df4a272f0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dedb15b30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3b2c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df4a25c60; to 'JaxprTracer' at 0x152df16ebca0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dedb15b30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 130: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc39110>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df780fc40; to 'JaxprTracer' at 0x152df780d810>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee3fa0f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc392d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df5947100; to 'JaxprTracer' at 0x152df5944af0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee3179f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea74fb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df77f7ce0; to 'JaxprTracer' at 0x152df77f6940>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deda6d830>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea778c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df6fb8c70; to 'JaxprTracer' at 0x152df6fba2b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded913930>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc39370>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df69bc680; to 'JaxprTracer' at 0x152df69bce60>, <weakref at 0x152df69bc0e0; to 'JaxprTracer' at 0x152df69be800>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dedb2b6b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc38120>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df69bf600; to 'JaxprTracer' at 0x152df69bc3c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dedb2b6b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3af60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df298db20; to 'JaxprTracer' at 0x152df298f1b0>, <weakref at 0x152df298d850; to 'JaxprTracer' at 0x152df298d5e0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dedb2b6b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3bee0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df298e930; to 'JaxprTracer' at 0x152df298e080>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dedb2b6b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 131: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3b950>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152dee3540e0; to 'JaxprTracer' at 0x152dee3579d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dedeaa7b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3b000>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152dee355940; to 'JaxprTracer' at 0x152dee355f90>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded9598f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea75ea0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df2697c40; to 'JaxprTracer' at 0x152df2697a20>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded92acf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea76850>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df2696840; to 'JaxprTracer' at 0x152df26940a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded8915f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc38ed0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152ded708310; to 'JaxprTracer' at 0x152ded708230>, <weakref at 0x152ded7082c0; to 'JaxprTracer' at 0x152ded708190>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dedc54d70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc38d80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152ded708270; to 'JaxprTracer' at 0x152ded897ed0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dedc54d70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc387a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152ded896070; to 'JaxprTracer' at 0x152ded895090>, <weakref at 0x152ded896b10; to 'JaxprTracer' at 0x152ded8972a0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dedc54d70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3aed0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152ded897c90; to 'JaxprTracer' at 0x152ded895900>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dedc54d70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 132: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3aa10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152dee54ccc0; to 'JaxprTracer' at 0x152dee54dd60>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dedf5c530>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc382e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152dee54d440; to 'JaxprTracer' at 0x152dee54f2f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded7fd930>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea74f80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152deef4bbf0; to 'JaxprTracer' at 0x152deef4b890>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded9c3470>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea764d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152deef49ad0; to 'JaxprTracer' at 0x152deef4be30>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded5ceb30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea75f80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152ded6e7d30; to 'JaxprTracer' at 0x152ded6e7bb0>, <weakref at 0x152ded6e7ce0; to 'JaxprTracer' at 0x152ded6e7b60>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded72e4f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea77300>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152ded6e7c40; to 'JaxprTracer' at 0x152ded6e77a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded72e4f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea76070>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e047ce020; to 'JaxprTracer' at 0x152df71ba760>, <weakref at 0x152e047cdf30; to 'JaxprTracer' at 0x152df71b8370>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded72e4f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea77ae0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e047cce50; to 'JaxprTracer' at 0x152df71b9040>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded72e4f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 133: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea779d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df16e9da0; to 'JaxprTracer' at 0x152df16ea490>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded83ccf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea74270>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152deea258a0; to 'JaxprTracer' at 0x152deea25680>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded6c4a70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc39160>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df4a24b30; to 'JaxprTracer' at 0x152df4a27610>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded77f630>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3b770>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df4a24360; to 'JaxprTracer' at 0x152df4a26580>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded4bd070>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea77630>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152ded4b1850; to 'JaxprTracer' at 0x152ded4b1770>, <weakref at 0x152ded4b1800; to 'JaxprTracer' at 0x152ded4b18b0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded781db0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea745b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152ded4b14e0; to 'JaxprTracer' at 0x152ded4b14a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded781db0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3b930>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df05609a0; to 'JaxprTracer' at 0x152df0561180>, <weakref at 0x152df0563c90; to 'JaxprTracer' at 0x152df0560a00>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded781db0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3b280>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df0560e00; to 'JaxprTracer' at 0x152ded5bb980>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded781db0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 134: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc391e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152dedb8e480; to 'JaxprTracer' at 0x152dedb8e7b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded989070>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3bfa0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152e0614f5b0; to 'JaxprTracer' at 0x152e0614ecb0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded8552b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea77c40>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152deea258f0; to 'JaxprTracer' at 0x152deea25770>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded84c8f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea74e40>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152e030008b0; to 'JaxprTracer' at 0x152e03001180>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded3ae230>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3b0b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df6f2ecf0; to 'JaxprTracer' at 0x152df6f2e6c0>, <weakref at 0x152df6f2fce0; to 'JaxprTracer' at 0x152df6f2c7d0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded7e36f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3be20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df6f2ef70; to 'JaxprTracer' at 0x152df6f2f890>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded7e36f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3a3d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e03158db0; to 'JaxprTracer' at 0x152e0315be80>, <weakref at 0x152e0315bdd0; to 'JaxprTracer' at 0x152e03159450>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded7e36f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc387a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e03158d10; to 'JaxprTracer' at 0x152e0315ba20>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded7e36f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 135: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc39c20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df15f3420; to 'JaxprTracer' at 0x152df15f2490>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded86b7f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc38e60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df15f1e90; to 'JaxprTracer' at 0x152df15f0910>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded6f2af0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c80c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df6283420; to 'JaxprTracer' at 0x152df62800f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded3ee2f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c8650>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df6175440; to 'JaxprTracer' at 0x152df6175860>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded2ac270>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc39c70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152ded2a09f0; to 'JaxprTracer' at 0x152ded2a0910>, <weakref at 0x152ded2a09a0; to 'JaxprTracer' at 0x152ded2a0a50>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df12da2f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3aaa0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152ded2a0680; to 'JaxprTracer' at 0x152ded2a0640>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df12da2f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3b7f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152ded2349f0; to 'JaxprTracer' at 0x152ded234960>, <weakref at 0x152ded2368e0; to 'JaxprTracer' at 0x152ded236f80>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df12da2f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3be80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152ded2378d0; to 'JaxprTracer' at 0x152ded235ae0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df12da2f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 136: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc39750>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df6ec0450; to 'JaxprTracer' at 0x152df6ec2c60>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded716db0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3bad0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152e01770b80; to 'JaxprTracer' at 0x152e01772d50>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded811df0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c8df0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df1148220; to 'JaxprTracer' at 0x152df1149c70>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded849370>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c8fe0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df71bbec0; to 'JaxprTracer' at 0x152df71b84b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded1b9b70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea77570>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152ded1b47c0; to 'JaxprTracer' at 0x152ded1b46e0>, <weakref at 0x152ded1b4770; to 'JaxprTracer' at 0x152ded1b4820>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded2ac9b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea763b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152ded1b4900; to 'JaxprTracer' at 0x152ded1b4460>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded2ac9b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc39f80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df1a44130; to 'JaxprTracer' at 0x152df1a45fe0>, <weakref at 0x152df1a459e0; to 'JaxprTracer' at 0x152df1a44c80>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded2ac9b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc390e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df1a462f0; to 'JaxprTracer' at 0x152e04596b70>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded2ac9b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 137: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3b2f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df1b72930; to 'JaxprTracer' at 0x152df1b73b10>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded23d070>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3a5f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df1b70810; to 'JaxprTracer' at 0x152df1b71a40>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded59def0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c86f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152dee54ebb0; to 'JaxprTracer' at 0x152dee54de00>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded178270>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c8810>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152dee54f9c0; to 'JaxprTracer' at 0x152dee54d3b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded050670>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3baf0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df45df0b0; to 'JaxprTracer' at 0x152df45dd360>, <weakref at 0x152df45de930; to 'JaxprTracer' at 0x152df45dc6e0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded27f470>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc39240>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df45dd260; to 'JaxprTracer' at 0x152df45de7b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded27f470>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc39360>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df36d9850; to 'JaxprTracer' at 0x152df36d98b0>, <weakref at 0x152df36d8540; to 'JaxprTracer' at 0x152df36da490>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded27f470>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc38400>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df36d8c20; to 'JaxprTracer' at 0x152df36d8460>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded27f470>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 138: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc39b80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df4de4a40; to 'JaxprTracer' at 0x152df4de7fc0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded4df870>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3a0e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152e0614d1c0; to 'JaxprTracer' at 0x152e0614df90>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded251e70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c8a80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df5354ae0; to 'JaxprTracer' at 0x152df5357cf0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded4fa2b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c9840>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152e01618c70; to 'JaxprTracer' at 0x152e01619540>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee03d7f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3a5f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dee0b2430; to 'JaxprTracer' at 0x152dee0b2350>, <weakref at 0x152dee0b23e0; to 'JaxprTracer' at 0x152dee0b22b0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded0ab270>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3a9e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dee0b1ee0; to 'JaxprTracer' at 0x152dee0b2080>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded0ab270>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc38430>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dfff9dee0; to 'JaxprTracer' at 0x152dfff9c2d0>, <weakref at 0x152dfff9cc70; to 'JaxprTracer' at 0x152dfff9cb40>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded0ab270>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3a870>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dfff9e430; to 'JaxprTracer' at 0x152dfff9f430>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded0ab270>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 139: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc38400>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df114b6a0; to 'JaxprTracer' at 0x152df114aee0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deda34e30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea74cb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df13d9260; to 'JaxprTracer' at 0x152df13d9590>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded0a8ef0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c96e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df0561fd0; to 'JaxprTracer' at 0x152df05617c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee067a70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c9ca0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df0561b20; to 'JaxprTracer' at 0x152df0560820>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deccab5f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc38660>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152decd1e9d0; to 'JaxprTracer' at 0x152decd1e8f0>, <weakref at 0x152decd1e980; to 'JaxprTracer' at 0x152decd1e850>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dede1c1f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc38580>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152decd1e480; to 'JaxprTracer' at 0x152decd1e620>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dede1c1f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc399b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e04bac360; to 'JaxprTracer' at 0x152e04bad220>, <weakref at 0x152e04baf1f0; to 'JaxprTracer' at 0x152e04bac0f0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dede1c1f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3a7d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e04bae6b0; to 'JaxprTracer' at 0x152e04baf660>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dede1c1f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 140: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea75170>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e092519e0; to 'JaxprTracer' at 0x152e09252850>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded1fbc30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea76830>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152deda71440; to 'JaxprTracer' at 0x152deda73d40>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded84ce30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6ca500>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152defcb7510; to 'JaxprTracer' at 0x152defcb74d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee04fa70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c9030>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152defcb5490; to 'JaxprTracer' at 0x152defcb47d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152decd60370>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc382e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152deed1bc90; to 'JaxprTracer' at 0x152deed1b430>, <weakref at 0x152deed18bd0; to 'JaxprTracer' at 0x152deed1a7b0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee0c6170>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3ab00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152deed185e0; to 'JaxprTracer' at 0x152deed182d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee0c6170>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc39ba0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152deed1a200; to 'JaxprTracer' at 0x152deed1b3e0>, <weakref at 0x152deed1a750; to 'JaxprTracer' at 0x152deed1bd90>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee0c6170>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152defc3ac30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152deed1bfb0; to 'JaxprTracer' at 0x152deed1b5c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee0c6170>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 141: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea76650>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152ded5c9260; to 'JaxprTracer' at 0x152ded5c80f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded02e8f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea76b10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df1e6e480; to 'JaxprTracer' at 0x152df1e6d090>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dee0790b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c9ba0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df2737e70; to 'JaxprTracer' at 0x152df2736030>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152decdc1a70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c8d70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152e01608f90; to 'JaxprTracer' at 0x152e0160a800>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deca72cf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea76680>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152decae1800; to 'JaxprTracer' at 0x152decae15e0>, <weakref at 0x152decae1710; to 'JaxprTracer' at 0x152decae17c0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152decda7770>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea76f60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dffbe61b0; to 'JaxprTracer' at 0x152decae1360>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152decda7770>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea772b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e0c4366b0; to 'JaxprTracer' at 0x152e0c4359f0>, <weakref at 0x152e0c434e00; to 'JaxprTracer' at 0x152e0c434dc0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152decda7770>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea77d80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e0c4344a0; to 'JaxprTracer' at 0x152e0c437430>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152decda7770>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 142: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea75c10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df2736f70; to 'JaxprTracer' at 0x152df2735810>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152df108bfb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea75080>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df5c17740; to 'JaxprTracer' at 0x152df5c15f40>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deca0d330>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c8d30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152ded14e6b0; to 'JaxprTracer' at 0x152ded14e850>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152decab99f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c8960>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152ded14f290; to 'JaxprTracer' at 0x152ded14ef80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec8cc6f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea77f30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152decf9d1c0; to 'JaxprTracer' at 0x152decf9d0e0>, <weakref at 0x152decf9d350; to 'JaxprTracer' at 0x152decf9d220>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded96bbb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea76280>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152decf9ce50; to 'JaxprTracer' at 0x152decf9ce10>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded96bbb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea75f20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df4c51e40; to 'JaxprTracer' at 0x152df4c50190>, <weakref at 0x152df4c518f0; to 'JaxprTracer' at 0x152df4c51360>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded96bbb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea74860>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df4c527a0; to 'JaxprTracer' at 0x152df4c52080>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded96bbb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 143: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea77db0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df785da30; to 'JaxprTracer' at 0x152df785d5e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded1829f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea758f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df63d8950; to 'JaxprTracer' at 0x152df63d9fe0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152decdd91f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6caf00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152e04baf470; to 'JaxprTracer' at 0x152e04baeb20>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152decab1570>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6cb020>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df78017b0; to 'JaxprTracer' at 0x152df78037a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec7ae1f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea74190>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dec7a5120; to 'JaxprTracer' at 0x152dec7a5040>, <weakref at 0x152dec7a50d0; to 'JaxprTracer' at 0x152dec7a5180>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec9169f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea76d60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dec7a4db0; to 'JaxprTracer' at 0x152dec7a4d70>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec9169f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea75110>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e01571850; to 'JaxprTracer' at 0x152e01571fe0>, <weakref at 0x152e01573380; to 'JaxprTracer' at 0x152e01571b80>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec9169f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea76880>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e015722f0; to 'JaxprTracer' at 0x152e01573ac0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec9169f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 144: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea76ee0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df6500d10; to 'JaxprTracer' at 0x152df6500820>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152ded0c65f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea747b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df0f117b0; to 'JaxprTracer' at 0x152df0f13110>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deca62f30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6cb4e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df75213f0; to 'JaxprTracer' at 0x152df7520820>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec9a89b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6ca810>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df4c50180; to 'JaxprTracer' at 0x152df4c53f20>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec84ba70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea74cc0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dec863ec0; to 'JaxprTracer' at 0x152dec863d90>, <weakref at 0x152dec863e70; to 'JaxprTracer' at 0x152dec863ca0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec9783b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea75220>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dec863f10; to 'JaxprTracer' at 0x152dec863fc0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec9783b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea771e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e031c17b0; to 'JaxprTracer' at 0x152e031c3d90>, <weakref at 0x152e031c3100; to 'JaxprTracer' at 0x152e031c2bc0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec9783b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea76a50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e031c2a70; to 'JaxprTracer' at 0x152e031c0500>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec9783b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 145: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea76ee0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152decf30810; to 'JaxprTracer' at 0x152decf33340>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dedc0b570>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea74920>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152decf33dd0; to 'JaxprTracer' at 0x152decf30dc0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec82cb30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c8d70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152dee483b00; to 'JaxprTracer' at 0x152dee4835c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec832030>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6caba0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152e015cd300; to 'JaxprTracer' at 0x152e015cca00>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec561fb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea75f90>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152deed1a020; to 'JaxprTracer' at 0x152deed1a120>, <weakref at 0x152deed19300; to 'JaxprTracer' at 0x152deed19e50>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152decdb2fb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea75000>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152deed19620; to 'JaxprTracer' at 0x152deed18500>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152decdb2fb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea75bd0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152deed1a070; to 'JaxprTracer' at 0x152deed18f00>, <weakref at 0x152deed18b30; to 'JaxprTracer' at 0x152deed19720>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152decdb2fb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea74230>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152deed19260; to 'JaxprTracer' at 0x152deed18190>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152decdb2fb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 146: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea77770>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df704c540; to 'JaxprTracer' at 0x152df704de50>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec914ab0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea77520>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152deec00d60; to 'JaxprTracer' at 0x152deec028a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152decef0eb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c9c40>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df2e0ea20; to 'JaxprTracer' at 0x152df2e0fac0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec747fb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6cbab0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df1f50ef0; to 'JaxprTracer' at 0x152df1f515e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec43bd30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea76540>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dee83a930; to 'JaxprTracer' at 0x152dee83ae40>, <weakref at 0x152dee8398f0; to 'JaxprTracer' at 0x152dee83ae90>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec9823f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea75530>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dee838fe0; to 'JaxprTracer' at 0x152dee83aa30>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec9823f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea74450>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152deee329d0; to 'JaxprTracer' at 0x152deee32d00>, <weakref at 0x152deee32ac0; to 'JaxprTracer' at 0x152deee332f0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec9823f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea77770>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152deee312b0; to 'JaxprTracer' at 0x152deee33840>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec9823f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 147: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea75bd0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df6fb9da0; to 'JaxprTracer' at 0x152df6fb9360>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152decef5970>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea75910>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df3b65f30; to 'JaxprTracer' at 0x152df3b66530>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec6821b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c9540>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df707bb00; to 'JaxprTracer' at 0x152df7079e00>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec6d48b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6cbad0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152defcb5d00; to 'JaxprTracer' at 0x152defcb55e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec321470>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea767f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dec315030; to 'JaxprTracer' at 0x152dec314f50>, <weakref at 0x152dec3151c0; to 'JaxprTracer' at 0x152dec315090>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec5911b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea77b30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dec315170; to 'JaxprTracer' at 0x152dec314cd0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec5911b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea75850>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e017cfec0; to 'JaxprTracer' at 0x152e017ce300>, <weakref at 0x152e017ccfe0; to 'JaxprTracer' at 0x152e017cc960>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec5911b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea77920>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e017cd940; to 'JaxprTracer' at 0x152deed193b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec5911b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 148: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea77230>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df5c16840; to 'JaxprTracer' at 0x152df5c15e00>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152def268cb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea74cb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152e015ce7f0; to 'JaxprTracer' at 0x152e015cf890>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec5d0c30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6caa00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df5351df0; to 'JaxprTracer' at 0x152df5353b60>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec6afaf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6cac10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df128f830; to 'JaxprTracer' at 0x152df128de00>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec1fb870>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea75530>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dec1f6f70; to 'JaxprTracer' at 0x152dec1f6e90>, <weakref at 0x152dec1f7100; to 'JaxprTracer' at 0x152dec1f6fd0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec61fbb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea776c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dec1f6c00; to 'JaxprTracer' at 0x152dec1f6bc0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec61fbb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea77db0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dec1f6430; to 'JaxprTracer' at 0x152dec1f4be0>, <weakref at 0x152dec1f5c60; to 'JaxprTracer' at 0x152dec1f6b70>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec61fbb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea75850>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dec1f6070; to 'JaxprTracer' at 0x152dec1f4870>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec61fbb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 149: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea767f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152ded70bfb0; to 'JaxprTracer' at 0x152ded708910>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec200730>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea77350>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df1b687c0; to 'JaxprTracer' at 0x152df1b6b610>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152decf3bf70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6ca810>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df6d22d90; to 'JaxprTracer' at 0x152df6d22080>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec5161f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6ca490>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152dee551620; to 'JaxprTracer' at 0x152dee551810>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec0fd0b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea744e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e0010d990; to 'JaxprTracer' at 0x152e0010fcf0>, <weakref at 0x152e0010f1a0; to 'JaxprTracer' at 0x152e0010e5d0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec1d8730>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea76ba0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e0010db20; to 'JaxprTracer' at 0x152e0010f750>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec1d8730>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea75a70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e0010c310; to 'JaxprTracer' at 0x152df5944320>, <weakref at 0x152e0010f970; to 'JaxprTracer' at 0x152df5945770>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec1d8730>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea76c80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e0010d300; to 'JaxprTracer' at 0x152df5944690>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec1d8730>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 150: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea74ef0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152dee2e4540; to 'JaxprTracer' at 0x152dee2e6e90>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec0fc5f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea75440>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152dee2e53a0; to 'JaxprTracer' at 0x152dee2e63f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deca2f370>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6cb000>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df4bb49f0; to 'JaxprTracer' at 0x152df4bb53b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec2227b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6caa00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152dffae7010; to 'JaxprTracer' at 0x152dffae7c00>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec0d25b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea742d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dec0d6cf0; to 'JaxprTracer' at 0x152dec0d6c10>, <weakref at 0x152dec0d6e80; to 'JaxprTracer' at 0x152dec0d6e40>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec22ad70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea75b60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dec0d7060; to 'JaxprTracer' at 0x152dec0d6a80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec22ad70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea75a40>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df77e5120; to 'JaxprTracer' at 0x152df77e7520>, <weakref at 0x152df77e7970; to 'JaxprTracer' at 0x152df77e50e0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec22ad70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea77410>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df77e63e0; to 'JaxprTracer' at 0x152df77e5bd0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec22ad70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 151: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea74040>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df720e660; to 'JaxprTracer' at 0x152df720dd10>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec6811f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea77f10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df720c9a0; to 'JaxprTracer' at 0x152df720fcf0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec3e4270>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36c450>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df794f470; to 'JaxprTracer' at 0x152df794e990>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec012ff0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36c1b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df0570900; to 'JaxprTracer' at 0x152df05734d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152debec82f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea774e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df2195350; to 'JaxprTracer' at 0x152debeba4e0>, <weakref at 0x152df2194c20; to 'JaxprTracer' at 0x152df2196e40>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec592930>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea77180>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df2194fe0; to 'JaxprTracer' at 0x152debeba120>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec592930>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea74460>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e0010d3f0; to 'JaxprTracer' at 0x152e0010fa20>, <weakref at 0x152e0010fbf0; to 'JaxprTracer' at 0x152e0010ead0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec592930>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea76c30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dfff9ce50; to 'JaxprTracer' at 0x152e0010f610>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec592930>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 152: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea75f60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152defb40630; to 'JaxprTracer' at 0x152defb400a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec4f76f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea764d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152defb43600; to 'JaxprTracer' at 0x152defb413b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec3a68f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36cda0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df6ec0270; to 'JaxprTracer' at 0x152df6ec0460>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152debe572b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36c5c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x153ec493e7f0; to 'JaxprTracer' at 0x152e0c362300>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152debd2e0b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6cb790>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152defa21a30; to 'JaxprTracer' at 0x152defa22da0>, <weakref at 0x152defa23bf0; to 'JaxprTracer' at 0x152defa22260>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec16bd70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6ca2f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152defa232e0; to 'JaxprTracer' at 0x152defa219f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec16bd70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea74480>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152defa22980; to 'JaxprTracer' at 0x152defa21860>, <weakref at 0x152defa22b60; to 'JaxprTracer' at 0x152defa21540>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec16bd70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea77fe0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152defa20130; to 'JaxprTracer' at 0x152defa238e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec16bd70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 153: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea770c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df4f6f510; to 'JaxprTracer' at 0x152df4f6c0a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec1d9db0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea75a70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df47361b0; to 'JaxprTracer' at 0x152df4737750>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152decef4db0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36c610>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df527a0c0; to 'JaxprTracer' at 0x152df5279900>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152debdb8870>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36d370>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df5278d60; to 'JaxprTracer' at 0x152df527bb60>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152debcdff70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c98c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152debc8f510; to 'JaxprTracer' at 0x152debc8f430>, <weakref at 0x152debc8f4c0; to 'JaxprTracer' at 0x152debc8f390>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152debdb5230>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c8710>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152debc8f470; to 'JaxprTracer' at 0x152debc8efd0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152debdb5230>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea776a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df7868810; to 'JaxprTracer' at 0x152df786aa80>, <weakref at 0x152df786b240; to 'JaxprTracer' at 0x152df786bd40>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152debdb5230>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea74730>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df786bba0; to 'JaxprTracer' at 0x152df7868c80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152debdb5230>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 154: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea75910>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df031d490; to 'JaxprTracer' at 0x152df031d040>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec229e30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea75180>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df3d26f70; to 'JaxprTracer' at 0x152df3d25f90>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec1859f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36cc80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df262d080; to 'JaxprTracer' at 0x152df262fc50>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dec5a72b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36cc40>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df262e570; to 'JaxprTracer' at 0x152df262ce60>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152debad1cf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c8f80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e0d1747c0; to 'JaxprTracer' at 0x152e0d176f80>, <weakref at 0x152e0d177420; to 'JaxprTracer' at 0x152e0d175b30>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152debd5f1f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6cbea0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e0d1775b0; to 'JaxprTracer' at 0x152df30eb390>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152debd5f1f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea76680>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df7987ce0; to 'JaxprTracer' at 0x152df79859f0>, <weakref at 0x152df7985800; to 'JaxprTracer' at 0x152df79869e0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152debd5f1f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea74750>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df7984180; to 'JaxprTracer' at 0x152df7986800>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152debd5f1f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 155: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea74630>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152def503ab0; to 'JaxprTracer' at 0x152def503200>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152debc92d70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6cbb00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152def6cab10; to 'JaxprTracer' at 0x152def6c92c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152debde95b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36d8c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152dee4823e0; to 'JaxprTracer' at 0x152dee4837f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152debc9aef0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36dce0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152dee483a60; to 'JaxprTracer' at 0x152dee481950>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deba5e870>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea74190>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152deba54680; to 'JaxprTracer' at 0x152deba545a0>, <weakref at 0x152deba54810; to 'JaxprTracer' at 0x152deba546e0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152debaf5270>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea764a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152deba547c0; to 'JaxprTracer' at 0x152deba54320>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152debaf5270>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea77080>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152deb9e8c70; to 'JaxprTracer' at 0x152deb9e9ea0>, <weakref at 0x152deb9e9670; to 'JaxprTracer' at 0x152deb9e8dc0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152debaf5270>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea753e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152deb9ebb50; to 'JaxprTracer' at 0x152deb9e9720>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152debaf5270>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 156: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c9de0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152ded7084f0; to 'JaxprTracer' at 0x152ded70a5d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deba527f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c8290>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152e04e12ed0; to 'JaxprTracer' at 0x152e04e13c00>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152debca8e30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36e140>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df0f10540; to 'JaxprTracer' at 0x152df0f12c10>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152debc44430>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36d030>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df0f11760; to 'JaxprTracer' at 0x152df0f10870>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb94cdf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x153ec495a460>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152deb8d3060; to 'JaxprTracer' at 0x152deb8d3110>, <weakref at 0x152deb8d3240; to 'JaxprTracer' at 0x152deb8d3020>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deba1d170>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea75180>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152deb8d31f0; to 'JaxprTracer' at 0x152deb8d2c60>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deba1d170>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea757d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152def9551c0; to 'JaxprTracer' at 0x152dffb08690>, <weakref at 0x152def956700; to 'JaxprTracer' at 0x152def957520>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deba1d170>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea767b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152def956750; to 'JaxprTracer' at 0x152df4c51810>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deba1d170>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 157: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6cbd10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df77a9cb0; to 'JaxprTracer' at 0x152df77aaa80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152debade3b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c9ae0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df76ddc10; to 'JaxprTracer' at 0x152df76dd220>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152debb175b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36c460>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152debebb790; to 'JaxprTracer' at 0x152debebaf80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb9fc5f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36c930>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df6281b70; to 'JaxprTracer' at 0x152df6283f70>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb70a8b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6ca3e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152deb704310; to 'JaxprTracer' at 0x152deb704230>, <weakref at 0x152deb7042c0; to 'JaxprTracer' at 0x152deb704190>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152debcab370>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6ca050>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152deb704270; to 'JaxprTracer' at 0x152df0ad5270>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152debcab370>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea74a60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df0f85ad0; to 'JaxprTracer' at 0x152df0f859a0>, <weakref at 0x152df0f87920; to 'JaxprTracer' at 0x152df0f85590>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152debcab370>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deea758f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df0f873d0; to 'JaxprTracer' at 0x152df0f87660>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152debcab370>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 158: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6cb350>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df0ba8310; to 'JaxprTracer' at 0x152df0babca0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb9fc970>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6cacd0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df521e160; to 'JaxprTracer' at 0x152df521dd60>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb903db0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36ee00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152def012480; to 'JaxprTracer' at 0x152def010fa0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb72e430>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36ed30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152def010310; to 'JaxprTracer' at 0x152def011fe0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152decc0c870>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c9420>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df551cef0; to 'JaxprTracer' at 0x152df551f7f0>, <weakref at 0x152df551fce0; to 'JaxprTracer' at 0x152df551f480>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152debc1d770>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6cb9f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x153ec4863790; to 'JaxprTracer' at 0x153ec48637f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152debc1d770>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6cb560>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df551d7b0; to 'JaxprTracer' at 0x152df551d9a0>, <weakref at 0x152df551e610; to 'JaxprTracer' at 0x152df551f250>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152debc1d770>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6cafd0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df551e8e0; to 'JaxprTracer' at 0x152df551e260>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152debc1d770>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 159: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c8e70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152dfff89990; to 'JaxprTracer' at 0x152dfff898b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deba606b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6cbc30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152dfff88950; to 'JaxprTracer' at 0x152dfff89f90>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb8fa770>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36dba0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152deb9ebb00; to 'JaxprTracer' at 0x152deb9eb070>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb6ac630>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36d340>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df5c9cea0; to 'JaxprTracer' at 0x152df5c9dcc0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb4d64f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6cadb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152deb4749a0; to 'JaxprTracer' at 0x152deb474870>, <weakref at 0x152deb474900; to 'JaxprTracer' at 0x152deb474a00>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152decbd07b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6cab60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152deb474a40; to 'JaxprTracer' at 0x152deb474af0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152decbd07b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6cb290>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152deb4690d0; to 'JaxprTracer' at 0x152deb46a9e0>, <weakref at 0x152deb469800; to 'JaxprTracer' at 0x152deb46b7f0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152decbd07b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6ca6c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152deb469d00; to 'JaxprTracer' at 0x152deb4698b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152decbd07b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 160: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c8b00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df24f89f0; to 'JaxprTracer' at 0x152df24fa4e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152debb0ed30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c9d40>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df031c310; to 'JaxprTracer' at 0x152df031c370>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb4395f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36d3b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152def3e0130; to 'JaxprTracer' at 0x152def3e22b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb51db30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36f0e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152def3e3ec0; to 'JaxprTracer' at 0x152def3e1450>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb5f1030>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6ca0b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152deffca2f0; to 'JaxprTracer' at 0x152deffc9680>, <weakref at 0x152deffc84f0; to 'JaxprTracer' at 0x152deffc9c20>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152decc06bf0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c9510>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152deffcaac0; to 'JaxprTracer' at 0x152deffcb9d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152decc06bf0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c9d40>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df4de5f80; to 'JaxprTracer' at 0x152df4de7b60>, <weakref at 0x152df4de6c50; to 'JaxprTracer' at 0x152df4de50e0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152decc06bf0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6cac10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df4de75b0; to 'JaxprTracer' at 0x152df4de7bb0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152decc06bf0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 161: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6cade0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152def99c4f0; to 'JaxprTracer' at 0x152def99ef80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152debe7f570>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c9a70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df6fb8540; to 'JaxprTracer' at 0x152df6fba120>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb6889f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36ddb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df05600e0; to 'JaxprTracer' at 0x152df0563c00>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb48db70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36f300>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df0561ee0; to 'JaxprTracer' at 0x152df05603c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb277370>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c99a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dffa8e6b0; to 'JaxprTracer' at 0x152dffa8d400>, <weakref at 0x152dffa8c310; to 'JaxprTracer' at 0x152dffa8c230>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb1a6470>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c8440>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dffa8e160; to 'JaxprTracer' at 0x152e0493dae0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb1a6470>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6cb140>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dffa8c220; to 'JaxprTracer' at 0x152dffa8cd20>, <weakref at 0x152dffa8c9f0; to 'JaxprTracer' at 0x152dffa8e030>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb1a6470>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c87d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dffa8c950; to 'JaxprTracer' at 0x152dffa8e580>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb1a6470>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 162: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c9300>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152dec88f8d0; to 'JaxprTracer' at 0x152dec88f570>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb6e56f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6cae20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152dec88ee80; to 'JaxprTracer' at 0x152dec88c0f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb26f1f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36d160>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152dee355080; to 'JaxprTracer' at 0x152dee357250>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb214bf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36c180>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152dee354400; to 'JaxprTracer' at 0x152dee357e80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb8596b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c89c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df07953a0; to 'JaxprTracer' at 0x152df0794e10>, <weakref at 0x152df07957b0; to 'JaxprTracer' at 0x152df07964e0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152debb972f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6cba00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df0795cb0; to 'JaxprTracer' at 0x152df07963a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152debb972f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c9790>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df2ae40e0; to 'JaxprTracer' at 0x152df2ae6850>, <weakref at 0x152df2ae5490; to 'JaxprTracer' at 0x152df2ae67b0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152debb972f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6ca4b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df2ae6e80; to 'JaxprTracer' at 0x152df2ae77f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152debb972f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 163: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6cb670>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df36db380; to 'JaxprTracer' at 0x152df36dad00>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb3f4830>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6cbe30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df36d89a0; to 'JaxprTracer' at 0x152df36db430>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb6f62b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36f520>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152deec01710; to 'JaxprTracer' at 0x152deec03840>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb0ea5f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36de30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df355ac50; to 'JaxprTracer' at 0x152df355b0c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb2ca9b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36e390>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152deb0fdad0; to 'JaxprTracer' at 0x152deb0fdb80>, <weakref at 0x152deb0fdcb0; to 'JaxprTracer' at 0x152deb0fda90>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb08f030>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36f070>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152deb0fdc60; to 'JaxprTracer' at 0x152deb0fd6d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb08f030>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36def0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df672df30; to 'JaxprTracer' at 0x152df672e530>, <weakref at 0x152df672f150; to 'JaxprTracer' at 0x152df672ca00>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb08f030>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36ef90>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df672cea0; to 'JaxprTracer' at 0x152df672c6e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb08f030>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 164: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36e350>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e01782ca0; to 'JaxprTracer' at 0x152e01780e10>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152debf8e030>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36ce80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df527b7e0; to 'JaxprTracer' at 0x152df527bc00>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb57fd30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c9950>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152defb42020; to 'JaxprTracer' at 0x152defb41540>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb7e75f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6ca040>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df1b69670; to 'JaxprTracer' at 0x152df1b6bed0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deae28bf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36f280>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152deb36ff60; to 'JaxprTracer' at 0x152deb36fde0>, <weakref at 0x152deb36ff10; to 'JaxprTracer' at 0x152deb36fd90>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb1d79b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36d820>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152deb36fe70; to 'JaxprTracer' at 0x152deb36f9d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb1d79b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c9540>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df190ef70; to 'JaxprTracer' at 0x152df190cb40>, <weakref at 0x152df190f010; to 'JaxprTracer' at 0x152df190cd20>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb1d79b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c9b20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df190e020; to 'JaxprTracer' at 0x152df0797660>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb1d79b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 165: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c90b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e0c435800; to 'JaxprTracer' at 0x152e0c435cc0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb6f4d70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6cb6b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df61a6fc0; to 'JaxprTracer' at 0x152df61a4820>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb1e5970>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36ead0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x153ec422b010; to 'JaxprTracer' at 0x153ec422b8e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb680b30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36fca0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df672cbd0; to 'JaxprTracer' at 0x152df672ce10>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dead16070>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6ca800>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dead058f0; to 'JaxprTracer' at 0x152dead05810>, <weakref at 0x152dead05a80; to 'JaxprTracer' at 0x152dead05950>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb1428b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c8b10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dead05a30; to 'JaxprTracer' at 0x152dead05590>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb1428b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6cbfa0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df7435530; to 'JaxprTracer' at 0x152df7435a90>, <weakref at 0x152df7436250; to 'JaxprTracer' at 0x152df74363f0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb1428b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6cb160>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df74355d0; to 'JaxprTracer' at 0x152deaed2260>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb1428b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 166: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6cae20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152defcb4bd0; to 'JaxprTracer' at 0x152defcb6210>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb104770>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c8b00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df2194e00; to 'JaxprTracer' at 0x152df21956d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb144830>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a0100>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df114a3e0; to 'JaxprTracer' at 0x152df11489b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deaed5eb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a0440>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df1b71df0; to 'JaxprTracer' at 0x152df1b70eb0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deabff630>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6cb300>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df47368e0; to 'JaxprTracer' at 0x152df4735e50>, <weakref at 0x152df4736ac0; to 'JaxprTracer' at 0x152df4737570>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb822bf0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6ca000>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df4736a70; to 'JaxprTracer' at 0x152df13d85f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb822bf0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c8a00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152decae3790; to 'JaxprTracer' at 0x152decae3bb0>, <weakref at 0x152decae3470; to 'JaxprTracer' at 0x152decae3250>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb822bf0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6cba70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152decae0b30; to 'JaxprTracer' at 0x152decae0140>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb822bf0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 167: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c9940>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df1ca2340; to 'JaxprTracer' at 0x152df1ca3570>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb6f4630>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c9e80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df1ca0c20; to 'JaxprTracer' at 0x152df1ca29e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb13d330>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a0830>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152deba54fe0; to 'JaxprTracer' at 0x152deba542d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deae8daf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a0410>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152dffd19ee0; to 'JaxprTracer' at 0x152dffd1a4e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dead63a70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36fd80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152deabeafc0; to 'JaxprTracer' at 0x152deabeae90>, <weakref at 0x152deabeb1a0; to 'JaxprTracer' at 0x152deabeb070>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dead4f4b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36f6a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152deabeb2e0; to 'JaxprTracer' at 0x152deabeb110>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dead4f4b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c92b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152deaa9dda0; to 'JaxprTracer' at 0x152deaa9c7d0>, <weakref at 0x152deaa9c040; to 'JaxprTracer' at 0x152deaa9f250>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dead4f4b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c9130>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152deaa9e4d0; to 'JaxprTracer' at 0x152deaa9efd0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dead4f4b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 168: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6cb150>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152dee8a0680; to 'JaxprTracer' at 0x152dee8a3e30>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb371670>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c9770>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152dee8a2390; to 'JaxprTracer' at 0x152dee8a1630>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dead62bf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a0370>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152decae0c20; to 'JaxprTracer' at 0x152decae3020>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deac71c70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a0a80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df1ca00e0; to 'JaxprTracer' at 0x152df1ca2620>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deaa939f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6ca020>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152defcb62f0; to 'JaxprTracer' at 0x152defcb58b0>, <weakref at 0x152defcb7830; to 'JaxprTracer' at 0x152defcb6bc0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deac782f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c8540>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152defcb5940; to 'JaxprTracer' at 0x152defcb4780>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deac782f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36c2e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df4de4d60; to 'JaxprTracer' at 0x152df4de5220>, <weakref at 0x152df4de4040; to 'JaxprTracer' at 0x152df4de47d0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deac782f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36c4c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df4de4540; to 'JaxprTracer' at 0x152defcb6490>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deac782f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 169: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36e0a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df76309f0; to 'JaxprTracer' at 0x152df7630820>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dead92730>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36fbc0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df7630450; to 'JaxprTracer' at 0x152df7632170>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deac6b230>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a0ec0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df7571c60; to 'JaxprTracer' at 0x152df7571b30>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea9d5e70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a1560>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df30e11c0; to 'JaxprTracer' at 0x152df30e2ad0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deaa25ab0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6cb620>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df0f13880; to 'JaxprTracer' at 0x152df0f13930>, <weakref at 0x152df0f10590; to 'JaxprTracer' at 0x152df0f12bc0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deaa9b7b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6caa50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df0f13ab0; to 'JaxprTracer' at 0x152df0f12cb0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deaa9b7b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c9070>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df6268360; to 'JaxprTracer' at 0x152df626bd40>, <weakref at 0x152df6268ae0; to 'JaxprTracer' at 0x152df626b0c0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deaa9b7b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c9740>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df626b290; to 'JaxprTracer' at 0x152df6268960>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deaa9b7b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 170: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c90f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152dee2e75b0; to 'JaxprTracer' at 0x152dee2e6ad0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deabbf770>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36ff50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152dee2e4130; to 'JaxprTracer' at 0x152dee2e7070>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deacfeaf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a2190>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df128ede0; to 'JaxprTracer' at 0x152df128ead0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea9f1530>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a19f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df128c2c0; to 'JaxprTracer' at 0x152df128f5c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea743970>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36c430>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e015ccb30; to 'JaxprTracer' at 0x152e015cf340>, <weakref at 0x152e015cc540; to 'JaxprTracer' at 0x152e015cc730>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea985870>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36f500>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e015cca40; to 'JaxprTracer' at 0x152e017cf5c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea985870>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36f700>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df2c74e00; to 'JaxprTracer' at 0x152df2c76620>, <weakref at 0x152df2c754e0; to 'JaxprTracer' at 0x152df2c76d50>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea985870>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36ed00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df2c77e20; to 'JaxprTracer' at 0x152dee356940>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea985870>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 171: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36def0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df23033d0; to 'JaxprTracer' at 0x152df2303570>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deab53db0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36f560>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df23039c0; to 'JaxprTracer' at 0x152df2303e80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deab5f770>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a0520>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152deed18ef0; to 'JaxprTracer' at 0x152deed1b930>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea84ebb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a24f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152deed1b420; to 'JaxprTracer' at 0x152deed1b840>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea645bb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36f130>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df79850d0; to 'JaxprTracer' at 0x152df79879d0>, <weakref at 0x152df7986d90; to 'JaxprTracer' at 0x152df7987b10>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea9e29b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36d080>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df7987150; to 'JaxprTracer' at 0x152debc18e60>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea9e29b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36d220>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dee839d00; to 'JaxprTracer' at 0x152dee83a9e0>, <weakref at 0x152dee83b0b0; to 'JaxprTracer' at 0x152dee83a940>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea9e29b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36d670>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dee838ae0; to 'JaxprTracer' at 0x152dee83a530>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea9e29b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 172: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36ea20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152ded7083b0; to 'JaxprTracer' at 0x152ded709270>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deab13770>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36fbd0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152e03152110; to 'JaxprTracer' at 0x152e03150820>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deaa1d4b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a1060>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152dfff9ea20; to 'JaxprTracer' at 0x152dfff9d400>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deaaae1b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a1360>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152debc8df30; to 'JaxprTracer' at 0x152debc8caa0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea53f7b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c9bb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dea4ce6b0; to 'JaxprTracer' at 0x152dea4ce4e0>, <weakref at 0x152dea4ce610; to 'JaxprTracer' at 0x152dea4ce710>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea70a970>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6ca4a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dea4ce340; to 'JaxprTracer' at 0x152dea4ce300>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea70a970>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6ca6e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df61a73d0; to 'JaxprTracer' at 0x152df61a7980>, <weakref at 0x152df61a7d30; to 'JaxprTracer' at 0x152df61a59f0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea70a970>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c9b80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df61a6ed0; to 'JaxprTracer' at 0x152df61a7d90>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea70a970>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 173: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36f820>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df13667a0; to 'JaxprTracer' at 0x152df1365310>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea5514b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36c890>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df0ad5f30; to 'JaxprTracer' at 0x152df0ad53b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea7b75b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a1e50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152deccb6660; to 'JaxprTracer' at 0x152deccb4e60>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea4fe030>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a23d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152deccb7f10; to 'JaxprTracer' at 0x152deccb4870>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea4553f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6caa50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dea44c810; to 'JaxprTracer' at 0x152dea44c730>, <weakref at 0x152dea44c9a0; to 'JaxprTracer' at 0x152dea44c870>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea4f34b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6cb770>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dea44c950; to 'JaxprTracer' at 0x152dea44c4b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea4f34b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36c260>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df5c17240; to 'JaxprTracer' at 0x152df5c17f20>, <weakref at 0x152df5c16980; to 'JaxprTracer' at 0x152df5c17020>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea4f34b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36d2d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df5c16570; to 'JaxprTracer' at 0x152df5c157c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea4f34b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 174: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36dab0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152deba566b0; to 'JaxprTracer' at 0x152deba57020>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea482d30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36e900>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152deba54310; to 'JaxprTracer' at 0x152deba56120>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea6a98f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a2c10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152debc8e160; to 'JaxprTracer' at 0x152debc8cfa0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea4db630>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a2b40>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152e017ce200; to 'JaxprTracer' at 0x152e017cfa70>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea342c30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6ca740>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dea33ed40; to 'JaxprTracer' at 0x152dea33ec60>, <weakref at 0x152dea33ecf0; to 'JaxprTracer' at 0x152dea33ebc0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea48c9b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c9960>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dea33eca0; to 'JaxprTracer' at 0x152dea33e800>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea48c9b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c8170>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dea33e890; to 'JaxprTracer' at 0x152dea33c910>, <weakref at 0x152dea33d5d0; to 'JaxprTracer' at 0x152dea33d040>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea48c9b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152ded6c8710>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dea33cc70; to 'JaxprTracer' at 0x152dea33ec10>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea48c9b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 175: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36cb30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df79dfec0; to 'JaxprTracer' at 0x152df79dc320>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea436ef0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36e7e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df13da020; to 'JaxprTracer' at 0x152df13d97c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea28a870>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a2360>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152ded6e76f0; to 'JaxprTracer' at 0x152ded6e4a00>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea36d670>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a0b70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152ded6e7bf0; to 'JaxprTracer' at 0x152ded6e7bb0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea0af9b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36eb80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df4c52520; to 'JaxprTracer' at 0x152df4c523f0>, <weakref at 0x152df4c53600; to 'JaxprTracer' at 0x152df4c530c0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb372170>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36f330>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df4c50c70; to 'JaxprTracer' at 0x152df4c52f80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb372170>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36c140>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152def0117b0; to 'JaxprTracer' at 0x152def010d20>, <weakref at 0x152def0109f0; to 'JaxprTracer' at 0x152def011040>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb372170>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36ed90>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152def012520; to 'JaxprTracer' at 0x152def0111d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb372170>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 176: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36d450>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152deabeafc0; to 'JaxprTracer' at 0x152deabe87d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea3c28f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36f660>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152deaa9d6c0; to 'JaxprTracer' at 0x152deaa9d680>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deaa1d0b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a2ca0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152e046ee480; to 'JaxprTracer' at 0x152e046ed130>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea45fcf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a05e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df61a6160; to 'JaxprTracer' at 0x152df61a69e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea1fe7f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36efb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dffc4c360; to 'JaxprTracer' at 0x152dffc4e710>, <weakref at 0x152dffc4d800; to 'JaxprTracer' at 0x152dffc4fed0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x153eb14128b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36f5e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dffc4c680; to 'JaxprTracer' at 0x152dffc4c5f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x153eb14128b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36f090>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152defcb5580; to 'JaxprTracer' at 0x152defcb6300>, <weakref at 0x152defcb5170; to 'JaxprTracer' at 0x152defcb5540>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x153eb14128b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36fc40>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152defcb5800; to 'JaxprTracer' at 0x152defcb6b20>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x153eb14128b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 177: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36fe20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e0178a4d0; to 'JaxprTracer' at 0x152e0178bb60>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea17f430>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36ede0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152def2289f0; to 'JaxprTracer' at 0x152def228190>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea350db0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a29a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152deba56e80; to 'JaxprTracer' at 0x152deba559a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deace9f30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a0620>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152dee5533d0; to 'JaxprTracer' at 0x152dee5504b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb008130>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36fa50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152deb001260; to 'JaxprTracer' at 0x152deb001180>, <weakref at 0x152deb001490; to 'JaxprTracer' at 0x152deb0012c0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea1d6430>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36f350>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152deb000ef0; to 'JaxprTracer' at 0x152deb000eb0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea1d6430>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36db20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e017f9620; to 'JaxprTracer' at 0x152e017fb070>, <weakref at 0x152e017fb240; to 'JaxprTracer' at 0x152e017f8e10>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea1d6430>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36de10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e017fbe20; to 'JaxprTracer' at 0x152e017fb6b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea1d6430>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 178: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36e2e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152dea859d00; to 'JaxprTracer' at 0x152dea859a40>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea28e570>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36c140>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152deca74450; to 'JaxprTracer' at 0x152deca76210>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea1a03b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a2410>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df55efdd0; to 'JaxprTracer' at 0x152df55eef30>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea3bc4b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a2b60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df0f10e50; to 'JaxprTracer' at 0x152df0f106e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9d86130>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a3ab0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de9d0efc0; to 'JaxprTracer' at 0x152de9d0ee40>, <weakref at 0x152de9d0ef70; to 'JaxprTracer' at 0x152de9d0edf0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deafee5f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a3b10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de9d0ea20; to 'JaxprTracer' at 0x152de9d0ec10>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deafee5f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a2b50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152defec5940; to 'JaxprTracer' at 0x152dffd50690>, <weakref at 0x152defec4ef0; to 'JaxprTracer' at 0x152defec6260>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deafee5f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a0e60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152defec5b20; to 'JaxprTracer' at 0x152dffd52c10>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deafee5f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 179: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a1a20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df409f740; to 'JaxprTracer' at 0x152df409c5a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9d79bb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a3340>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152dec315800; to 'JaxprTracer' at 0x152dec3177a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea2a83f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36c890>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152ded14fe20; to 'JaxprTracer' at 0x152ded14c690>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9d223b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36d560>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152ded6e5d50; to 'JaxprTracer' at 0x152e0c33a9e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9ef0470>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a16b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de9fa9260; to 'JaxprTracer' at 0x152de9fa9180>, <weakref at 0x152de9fa9210; to 'JaxprTracer' at 0x152de9fa90e0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea2d4930>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a0a30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de9fa8d10; to 'JaxprTracer' at 0x152de9fa8eb0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea2d4930>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a3ab0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e01561df0; to 'JaxprTracer' at 0x152e01562ad0>, <weakref at 0x152e015623e0; to 'JaxprTracer' at 0x152e015610e0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea2d4930>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a29c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e015615d0; to 'JaxprTracer' at 0x152e01560d20>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea2d4930>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 180: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36fd30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152deab68040; to 'JaxprTracer' at 0x152deab68d70>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9ee63b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36e3a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152deab6a3e0; to 'JaxprTracer' at 0x152deab69360>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb02a370>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca40c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152de9d7f330; to 'JaxprTracer' at 0x152de9d7f890>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea595c70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca4350>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152dea181d00; to 'JaxprTracer' at 0x152dea181c20>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9a4ddb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a2320>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152deb8d1440; to 'JaxprTracer' at 0x152deb8d3ed0>, <weakref at 0x152deb8d22a0; to 'JaxprTracer' at 0x152deb8d0c30>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea3311b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a3c40>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152deb8d2e80; to 'JaxprTracer' at 0x152deb8d1a40>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea3311b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36fc00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152deb93a930; to 'JaxprTracer' at 0x152deb939090>, <weakref at 0x152deb939a30; to 'JaxprTracer' at 0x152deb93a350>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea3311b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36d330>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152deb938cc0; to 'JaxprTracer' at 0x152deb93a080>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea3311b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 181: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36f9a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152def34f8d0; to 'JaxprTracer' at 0x152def34ca50>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea0dc0b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36db70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df6cbb5b0; to 'JaxprTracer' at 0x152df6cb9b80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9ef9ef0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca4630>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152dff990310; to 'JaxprTracer' at 0x152dff991ef0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deb028730>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca4360>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df325a610; to 'JaxprTracer' at 0x152df325af80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de992c330>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36dc20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de9af3790; to 'JaxprTracer' at 0x152de9af35c0>, <weakref at 0x152de9af36f0; to 'JaxprTracer' at 0x152de9af37f0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9c49570>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36da80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de9af3740; to 'JaxprTracer' at 0x152de9af3430>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9c49570>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36cc40>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df6f0b060; to 'JaxprTracer' at 0x152df6f08b90>, <weakref at 0x152df6f08950; to 'JaxprTracer' at 0x152df6f09c20>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9c49570>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36ca60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df6f0ac00; to 'JaxprTracer' at 0x152df6f0a990>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9c49570>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 182: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36eff0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152dff9902c0; to 'JaxprTracer' at 0x152dff9900a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9d2e7b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a3510>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152e0a264cc0; to 'JaxprTracer' at 0x152e0a264500>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9ed5d30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca4c80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152e082e5530; to 'JaxprTracer' at 0x152e082e5950>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de99ca370>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca4f50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df69bde90; to 'JaxprTracer' at 0x152df69bc2d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9821e70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a3860>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de981d760; to 'JaxprTracer' at 0x152de981d680>, <weakref at 0x152de981d710; to 'JaxprTracer' at 0x152de981d5e0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9affc70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a3d90>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de981d6c0; to 'JaxprTracer' at 0x152de981d220>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9affc70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36d5b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152def22ae30; to 'JaxprTracer' at 0x152def22acb0>, <weakref at 0x152def229490; to 'JaxprTracer' at 0x152def22aad0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9affc70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36f610>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152def22a390; to 'JaxprTracer' at 0x152def22bb60>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9affc70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 183: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36ff20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df1fbf0b0; to 'JaxprTracer' at 0x152df1fbf110>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9f96ab0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a3b70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df1fbc4a0; to 'JaxprTracer' at 0x152df1fbddb0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9f7ddf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca5340>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df26955d0; to 'JaxprTracer' at 0x152df2695130>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea03bef0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca5880>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152def955d00; to 'JaxprTracer' at 0x152def954dc0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de98098b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36df60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de9925f80; to 'JaxprTracer' at 0x152de9925c70>, <weakref at 0x152de99261b0; to 'JaxprTracer' at 0x152de9925f40>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deafc8770>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36db60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de9926110; to 'JaxprTracer' at 0x152de99260d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deafc8770>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36fd20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152deca776f0; to 'JaxprTracer' at 0x152deca76e90>, <weakref at 0x152deca75f30; to 'JaxprTracer' at 0x152deca777f0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deafc8770>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36d620>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152deca77c90; to 'JaxprTracer' at 0x152deca75cc0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152deafc8770>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 184: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a2010>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152def9553f0; to 'JaxprTracer' at 0x152def9547d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9afaf70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a1470>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df13d9fd0; to 'JaxprTracer' at 0x152df13db2f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea369d70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca4be0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df0a684f0; to 'JaxprTracer' at 0x152df0a69f90>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de97fdcb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca60b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152dea182160; to 'JaxprTracer' at 0x152dea182ad0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de97552b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a0e30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de95aec50; to 'JaxprTracer' at 0x152de95aeb70>, <weakref at 0x152de95aec00; to 'JaxprTracer' at 0x152de95aead0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9858a70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36cb30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de95aebb0; to 'JaxprTracer' at 0x152de95ae710>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9858a70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a0390>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de95aed90; to 'JaxprTracer' at 0x152de95ac7d0>, <weakref at 0x152de95ae110; to 'JaxprTracer' at 0x152de95ac5a0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9858a70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152dec36e810>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de95afc40; to 'JaxprTracer' at 0x152de95aef30>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9858a70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 185: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a1d30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df325a9d0; to 'JaxprTracer' at 0x152df325bed0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de99536b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a1b50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df32599e0; to 'JaxprTracer' at 0x152df3258960>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152dea2d77f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca5e20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152def3e00e0; to 'JaxprTracer' at 0x152def3e1fe0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9ce24f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca53a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df7943c40; to 'JaxprTracer' at 0x152df79415e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de949b030>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a1f00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de96571f0; to 'JaxprTracer' at 0x152de9657110>, <weakref at 0x152de9657240; to 'JaxprTracer' at 0x152de96572a0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9880ef0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a12a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de96573d0; to 'JaxprTracer' at 0x152de9656ee0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9880ef0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a3d40>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de96567f0; to 'JaxprTracer' at 0x152de9655720>, <weakref at 0x152de96544f0; to 'JaxprTracer' at 0x152de9655e50>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9880ef0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a1920>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de96549f0; to 'JaxprTracer' at 0x152de9654730>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9880ef0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 186: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a3080>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152deda70450; to 'JaxprTracer' at 0x152deda73520>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de948d6f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a31f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152e0167fc40; to 'JaxprTracer' at 0x152e0167ed50>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9f4cb30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca5920>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152deaaa3ab0; to 'JaxprTracer' at 0x152deaaa0fa0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de965b130>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca5dc0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df262f380; to 'JaxprTracer' at 0x152df262f250>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de93743b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a2c30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dffa8f790; to 'JaxprTracer' at 0x152dffa8f020>, <weakref at 0x152dffa8e480; to 'JaxprTracer' at 0x152dffa8ff20>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de97430b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a1640>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dffa8c950; to 'JaxprTracer' at 0x152dffa8e580>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de97430b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a2030>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df0795350; to 'JaxprTracer' at 0x152df0795f90>, <weakref at 0x152df07964d0; to 'JaxprTracer' at 0x152df0794870>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de97430b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a2e80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df0796ed0; to 'JaxprTracer' at 0x152df07946e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de97430b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 187: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a05d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df6293060; to 'JaxprTracer' at 0x152df6292210>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9f85670>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a2e70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df15f2250; to 'JaxprTracer' at 0x152df15f3a20>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de94f6230>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca6eb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152e07712de0; to 'JaxprTracer' at 0x152e07710ff0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9619830>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca60a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152def3e1d50; to 'JaxprTracer' at 0x152def3e0190>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9261db0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a1570>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de9258540; to 'JaxprTracer' at 0x152de9258460>, <weakref at 0x152de92584f0; to 'JaxprTracer' at 0x152de92585a0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de95540f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a36b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de92581d0; to 'JaxprTracer' at 0x152de9258190>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de95540f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a14f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de9353790; to 'JaxprTracer' at 0x152de9353160>, <weakref at 0x152de93531a0; to 'JaxprTracer' at 0x152de9353b60>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de95540f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a0680>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de93522f0; to 'JaxprTracer' at 0x152de9352670>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de95540f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 188: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a1f90>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e031519e0; to 'JaxprTracer' at 0x152e03150550>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de984b670>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a1230>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152de9654b30; to 'JaxprTracer' at 0x152de96566c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de926e730>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca6d50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152de9d0e7f0; to 'JaxprTracer' at 0x152de9d0fed0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de92abc70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca6830>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152defa20e50; to 'JaxprTracer' at 0x152defa21b80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de912c230>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a2ca0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df075ad90; to 'JaxprTracer' at 0x152df075ab70>, <weakref at 0x152df0759ad0; to 'JaxprTracer' at 0x152df07599a0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9890970>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a2c30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df075b290; to 'JaxprTracer' at 0x152df0758fa0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9890970>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a2cb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df0758860; to 'JaxprTracer' at 0x152df0758fa0>, <weakref at 0x152df0758630; to 'JaxprTracer' at 0x152df075bcf0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9890970>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a1b60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df075ab10; to 'JaxprTracer' at 0x152df0759ea0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9890970>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 189: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a08c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e031dbce0; to 'JaxprTracer' at 0x152e031d81e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9490330>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a1510>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df5b00860; to 'JaxprTracer' at 0x152df5b03200>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de92e0270>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca4b00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df377e980; to 'JaxprTracer' at 0x152df377c5a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de93e2070>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca7690>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152deab69ee0; to 'JaxprTracer' at 0x152deab6a760>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de902d8b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a1190>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df2c75b70; to 'JaxprTracer' at 0x152df2c77930>, <weakref at 0x152df2c74a90; to 'JaxprTracer' at 0x152df2c75040>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de912c7b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a33b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df2c77060; to 'JaxprTracer' at 0x152df2c745a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de912c7b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a32b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df460dd00; to 'JaxprTracer' at 0x152df460e990>, <weakref at 0x152dffc2b060; to 'JaxprTracer' at 0x152df460ed00>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de912c7b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a3950>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dffc289f0; to 'JaxprTracer' at 0x152df460ca00>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de912c7b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 190: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a2660>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152deda71a80; to 'JaxprTracer' at 0x152deda72940>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9144870>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a0160>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152dec860d10; to 'JaxprTracer' at 0x152dec863f20>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9238b30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca6c70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df262ecf0; to 'JaxprTracer' at 0x152df262fac0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de906beb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca6f70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152e04e36980; to 'JaxprTracer' at 0x152df262d0e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de8f2fc30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a1cb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de8f1c720; to 'JaxprTracer' at 0x152de8f1c640>, <weakref at 0x152de8f1c6d0; to 'JaxprTracer' at 0x152de8f1c780>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de997a8b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a13a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de8f1c860; to 'JaxprTracer' at 0x152de8f1c3c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de997a8b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a2b40>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dedb8e340; to 'JaxprTracer' at 0x152dedb8d220>, <weakref at 0x152dedb8fdd0; to 'JaxprTracer' at 0x152dedb8f020>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de997a8b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a04b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dedb8df30; to 'JaxprTracer' at 0x152dedb8e170>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de997a8b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 191: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a3b40>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e0316c4a0; to 'JaxprTracer' at 0x152e0316dfe0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de93b5db0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a0c00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152dee69f7e0; to 'JaxprTracer' at 0x152dee69d6d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9717b30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca5bb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x153ec488f9c0; to 'JaxprTracer' at 0x152df76405a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de99ecdb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca7920>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df10acdb0; to 'JaxprTracer' at 0x152df10ad9a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9e2c330>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a35e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152decf314e0; to 'JaxprTracer' at 0x152decf32120>, <weakref at 0x152decf30720; to 'JaxprTracer' at 0x152decf32bc0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9b7fdf0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a23a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df75f60c0; to 'JaxprTracer' at 0x152decf32df0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9b7fdf0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a3530>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dff9f1c10; to 'JaxprTracer' at 0x152dff9f14f0>, <weakref at 0x152dff9f3060; to 'JaxprTracer' at 0x152dff9f3b10>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9b7fdf0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a1950>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dff9f1710; to 'JaxprTracer' at 0x152dff9f1f40>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9b7fdf0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 192: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a09d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152deccb44f0; to 'JaxprTracer' at 0x152deccb61c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9e24e30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a0510>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152deab69bc0; to 'JaxprTracer' at 0x152deab6be30>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de8f0cdb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca5840>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152deb4d1b70; to 'JaxprTracer' at 0x152deb4d0f50>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de8ef4ff0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca7b00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152defa21e90; to 'JaxprTracer' at 0x152defa231b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de8cf49f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a3640>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df45df5b0; to 'JaxprTracer' at 0x152df45dd810>, <weakref at 0x152df45de5c0; to 'JaxprTracer' at 0x152df45ddb30>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9b7c830>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a0670>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df45dcd60; to 'JaxprTracer' at 0x152df45dedf0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9b7c830>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a3ef0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df262ea70; to 'JaxprTracer' at 0x152df262f250>, <weakref at 0x152df262eca0; to 'JaxprTracer' at 0x152df262da90>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9b7c830>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a2210>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df262df80; to 'JaxprTracer' at 0x152df262f110>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9b7c830>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 193: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a32a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152de9258a40; to 'JaxprTracer' at 0x152de925a080>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de92e15f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a3fb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152de92596c0; to 'JaxprTracer' at 0x152de925b750>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9e84670>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca6ad0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df36d9e40; to 'JaxprTracer' at 0x152df36db1b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de8db1f70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca5380>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df36dbd80; to 'JaxprTracer' at 0x152df36d9a40>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de8dbdd70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca6050>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dea4cff10; to 'JaxprTracer' at 0x152dea4cd040>, <weakref at 0x152dea4ced90; to 'JaxprTracer' at 0x152dea4cd540>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de905ccb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca6e70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dea4cf150; to 'JaxprTracer' at 0x152dea4cd9a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de905ccb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca6170>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dec88d990; to 'JaxprTracer' at 0x152dec88d090>, <weakref at 0x152dec88f100; to 'JaxprTracer' at 0x152dec88e6c0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de905ccb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca4240>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dec88d8f0; to 'JaxprTracer' at 0x152dec88dcc0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de905ccb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 194: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca63a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df5e360c0; to 'JaxprTracer' at 0x152df5e35310>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de90164b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca5350>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x153eb0ad5170; to 'JaxprTracer' at 0x153eb0ad5db0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9626470>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a0e10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df5699940; to 'JaxprTracer' at 0x152df569bb60>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de8e684f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e18040>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152defcb7dd0; to 'JaxprTracer' at 0x152defcb7ca0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de8a4fc70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca7930>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de8a51850; to 'JaxprTracer' at 0x152de8a516d0>, <weakref at 0x152de8a51800; to 'JaxprTracer' at 0x152de8a51680>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9038b30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca7f50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de8a512b0; to 'JaxprTracer' at 0x152de8a514a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9038b30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a0ee0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e03167060; to 'JaxprTracer' at 0x152e03167de0>, <weakref at 0x152e031667a0; to 'JaxprTracer' at 0x152e031654a0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9038b30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a2040>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e03166340; to 'JaxprTracer' at 0x152e03167340>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9038b30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 195: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a0f80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e000799e0; to 'JaxprTracer' at 0x152e0007b7a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de8a46a30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a1350>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152de91214e0; to 'JaxprTracer' at 0x152de9120be0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de8de51b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e18880>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152debe4ad90; to 'JaxprTracer' at 0x152debe4aa30>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de8a725b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e180e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152de8dcc270; to 'JaxprTracer' at 0x152de8dcc320>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de888d7b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca4b00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df1b69850; to 'JaxprTracer' at 0x152df1b69a90>, <weakref at 0x152df1b6aa20; to 'JaxprTracer' at 0x152df1b6a440>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9e47530>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca40c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e0c41c860; to 'JaxprTracer' at 0x152e0c41edf0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9e47530>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a3d30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df527af20; to 'JaxprTracer' at 0x152df527bbb0>, <weakref at 0x152df527acf0; to 'JaxprTracer' at 0x152df527a030>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9e47530>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a0100>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df527b6f0; to 'JaxprTracer' at 0x152df527a0d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9e47530>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 196: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a2f60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152deb9e97b0; to 'JaxprTracer' at 0x152deb9eb930>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9e77e30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a2a90>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152deef49bc0; to 'JaxprTracer' at 0x152deef499a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de888fb70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e18b60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152de8c77010; to 'JaxprTracer' at 0x152de8c76f80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de8a2d730>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e18340>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df055e4d0; to 'JaxprTracer' at 0x152df055fca0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de876b0f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a2450>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152deb0015d0; to 'JaxprTracer' at 0x152deb000eb0>, <weakref at 0x152deb002d90; to 'JaxprTracer' at 0x152deb0012c0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de88441b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a1c10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152deb002bb0; to 'JaxprTracer' at 0x152deb003610>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de88441b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a3cf0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df207a7f0; to 'JaxprTracer' at 0x152df2078dc0>, <weakref at 0x152df2079c10; to 'JaxprTracer' at 0x152df207a080>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de88441b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a3420>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df2079fd0; to 'JaxprTracer' at 0x152df20780f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de88441b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 197: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a3800>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e0858ede0; to 'JaxprTracer' at 0x152e0858f7f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de877d070>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a24f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152de8ce7330; to 'JaxprTracer' at 0x152de8ce4d20>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de8e87370>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e18ee0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152deabeb560; to 'JaxprTracer' at 0x152deabea5d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de87344b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e19590>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152deabebc90; to 'JaxprTracer' at 0x152deabebc50>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de8bfcab0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a2740>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df6935580; to 'JaxprTracer' at 0x152df6937a70>, <weakref at 0x152df6935210; to 'JaxprTracer' at 0x152df6936210>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de8ddd8f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a1e30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df6934db0; to 'JaxprTracer' at 0x152df6935720>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de8ddd8f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca7630>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df527a0c0; to 'JaxprTracer' at 0x152df5278eb0>, <weakref at 0x152df5279530; to 'JaxprTracer' at 0x152df52795e0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de8ddd8f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca6100>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df5278a90; to 'JaxprTracer' at 0x152df5278a50>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de8ddd8f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 198: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca59d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df17efdd0; to 'JaxprTracer' at 0x152df17efac0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de8b7a9f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca66b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df17ee390; to 'JaxprTracer' at 0x152df17ec5a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de88368f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e18a20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152ded5cb9c0; to 'JaxprTracer' at 0x152ded5c8af0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de8cbe070>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e19b10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152e046ef380; to 'JaxprTracer' at 0x152e046ec230>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de88ee430>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca6fb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de85f5ee0; to 'JaxprTracer' at 0x152de85f5f90>, <weakref at 0x152de85f60c0; to 'JaxprTracer' at 0x152de85f5ea0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de87294f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca6c60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de85f5ad0; to 'JaxprTracer' at 0x152de85f5b30>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de87294f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a2e70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df5b02340; to 'JaxprTracer' at 0x152df5b032f0>, <weakref at 0x152df5b033d0; to 'JaxprTracer' at 0x152df5b02710>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de87294f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a3f70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df5b03c90; to 'JaxprTracer' at 0x152df5b02d50>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de87294f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 199: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a0da0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df626a430; to 'JaxprTracer' at 0x152df626b2a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de8a58630>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca6cb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152ded70aca0; to 'JaxprTracer' at 0x152ded70a030>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de8bc0db0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e19f40>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df5c15ad0; to 'JaxprTracer' at 0x152df5c14f50>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de86403b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e19fb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df556be70; to 'JaxprTracer' at 0x152df55692c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de8977ef0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a3f40>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de8993100; to 'JaxprTracer' at 0x152de8993020>, <weakref at 0x152de89930b0; to 'JaxprTracer' at 0x152de8993160>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de8be28b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a38c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de89931a0; to 'JaxprTracer' at 0x152de8993200>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de8be28b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a2570>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e04e10c70; to 'JaxprTracer' at 0x152de898fd40>, <weakref at 0x152e04e11350; to 'JaxprTracer' at 0x152de898d8b0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de8be28b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a1d30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e04e12890; to 'JaxprTracer' at 0x152e04e109b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de8be28b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 200: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca7350>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e0c41d0d0; to 'JaxprTracer' at 0x152dffa741e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de98c0eb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca5600>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152de9af08b0; to 'JaxprTracer' at 0x152de9af1630>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de864ec30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e19b90>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152de85f4450; to 'JaxprTracer' at 0x152de85f4b40>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de9e11e30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1a4a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152e01718fe0; to 'JaxprTracer' at 0x152e01719270>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de81e2070>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x153eb1a2aac0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152deb49f1a0; to 'JaxprTracer' at 0x152deb49f700>, <weakref at 0x152deb49d530; to 'JaxprTracer' at 0x152deb49e2b0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de8a4ccf0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a1fd0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152deb49f060; to 'JaxprTracer' at 0x152deb49c050>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de8a4ccf0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a30d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dea85a3e0; to 'JaxprTracer' at 0x152dea8583c0>, <weakref at 0x152dea85a8e0; to 'JaxprTracer' at 0x152dea85bfc0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de8a4ccf0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152deb0a0c00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dea859760; to 'JaxprTracer' at 0x152dea85abc0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de8a4ccf0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 201: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca4110>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152dea44c270; to 'JaxprTracer' at 0x152dea44c7d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de8a44cb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca7820>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df4a6e8e0; to 'JaxprTracer' at 0x152df4a6e710>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de88361b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e196f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152de9d7e200; to 'JaxprTracer' at 0x152de9d7eda0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de8218af0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e18440>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152de9d7f1a0; to 'JaxprTracer' at 0x152de9d7dea0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de8133af0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca7b50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df10aca90; to 'JaxprTracer' at 0x152df10ac8c0>, <weakref at 0x152df10af100; to 'JaxprTracer' at 0x152df10ad4a0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de83a69b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca5200>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df10acc70; to 'JaxprTracer' at 0x152deb0022b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de83a69b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca57c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de81471a0; to 'JaxprTracer' at 0x152def3e07d0>, <weakref at 0x152de81458f0; to 'JaxprTracer' at 0x152de8144280>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de83a69b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca79e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de8145080; to 'JaxprTracer' at 0x152def3e0d70>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de83a69b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 202: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca55b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152dea33f600; to 'JaxprTracer' at 0x152dea33ebc0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de863a3f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca7b00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152dea33c3b0; to 'JaxprTracer' at 0x152dea33f5c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de8920730>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e18490>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152deaaa1b70; to 'JaxprTracer' at 0x152deaaa23a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de891f470>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1a2e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152deaaa2750; to 'JaxprTracer' at 0x152deaaa3b60>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7fa2170>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca7e50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152debc8e390; to 'JaxprTracer' at 0x152debc8ca00>, <weakref at 0x152debc8d170; to 'JaxprTracer' at 0x152debc8ead0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de80ded70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca5c80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152debc8c3b0; to 'JaxprTracer' at 0x152debc8c190>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de80ded70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca5080>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df1b72de0; to 'JaxprTracer' at 0x152df1b70a00>, <weakref at 0x152df1b71cb0; to 'JaxprTracer' at 0x152df1b71360>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de80ded70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca5f90>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df1b72480; to 'JaxprTracer' at 0x152df1b70780>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de80ded70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 203: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca4ee0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df62681d0; to 'JaxprTracer' at 0x152df6268d70>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de85c15f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca4340>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152de89858f0; to 'JaxprTracer' at 0x152de8986fd0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de82160b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1ac40>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152e04835c60; to 'JaxprTracer' at 0x152e04834870>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7fed1b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e19250>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152de9d7f560; to 'JaxprTracer' at 0x152de9d7fb60>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7e883b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca44f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dff9936a0; to 'JaxprTracer' at 0x152dff9905a0>, <weakref at 0x152dff9914e0; to 'JaxprTracer' at 0x152dff991a90>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de8288d70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca4d30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dff9901d0; to 'JaxprTracer' at 0x152dff9903c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de8288d70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca6390>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152deb9e9300; to 'JaxprTracer' at 0x152deb9e9630>, <weakref at 0x152deb9e8b30; to 'JaxprTracer' at 0x152deb9ea4e0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de8288d70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca40b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152deb9e8bd0; to 'JaxprTracer' at 0x152deb9e80a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de8288d70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 204: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca7650>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df61a4b80; to 'JaxprTracer' at 0x152df61a6530>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7e92370>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca6c10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152dee481350; to 'JaxprTracer' at 0x152dee481860>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de80b37b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e190e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df534bfb0; to 'JaxprTracer' at 0x152df534ac60>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de87f7030>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1b570>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152defb52200; to 'JaxprTracer' at 0x152defb50410>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7d6dc30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca4930>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de7d69350; to 'JaxprTracer' at 0x152de7d69270>, <weakref at 0x152de7d694e0; to 'JaxprTracer' at 0x152de7d693b0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de83c0db0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca6220>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de7d69490; to 'JaxprTracer' at 0x152de7d68ff0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de83c0db0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca73b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152debe4a570; to 'JaxprTracer' at 0x152debe486e0>, <weakref at 0x152debe49580; to 'JaxprTracer' at 0x152debe49a40>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de83c0db0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca59f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152debe493f0; to 'JaxprTracer' at 0x152debe4bb60>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de83c0db0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 205: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca6e10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152dea3e53a0; to 'JaxprTracer' at 0x152dea3e5090>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de8179570>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca4c60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152dea3e71a0; to 'JaxprTracer' at 0x152dea3e4500>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7f0b530>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1b560>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152dee482ed0; to 'JaxprTracer' at 0x152dee481450>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7db9bf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e187f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152e015e3330; to 'JaxprTracer' at 0x152e015e30c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7c372b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca6ea0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df5348ea0; to 'JaxprTracer' at 0x152df53491d0>, <weakref at 0x152df77f4360; to 'JaxprTracer' at 0x152df5349cc0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7e6a0b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca78a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df534be20; to 'JaxprTracer' at 0x152df534b520>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7e6a0b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca5ca0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dea33ec50; to 'JaxprTracer' at 0x152dea33e1c0>, <weakref at 0x152dea33ddf0; to 'JaxprTracer' at 0x152dea33cf00>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7e6a0b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca7c00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dea33f880; to 'JaxprTracer' at 0x152df534a300>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7e6a0b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 206: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca6dd0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152dee2e7510; to 'JaxprTracer' at 0x152dee2e5770>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7dece70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca7d30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df2079210; to 'JaxprTracer' at 0x152df207a800>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7f90030>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1aa30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152dead05800; to 'JaxprTracer' at 0x152dead063f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7d26430>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e189e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df298f5b0; to 'JaxprTracer' at 0x152df298e800>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7b39530>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca7930>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df774d760; to 'JaxprTracer' at 0x152df774e3f0>, <weakref at 0x152df774d9e0; to 'JaxprTracer' at 0x152df774dcc0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7ec7730>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca5990>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df774db70; to 'JaxprTracer' at 0x152df774fde0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7ec7730>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca7550>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dff9b8a40; to 'JaxprTracer' at 0x152df24fb930>, <weakref at 0x152dff9b89a0; to 'JaxprTracer' at 0x152dff9b8050>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7ec7730>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca6830>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dff9bbc90; to 'JaxprTracer' at 0x152df24f95e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7ec7730>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 207: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca44b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df0de1a80; to 'JaxprTracer' at 0x152df0de0e60>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de805c0b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca7770>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df128e430; to 'JaxprTracer' at 0x152df128c870>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7f1e330>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e18820>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152e015e2610; to 'JaxprTracer' at 0x152e015e3520>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7cefa70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e19360>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152e015e3f10; to 'JaxprTracer' at 0x152e015e3ac0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7a366b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e19d80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de79c3150; to 'JaxprTracer' at 0x152de79c3070>, <weakref at 0x152de79c31a0; to 'JaxprTracer' at 0x152de79c3200>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7af9870>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1b110>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de79c3380; to 'JaxprTracer' at 0x152de79c2e40>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7af9870>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1a8f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dea33d670; to 'JaxprTracer' at 0x152dea33caf0>, <weakref at 0x152dea33ee80; to 'JaxprTracer' at 0x152dea33d040>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7af9870>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1a8b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dea33f380; to 'JaxprTracer' at 0x152dea33fa20>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7af9870>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 208: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1ae80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e08760d10; to 'JaxprTracer' at 0x152e08763ac0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de85fc670>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e18830>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152de8993a10; to 'JaxprTracer' at 0x152de8993340>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de8ba6070>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca4f30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152dffa3d080; to 'JaxprTracer' at 0x152dffa3f110>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7e6a470>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca5380>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152deed1b470; to 'JaxprTracer' at 0x152deed1afd0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7a083f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1b830>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152debe48ea0; to 'JaxprTracer' at 0x152debe48910>, <weakref at 0x152debe4b790; to 'JaxprTracer' at 0x152debe4b340>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7d40f70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca6290>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152debe4a390; to 'JaxprTracer' at 0x152debe4b070>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7d40f70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1b880>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152debe48400; to 'JaxprTracer' at 0x152debe4b0c0>, <weakref at 0x152debe49350; to 'JaxprTracer' at 0x152debe49a40>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7d40f70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca7fc0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152debe4bb50; to 'JaxprTracer' at 0x152debe48550>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7d40f70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 209: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca7ce0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152dffa3f6a0; to 'JaxprTracer' at 0x152dffa3fa70>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de805d130>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca6190>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152de8f1c4f0; to 'JaxprTracer' at 0x152de8f1cd70>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7b253f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a45b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152def1bac00; to 'JaxprTracer' at 0x152def1bb480>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de79a20b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a42d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152def1b9670; to 'JaxprTracer' at 0x152def1ba080>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de778ebb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca6e70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de77e53a0; to 'JaxprTracer' at 0x152de77e52c0>, <weakref at 0x152de77e5350; to 'JaxprTracer' at 0x152de77e5220>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7b0e030>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca5840>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de77e5300; to 'JaxprTracer' at 0x152de77e4e60>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7b0e030>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca5290>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dfff79ee0; to 'JaxprTracer' at 0x152dfff7a440>, <weakref at 0x152dfff78720; to 'JaxprTracer' at 0x152dfff78c30>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7b0e030>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca5c40>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dfff784f0; to 'JaxprTracer' at 0x152dfff78f00>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7b0e030>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 210: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca7760>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152de981e110; to 'JaxprTracer' at 0x152de981da90>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de79e35f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca4890>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152de981fec0; to 'JaxprTracer' at 0x152de981e300>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7ad9930>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a4690>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df4734f90; to 'JaxprTracer' at 0x152df47368f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de79825b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a4540>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152de99e3740; to 'JaxprTracer' at 0x152de99e0f50>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de76b0b70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1b1f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de76aa430; to 'JaxprTracer' at 0x152de76aa350>, <weakref at 0x152de76aa3e0; to 'JaxprTracer' at 0x152de76aa490>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7b8cdb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e19f90>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de76aa570; to 'JaxprTracer' at 0x152de76aa0d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7b8cdb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca7bb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152deb0fe200; to 'JaxprTracer' at 0x152deb0fe8a0>, <weakref at 0x152deb0fede0; to 'JaxprTracer' at 0x152deb0fd860>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7b8cdb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca74f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152deb0fd800; to 'JaxprTracer' at 0x152deb0ffa20>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7b8cdb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 211: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca7fd0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df61a7380; to 'JaxprTracer' at 0x152df61a57c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de78c1af0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca4640>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df6f0bb00; to 'JaxprTracer' at 0x152df6f0a300>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de798f130>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a5060>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df17ec310; to 'JaxprTracer' at 0x152df17ec0f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de8182e70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a4ea0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df76f4b30; to 'JaxprTracer' at 0x152df76f6940>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de84ee6f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca4fc0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df786bd80; to 'JaxprTracer' at 0x152df786b390>, <weakref at 0x152df7869440; to 'JaxprTracer' at 0x152df786a7b0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de77d5ab0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca5ad0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df7869cb0; to 'JaxprTracer' at 0x152df786aa80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de77d5ab0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca67d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e03176cf0; to 'JaxprTracer' at 0x152e03174a50>, <weakref at 0x152e03176520; to 'JaxprTracer' at 0x152e03176350>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de77d5ab0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca4fd0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e031743b0; to 'JaxprTracer' at 0x152df6cbb020>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de77d5ab0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 212: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca7920>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df76dc8b0; to 'JaxprTracer' at 0x152df76dead0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de84ddab0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca6790>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152de925bb00; to 'JaxprTracer' at 0x152de9258a00>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de764feb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a52e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df0de0680; to 'JaxprTracer' at 0x152df0de0730>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de79eccf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a5450>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152de763cbd0; to 'JaxprTracer' at 0x152de763cb90>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de74289f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca7450>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de743b6a0; to 'JaxprTracer' at 0x152de743b5c0>, <weakref at 0x152de743b6f0; to 'JaxprTracer' at 0x152de743b750>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de8510f30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca7840>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de743b8d0; to 'JaxprTracer' at 0x152de743b390>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de8510f30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca6830>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e046ecae0; to 'JaxprTracer' at 0x152df2e0d400>, <weakref at 0x152e046edda0; to 'JaxprTracer' at 0x153e9cbca4e0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de8510f30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca4300>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e046ed490; to 'JaxprTracer' at 0x152e015cc320>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de8510f30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 213: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e18dc0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df0de04f0; to 'JaxprTracer' at 0x152df0de08c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de78c1b70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1a360>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152de9af3060; to 'JaxprTracer' at 0x152de9af1b80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de77d44f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a4c30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df0571bc0; to 'JaxprTracer' at 0x152df0571680>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de84ae930>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a5ad0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df77c0ea0; to 'JaxprTracer' at 0x152df77c1b30>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de75ea8b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca6c40>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de75dcae0; to 'JaxprTracer' at 0x152de75dca00>, <weakref at 0x152de75dcc70; to 'JaxprTracer' at 0x152de75dcb40>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de78ed1b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca7300>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de75dc770; to 'JaxprTracer' at 0x152de75dc730>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de78ed1b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca7c50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df16e9a80; to 'JaxprTracer' at 0x152df16e9d60>, <weakref at 0x152df16eb470; to 'JaxprTracer' at 0x152df16e8a00>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de78ed1b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9ca7840>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df16eb6f0; to 'JaxprTracer' at 0x152df16eb570>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de78ed1b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 214: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e19f70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152deaaa2bb0; to 'JaxprTracer' at 0x152deaaa0640>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de756e270>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1b700>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152debeba070; to 'JaxprTracer' at 0x152debeb9720>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de798e970>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a5990>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152e01570180; to 'JaxprTracer' at 0x152e01572a80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de84d18b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a54a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152deb46fb00; to 'JaxprTracer' at 0x152deb46e760>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de71543b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1b5c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de714b2e0; to 'JaxprTracer' at 0x152de714b200>, <weakref at 0x152de714b470; to 'JaxprTracer' at 0x152de714b340>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de76a6af0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1bcd0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de714b420; to 'JaxprTracer' at 0x152de714af80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de76a6af0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e196d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152deabe8c70; to 'JaxprTracer' at 0x152deabe8a00>, <weakref at 0x152deabe8a40; to 'JaxprTracer' at 0x152deabead50>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de76a6af0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1b6d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152deabe9670; to 'JaxprTracer' at 0x152deabe9220>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de76a6af0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 215: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1a7f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152deb36cc20; to 'JaxprTracer' at 0x152deb36fc00>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de752bf70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1ac40>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152deb36eca0; to 'JaxprTracer' at 0x152deb36d0e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de79494b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a5bc0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df69be7f0; to 'JaxprTracer' at 0x152df69bc4b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7580c30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a5410>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152deabef510; to 'JaxprTracer' at 0x152deabef430>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de72c5970>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1be70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df527b470; to 'JaxprTracer' at 0x152df5279f90>, <weakref at 0x152df527a430; to 'JaxprTracer' at 0x152df527bac0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7130530>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1b5b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df5279580; to 'JaxprTracer' at 0x152df527ada0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7130530>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1b880>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df6e25990; to 'JaxprTracer' at 0x152df6e26800>, <weakref at 0x152df6e262f0; to 'JaxprTracer' at 0x152df6e25fe0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7130530>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e188b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df6e27c40; to 'JaxprTracer' at 0x152df6e24730>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7130530>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 216: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1a290>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df1e6eed0; to 'JaxprTracer' at 0x152df1e6e3a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6f6bcf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e19200>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152dee550950; to 'JaxprTracer' at 0x152dee552c10>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7127730>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a6fb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df055dbc0; to 'JaxprTracer' at 0x152df055e9e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7021870>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a6f20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152dff9bb380; to 'JaxprTracer' at 0x152dff9bb750>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7373630>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1a4e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de8f1f290; to 'JaxprTracer' at 0x152de8f1d8b0>, <weakref at 0x152de8f1e070; to 'JaxprTracer' at 0x152de8f1e030>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6fe51b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1bd50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de8f1ea70; to 'JaxprTracer' at 0x152de8f1cb90>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6fe51b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1afb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df36d96c0; to 'JaxprTracer' at 0x152df36db570>, <weakref at 0x152df36db380; to 'JaxprTracer' at 0x152df36da580>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6fe51b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1a900>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df36db2e0; to 'JaxprTracer' at 0x152df36d9e50>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6fe51b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 217: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1a4a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152deabebfb0; to 'JaxprTracer' at 0x152deabe9bd0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de8be0630>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1ac50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152deabe9e40; to 'JaxprTracer' at 0x152deabea990>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7606270>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a6e60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152dec88c9a0; to 'JaxprTracer' at 0x152dec88e3f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de739f470>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a4f90>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df331d1c0; to 'JaxprTracer' at 0x152df331db80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de720cef0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e18120>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de7217790; to 'JaxprTracer' at 0x152de72176b0>, <weakref at 0x152de72177e0; to 'JaxprTracer' at 0x152de7217840>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de73a17f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1a680>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de72179c0; to 'JaxprTracer' at 0x152de7217480>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de73a17f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1b7b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df0f121b0; to 'JaxprTracer' at 0x152df0f12cb0>, <weakref at 0x152df0f10f90; to 'JaxprTracer' at 0x152df0f12e40>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de73a17f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e18f70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df0f11710; to 'JaxprTracer' at 0x152de7289400>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de73a17f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 218: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e19020>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df71b8a90; to 'JaxprTracer' at 0x152df71b8550>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de72037f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e188c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152deec02a20; to 'JaxprTracer' at 0x152deec03d90>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de70cae70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a6100>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152defb430b0; to 'JaxprTracer' at 0x152defb40aa0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de73589b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a5ef0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152deb707880; to 'JaxprTracer' at 0x152deb707020>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6ea26f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e18bd0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de6c24d60; to 'JaxprTracer' at 0x152de6c24c80>, <weakref at 0x152de6c24d10; to 'JaxprTracer' at 0x152de6c24be0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6f62930>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e18e40>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de6c24cc0; to 'JaxprTracer' at 0x152de6c24820>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6f62930>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1b9c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df1364450; to 'JaxprTracer' at 0x152df13677a0>, <weakref at 0x152df1367ba0; to 'JaxprTracer' at 0x152df1365310>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6f62930>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1a620>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df1364540; to 'JaxprTracer' at 0x152df13669e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6f62930>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 219: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1b770>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152de9550860; to 'JaxprTracer' at 0x152de9551450>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7377030>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1bc10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152de9550b30; to 'JaxprTracer' at 0x152de9550690>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de702eff0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a48e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152e01782750; to 'JaxprTracer' at 0x152e01780be0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7238870>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a7af0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152debfbfab0; to 'JaxprTracer' at 0x152debfbc820>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6a9c6b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e19470>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de6a969d0; to 'JaxprTracer' at 0x152de6a968f0>, <weakref at 0x152de6a96980; to 'JaxprTracer' at 0x152de6a96a30>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de711af70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e19e80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de6a96b10; to 'JaxprTracer' at 0x152de6a96670>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de711af70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e190e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de9351260; to 'JaxprTracer' at 0x152de9351e50>, <weakref at 0x152de9351ad0; to 'JaxprTracer' at 0x152de93523f0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de711af70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1a790>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de9351d00; to 'JaxprTracer' at 0x152de93518b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de711af70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 220: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e187e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df15f2b60; to 'JaxprTracer' at 0x152df15f2a30>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7126e30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e18880>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152def111f30; to 'JaxprTracer' at 0x152def111a90>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de711ea70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a5170>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152deca76390; to 'JaxprTracer' at 0x152deca75180>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6b2acf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a7050>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152deca76200; to 'JaxprTracer' at 0x152deca777f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de698a270>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1bae0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152decd1e8e0; to 'JaxprTracer' at 0x152decd1fbb0>, <weakref at 0x152decd1cbd0; to 'JaxprTracer' at 0x152decd1dc70>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6c67f30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e19750>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152decd1d5d0; to 'JaxprTracer' at 0x152decd1c960>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6c67f30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1aa70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df2195030; to 'JaxprTracer' at 0x152df2195400>, <weakref at 0x152df2197650; to 'JaxprTracer' at 0x152df2197340>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6c67f30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e19c50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df2195e40; to 'JaxprTracer' at 0x152df21940a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6c67f30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 221: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e180f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152deffc9b20; to 'JaxprTracer' at 0x152deffca670>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7015f30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1a510>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152de8dcf290; to 'JaxprTracer' at 0x152de8dcf610>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de72397b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a5420>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152de72167a0; to 'JaxprTracer' at 0x152de72168f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6b40f30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a6990>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152de7214a90; to 'JaxprTracer' at 0x152de7214be0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6870330>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1a340>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de6a37920; to 'JaxprTracer' at 0x152de6a37840>, <weakref at 0x152de6a37970; to 'JaxprTracer' at 0x152de6a379d0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6c85af0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e19730>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de6a37b50; to 'JaxprTracer' at 0x152de6a37610>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6c85af0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1ba80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e047ccf40; to 'JaxprTracer' at 0x152e047cfc00>, <weakref at 0x152e047cfe20; to 'JaxprTracer' at 0x152e047cfbb0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6c85af0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1b590>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e047cd490; to 'JaxprTracer' at 0x152e047ce300>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6c85af0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 222: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1a4a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df15f0900; to 'JaxprTracer' at 0x152df15f26c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6c952f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1a470>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152dff9b8900; to 'JaxprTracer' at 0x152dff9ba260>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6c184f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a4e40>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152dffa3f8d0; to 'JaxprTracer' at 0x152dffa3f430>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6a40f30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a4c00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152e031db600; to 'JaxprTracer' at 0x152e031dafd0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de675a0b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1b110>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de6751940; to 'JaxprTracer' at 0x152de6751860>, <weakref at 0x152de67518f0; to 'JaxprTracer' at 0x152de67517c0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6ae4770>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1b970>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de67513f0; to 'JaxprTracer' at 0x152de6751590>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6ae4770>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1a4a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df780e750; to 'JaxprTracer' at 0x152df780e0d0>, <weakref at 0x152df780cef0; to 'JaxprTracer' at 0x152df780fc50>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6ae4770>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1adf0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df780eca0; to 'JaxprTracer' at 0x152df780d810>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6ae4770>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 223: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1b7e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df1367b00; to 'JaxprTracer' at 0x152df1364410>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6b02030>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e18820>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152de89d35b0; to 'JaxprTracer' at 0x152de89d2170>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6922e70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1c0c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152de6c58b80; to 'JaxprTracer' at 0x152de6c58870>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de67a7e70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1c1b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152de6c5a930; to 'JaxprTracer' at 0x152de6c5aad0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de662c570>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e19aa0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de661e6b0; to 'JaxprTracer' at 0x152de661e5d0>, <weakref at 0x152de661e840; to 'JaxprTracer' at 0x152de661e710>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de689ccb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1acf0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de661e7f0; to 'JaxprTracer' at 0x152de661e350>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de689ccb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1b6d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df0559d00; to 'JaxprTracer' at 0x152df055bc00>, <weakref at 0x152df055ade0; to 'JaxprTracer' at 0x152df0559090>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de689ccb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e185a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df055a4d0; to 'JaxprTracer' at 0x152df055b890>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de689ccb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 224: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e18760>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e031c2ed0; to 'JaxprTracer' at 0x152e031c1b30>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6919f30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e18630>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152deaa9e520; to 'JaxprTracer' at 0x152deaa9eee0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6846630>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1c880>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df2197920; to 'JaxprTracer' at 0x152df2195400>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6a02270>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1c5d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152dee357fb0; to 'JaxprTracer' at 0x152dee357890>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de65327f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1af50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de64bf6a0; to 'JaxprTracer' at 0x152de64bf570>, <weakref at 0x152de64bf650; to 'JaxprTracer' at 0x152de64bf480>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de67c0070>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e18750>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de64bf790; to 'JaxprTracer' at 0x152de64bf7f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de67c0070>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e19940>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e0857f240; to 'JaxprTracer' at 0x152e0857d130>, <weakref at 0x152ded2364d0; to 'JaxprTracer' at 0x152e0857eb20>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de67c0070>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1b210>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152ded236de0; to 'JaxprTracer' at 0x152ded235810>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de67c0070>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 225: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1b570>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df3b652b0; to 'JaxprTracer' at 0x152df3b65680>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7665ab0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1bb70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df298ef20; to 'JaxprTracer' at 0x152df298df90>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de674a270>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1ce10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152ded4b0220; to 'JaxprTracer' at 0x152ded4b31b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de68db8f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1ce20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152de96577e0; to 'JaxprTracer' at 0x152de96540f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de63f3f70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e18340>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df6fb8950; to 'JaxprTracer' at 0x152df6fb8e60>, <weakref at 0x152df6fbb9c0; to 'JaxprTracer' at 0x152df6fb8dc0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7462b70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1b180>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df6fbb650; to 'JaxprTracer' at 0x152df6fb9680>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7462b70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1a4a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de77e7fb0; to 'JaxprTracer' at 0x152de77e5d60>, <weakref at 0x152de77e59e0; to 'JaxprTracer' at 0x152de77e5310>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7462b70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1bd00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de77e7920; to 'JaxprTracer' at 0x152de77e6a30>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de7462b70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 226: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1bfd0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152de981c540; to 'JaxprTracer' at 0x152de981d360>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de69e8f30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e18290>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152de981f420; to 'JaxprTracer' at 0x152de981f480>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6508a30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1d3b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152de6ea65c0; to 'JaxprTracer' at 0x152de6ea7930>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6590e70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1d2e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152deee31710; to 'JaxprTracer' at 0x152deee33cf0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de62b1b70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1a3a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e01781b20; to 'JaxprTracer' at 0x152e017816d0>, <weakref at 0x152e01782c50; to 'JaxprTracer' at 0x152e01782940>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de643adb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1baa0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e01781800; to 'JaxprTracer' at 0x152e01780a50>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de643adb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a76d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df71d8270; to 'JaxprTracer' at 0x152df71da940>, <weakref at 0x152df71d8590; to 'JaxprTracer' at 0x152df71d8960>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de643adb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a4a50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df71db9c0; to 'JaxprTracer' at 0x152df71d8320>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de643adb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 227: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a7ed0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152dffd18a40; to 'JaxprTracer' at 0x152dffd19c20>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de63d3ef0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a7a10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df1b6b380; to 'JaxprTracer' at 0x152df1b6a580>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6b14570>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1caa0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152de6840810; to 'JaxprTracer' at 0x152de6840960>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de63ea8f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1d7c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152de6843e70; to 'JaxprTracer' at 0x152de6843ed0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de61aadb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e18750>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de61a6ed0; to 'JaxprTracer' at 0x152de61a6d50>, <weakref at 0x152df551ea20; to 'JaxprTracer' at 0x152de61a6fd0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de666e430>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e183d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de61a6ac0; to 'JaxprTracer' at 0x152de61a6a80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de666e430>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1a9d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152ded6e6200; to 'JaxprTracer' at 0x152ded6e5180>, <weakref at 0x152ded6e5da0; to 'JaxprTracer' at 0x152ded6e4780>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de666e430>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e18b10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152ded6e4680; to 'JaxprTracer' at 0x152ded6e51d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de666e430>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 228: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1aa90>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152dec85cc20; to 'JaxprTracer' at 0x152dec85eee0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de68583b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a7ce0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df76312b0; to 'JaxprTracer' at 0x152df7633430>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6c862f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1c430>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df075b0b0; to 'JaxprTracer' at 0x152df075b890>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de639d1b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1dcb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152dffd1bbf0; to 'JaxprTracer' at 0x152dffd194f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de609c9f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a6920>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de6095670; to 'JaxprTracer' at 0x152de6095590>, <weakref at 0x152de6095620; to 'JaxprTracer' at 0x152de60956d0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6918670>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a40d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de6095300; to 'JaxprTracer' at 0x152de60952c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6918670>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1ab50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df3a1bd30; to 'JaxprTracer' at 0x152df3a1b700>, <weakref at 0x152df3a1b150; to 'JaxprTracer' at 0x152df3a1a4e0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6918670>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1b620>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df3a18e00; to 'JaxprTracer' at 0x152df3a1b890>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6918670>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 229: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a7d50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df45cdda0; to 'JaxprTracer' at 0x152df45cdb30>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de63cf9f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a7130>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152de9fa8ea0; to 'JaxprTracer' at 0x152de9fa9950>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6420470>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1cce0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df0f11580; to 'JaxprTracer' at 0x152df0f12760>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de5f268f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1d990>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152def34eac0; to 'JaxprTracer' at 0x152def34e3f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de5f31d70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1acb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de5f437e0; to 'JaxprTracer' at 0x152de5f43890>, <weakref at 0x152de5f439c0; to 'JaxprTracer' at 0x152de5f437a0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de619dcf0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e1b330>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de5f43970; to 'JaxprTracer' at 0x152de5f43520>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de619dcf0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e19b90>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de5f41990; to 'JaxprTracer' at 0x152de5f41540>, <weakref at 0x152de5f41440; to 'JaxprTracer' at 0x152de5f40780>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de619dcf0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de9e18da0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de5f42340; to 'JaxprTracer' at 0x152de5f40ff0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de619dcf0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 230: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a4f70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152deff5c3b0; to 'JaxprTracer' at 0x152deff5f930>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6226270>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a5f40>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df47376a0; to 'JaxprTracer' at 0x152df4736a30>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de63b3cf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1e640>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152de7214400; to 'JaxprTracer' at 0x152de7214050>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de64ff9f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1d900>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152e031c20c0; to 'JaxprTracer' at 0x152e031c1c70>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6dbc9b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a5240>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e0167d850; to 'JaxprTracer' at 0x152e0167ce60>, <weakref at 0x152e0167cdb0; to 'JaxprTracer' at 0x152e0167f9d0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de60db8b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a79e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e0167e890; to 'JaxprTracer' at 0x152e0167e710>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de60db8b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a68f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de6d456c0; to 'JaxprTracer' at 0x152de6d46e90>, <weakref at 0x152de6d46980; to 'JaxprTracer' at 0x152de6d458b0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de60db8b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a6f80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de6d46070; to 'JaxprTracer' at 0x152de6d46c60>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de60db8b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 231: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a7940>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152de763c720; to 'JaxprTracer' at 0x152de763e620>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de62a3970>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a7d90>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df0e4ca90; to 'JaxprTracer' at 0x152df0e4fa70>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6778170>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1d580>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152deda71da0; to 'JaxprTracer' at 0x152deda71810>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de61e9470>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1dd40>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152decae0f90; to 'JaxprTracer' at 0x152decae0050>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de5d92470>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a50d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de5d7e5c0; to 'JaxprTracer' at 0x152de5d7e4e0>, <weakref at 0x152de5d7e570; to 'JaxprTracer' at 0x152de5d7e440>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6dd94b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a4e90>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de5d7e520; to 'JaxprTracer' at 0x152de5d7e080>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6dd94b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a5330>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de5d7ef20; to 'JaxprTracer' at 0x152df281c050>, <weakref at 0x152de5d7ca90; to 'JaxprTracer' at 0x152de5d7cf50>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6dd94b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a5bd0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de5d7d030; to 'JaxprTracer' at 0x152df281c0f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6dd94b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 232: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a6c30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152ded894400; to 'JaxprTracer' at 0x152ded896710>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de5ddf0b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a6990>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df6280040; to 'JaxprTracer' at 0x152df6280910>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6d770f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1c4a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152de8145300; to 'JaxprTracer' at 0x152de8146440>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de5d1a770>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1f4d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152de8147830; to 'JaxprTracer' at 0x152de8144aa0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de5abc8f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a6770>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152deabee610; to 'JaxprTracer' at 0x152deabee670>, <weakref at 0x152deabeee80; to 'JaxprTracer' at 0x152deabef430>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de5d44730>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a5170>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152deabede40; to 'JaxprTracer' at 0x152deabef7f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de5d44730>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a6140>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dffc4d6c0; to 'JaxprTracer' at 0x152dffc4ca50>, <weakref at 0x152dffc4ef20; to 'JaxprTracer' at 0x152dffc4d220>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de5d44730>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a5150>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152ded5cbfb0; to 'JaxprTracer' at 0x152dffc4fe80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de5d44730>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 233: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a7a40>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df0572ca0; to 'JaxprTracer' at 0x152df0573020>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de5e3eff0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a7790>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df0573bf0; to 'JaxprTracer' at 0x152df0572580>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de60c34f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1f4b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152def6c9760; to 'JaxprTracer' at 0x152def6ca300>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de5e26c30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1f1e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152de64f1d50; to 'JaxprTracer' at 0x152de64f0230>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de5b04770>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a7560>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df281f7e0; to 'JaxprTracer' at 0x152df281fc50>, <weakref at 0x152df281c040; to 'JaxprTracer' at 0x152df281f480>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6d26530>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a67d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df281eca0; to 'JaxprTracer' at 0x152df281d3b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6d26530>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a5f40>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de7439850; to 'JaxprTracer' at 0x152de743b2a0>, <weakref at 0x152de743a750; to 'JaxprTracer' at 0x152de74386e0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6d26530>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a7bb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de743a890; to 'JaxprTracer' at 0x152de743bc00>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6d26530>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 234: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a5bd0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df180a700; to 'JaxprTracer' at 0x152df1809e00>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de688cbb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a6080>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df180bdd0; to 'JaxprTracer' at 0x152df1808550>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de5d61630>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1f5e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152de6d451c0; to 'JaxprTracer' at 0x152de6d452c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de5aece30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1cca0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152de6d45760; to 'JaxprTracer' at 0x152de6d47570>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de5bd8430>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a5e20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de5befc40; to 'JaxprTracer' at 0x152de5befa70>, <weakref at 0x152de5befba0; to 'JaxprTracer' at 0x152de5befca0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de5ae8df0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a5d20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de5befbf0; to 'JaxprTracer' at 0x152de5bef8e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de5ae8df0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a6940>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e046909f0; to 'JaxprTracer' at 0x152e04690410>, <weakref at 0x152e046927f0; to 'JaxprTracer' at 0x152e04690870>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de5ae8df0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a4420>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e046935b0; to 'JaxprTracer' at 0x152df7801090>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de5ae8df0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 235: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a49f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df6b109a0; to 'JaxprTracer' at 0x152df6b12b20>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de6427030>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a7230>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152dea3e6390; to 'JaxprTracer' at 0x152dea3e5130>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de5e7ebf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1cb20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152def1bb240; to 'JaxprTracer' at 0x152def1b81e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de597f470>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1ee50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152deee30630; to 'JaxprTracer' at 0x152deee322b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de5a1da70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1e3c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df4735300; to 'JaxprTracer' at 0x152df4735220>, <weakref at 0x152df4736930; to 'JaxprTracer' at 0x152df4734eb0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de5b9cef0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1deb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df4737100; to 'JaxprTracer' at 0x152de5a12350>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de5b9cef0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1fa20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dfff89bc0; to 'JaxprTracer' at 0x152dfff8a350>, <weakref at 0x152dfff887c0; to 'JaxprTracer' at 0x152dfff8b610>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de5b9cef0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1db80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dfff89f30; to 'JaxprTracer' at 0x152dfff89f90>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de5b9cef0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 236: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1dca0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152de6ea4630; to 'JaxprTracer' at 0x152de6ea4b90>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de5bd59f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1dd90>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152de6ea5710; to 'JaxprTracer' at 0x152de6ea4730>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de60a2ef0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a6220>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df3d27880; to 'JaxprTracer' at 0x152df3d24230>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de5a758b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a71d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df527bf60; to 'JaxprTracer' at 0x152df527ad50>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de5607430>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1f3c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de56120c0; to 'JaxprTracer' at 0x152de5611fe0>, <weakref at 0x152de5612070; to 'JaxprTracer' at 0x152de5612120>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de59da4b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1f690>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de5612200; to 'JaxprTracer' at 0x152de5611d60>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de59da4b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a4b30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152deba579c0; to 'JaxprTracer' at 0x152deba56df0>, <weakref at 0x152deba566b0; to 'JaxprTracer' at 0x152deba576b0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de59da4b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a6240>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152deba54b30; to 'JaxprTracer' at 0x152de5763de0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de59da4b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 237: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a6a70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df672fd80; to 'JaxprTracer' at 0x152df672eb70>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de5e3a330>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a6300>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152dee54fa10; to 'JaxprTracer' at 0x152dee54d900>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de59f1cf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1fea0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152de5d12f70; to 'JaxprTracer' at 0x152de5d134d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de5737c30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1fd10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152dfff89f80; to 'JaxprTracer' at 0x152dfff88c80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de5494cf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a6110>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152deb271850; to 'JaxprTracer' at 0x152deb2720d0>, <weakref at 0x152deb273a10; to 'JaxprTracer' at 0x152deb270ff0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de59b47f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a7cd0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152deb271120; to 'JaxprTracer' at 0x152deb273bb0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de59b47f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a65e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de7d6a840; to 'JaxprTracer' at 0x152de7d6a670>, <weakref at 0x152de7d69c60; to 'JaxprTracer' at 0x152de7d68ff0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de59b47f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a6ea0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de7d69080; to 'JaxprTracer' at 0x152de7d6b4d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de59b47f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 238: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a6210>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152ded236d90; to 'JaxprTracer' at 0x152ded237a20>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de5495c30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a53b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152def34c180; to 'JaxprTracer' at 0x152def34f9d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de57954f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de5988130>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152deb49dd00; to 'JaxprTracer' at 0x152deb49ceb0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de59f6bb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de59881e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152deb49e250; to 'JaxprTracer' at 0x152deb49d8b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de537abf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a7910>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de53740e0; to 'JaxprTracer' at 0x152de5374050>, <weakref at 0x152de5374270; to 'JaxprTracer' at 0x152de5374140>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de592d630>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a4bf0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de5374220; to 'JaxprTracer' at 0x152de5537cf0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de592d630>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a7d50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df17ef8d0; to 'JaxprTracer' at 0x152df17ec140>, <weakref at 0x152df17ece50; to 'JaxprTracer' at 0x152df17edbd0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de592d630>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a6960>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df17ef100; to 'JaxprTracer' at 0x152df17ed9f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de592d630>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 239: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a7a30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df0562d40; to 'JaxprTracer' at 0x152df0563200>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de55f38b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a55f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152dee83aa70; to 'JaxprTracer' at 0x152dee83a8a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de55250b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de5988a10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152deb0ff970; to 'JaxprTracer' at 0x152deb0fd7c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de552d4f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de5988f10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152de5d12de0; to 'JaxprTracer' at 0x152de5d11b80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de5268170>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a5470>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de5259300; to 'JaxprTracer' at 0x152de5259220>, <weakref at 0x152de52592b0; to 'JaxprTracer' at 0x152de5259180>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de57955b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a6bf0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de5258db0; to 'JaxprTracer' at 0x152de5258f50>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de57955b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a5e80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de8987880; to 'JaxprTracer' at 0x152de8984d20>, <weakref at 0x152de8987dd0; to 'JaxprTracer' at 0x152de8986d50>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de57955b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a4990>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de8985710; to 'JaxprTracer' at 0x152de89856d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de57955b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 240: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a5f30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152deb36f560; to 'JaxprTracer' at 0x152deb36d450>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de54bfa30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a6eb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152e017ce6b0; to 'JaxprTracer' at 0x152e017cf2a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de554af30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de5988250>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152de728b060; to 'JaxprTracer' at 0x152de7289c20>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de555a0f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de5988f50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152de72891c0; to 'JaxprTracer' at 0x152de728a080>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de515a030>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1fc70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de51513a0; to 'JaxprTracer' at 0x152de51512c0>, <weakref at 0x152de5151530; to 'JaxprTracer' at 0x152de5151400>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de52c14b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1f640>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de5151030; to 'JaxprTracer' at 0x152de5150ff0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de52c14b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a7b30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152deb46fe20; to 'JaxprTracer' at 0x152deb46fd90>, <weakref at 0x152deb46eca0; to 'JaxprTracer' at 0x152deb46db30>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de52c14b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a7cf0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152deb46fc40; to 'JaxprTracer' at 0x152deb46fd40>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de52c14b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 241: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a6640>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e01c19530; to 'JaxprTracer' at 0x152e01c1b250>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de5abc370>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a6190>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152de661c3b0; to 'JaxprTracer' at 0x152de661e760>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de556e870>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de5988bf0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152de9d0e610; to 'JaxprTracer' at 0x152de9d0e760>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de52ad070>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de5989460>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152decf9c6d0; to 'JaxprTracer' at 0x152decf9f700>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de5028bf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a6ed0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dffb99b20; to 'JaxprTracer' at 0x152dffb982d0>, <weakref at 0x152dffb9af20; to 'JaxprTracer' at 0x152dffb9a350>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de56d28b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a6ea0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dffb9b7e0; to 'JaxprTracer' at 0x152dffb99d60>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de56d28b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1fd90>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de7d6bbf0; to 'JaxprTracer' at 0x152de7d69c70>, <weakref at 0x152de7d6a890; to 'JaxprTracer' at 0x152de7d6a2b0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de56d28b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1c550>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de7d6a4d0; to 'JaxprTracer' at 0x152de7d6b7f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de56d28b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 242: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1ed90>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152dee546250; to 'JaxprTracer' at 0x152dee545fe0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de53be170>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1ccf0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152de898f560; to 'JaxprTracer' at 0x152de898c050>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de55037f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de5989d00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152def228d60; to 'JaxprTracer' at 0x152def22a030>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de5081bb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de5989ae0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152e0177de90; to 'JaxprTracer' at 0x152e0177ca50>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4ece4f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a7530>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de85f7830; to 'JaxprTracer' at 0x152de85f4aa0>, <weakref at 0x152de85f4db0; to 'JaxprTracer' at 0x152de85f5040>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152e43ba4ff0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a7130>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de85f7d80; to 'JaxprTracer' at 0x152de85f74d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152e43ba4ff0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a69b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df707aca0; to 'JaxprTracer' at 0x152df707ae90>, <weakref at 0x152df7078180; to 'JaxprTracer' at 0x152df707bc00>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152e43ba4ff0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a5d80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df707b010; to 'JaxprTracer' at 0x152df707ad00>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152e43ba4ff0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 243: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1fd80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df4a2e660; to 'JaxprTracer' at 0x152df4a2d090>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de501c7f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1d9c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df4a25bc0; to 'JaxprTracer' at 0x152df4a24f50>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de5356870>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de59891e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152deb8d1670; to 'JaxprTracer' at 0x152deb8d07d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de5089770>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de59880f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152deb8d0540; to 'JaxprTracer' at 0x152deb8d3b60>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4ec8830>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1f570>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de4ddc450; to 'JaxprTracer' at 0x152de4ddc370>, <weakref at 0x152de4ddc400; to 'JaxprTracer' at 0x152de4ddc4b0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de68bd8f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1dc90>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de4ddc0e0; to 'JaxprTracer' at 0x152de4ddc0a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de68bd8f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1ea50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df720c360; to 'JaxprTracer' at 0x152deb707700>, <weakref at 0x152df720f060; to 'JaxprTracer' at 0x152df720c640>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de68bd8f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1efe0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df720c180; to 'JaxprTracer' at 0x152deb7062b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de68bd8f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 244: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1f550>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152de86fa840; to 'JaxprTracer' at 0x152de86f8190>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de519cf70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1c990>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152def06ade0; to 'JaxprTracer' at 0x152def069d10>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4f014b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598a760>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df0a69b20; to 'JaxprTracer' at 0x152df0a69680>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de5012970>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de59887c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df75f4450; to 'JaxprTracer' at 0x152df75f5770>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4dc1d70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1e110>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de4c95120; to 'JaxprTracer' at 0x152de4c95040>, <weakref at 0x152de4c950d0; to 'JaxprTracer' at 0x152de4c94fa0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4fcc5b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1f040>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de4c95080; to 'JaxprTracer' at 0x152de4c94be0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4fcc5b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1ed10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de6c27f60; to 'JaxprTracer' at 0x152de6c245f0>, <weakref at 0x152de6c256c0; to 'JaxprTracer' at 0x152de6c25900>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4fcc5b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1c490>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de6c25f30; to 'JaxprTracer' at 0x152de6c24cd0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4fcc5b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 245: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1fa30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df707b1f0; to 'JaxprTracer' at 0x152df75f79d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de5b30030>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1d400>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152decae0db0; to 'JaxprTracer' at 0x152decae2f80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4e11ab0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de59880e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152de4ddf1a0; to 'JaxprTracer' at 0x152de4ddce60>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4e4b070>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de5988210>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152de4ddf240; to 'JaxprTracer' at 0x152de4ddf0c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4b88770>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1f1b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de4b7e2f0; to 'JaxprTracer' at 0x152de4b7e210>, <weakref at 0x152de4b7e2a0; to 'JaxprTracer' at 0x152de4b7e170>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4e14070>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1c9e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de4b7e250; to 'JaxprTracer' at 0x152de4b7ddb0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4e14070>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a60c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df0f84540; to 'JaxprTracer' at 0x152df0f84a50>, <weakref at 0x152df0f86390; to 'JaxprTracer' at 0x152df0f84f50>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4e14070>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a4060>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df0f853f0; to 'JaxprTracer' at 0x152df0f87ed0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4e14070>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 246: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1ee70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152de4e1a660; to 'JaxprTracer' at 0x152de4e1bd40>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4f7d2b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1c790>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152de4e1a1b0; to 'JaxprTracer' at 0x152de4e1bde0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4cfde30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598b310>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152dedb8e2a0; to 'JaxprTracer' at 0x152dedb8c460>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4bb9ab0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de5989a20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152de6c25620; to 'JaxprTracer' at 0x152de6c27f70>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4a795f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1db40>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df262d710; to 'JaxprTracer' at 0x152df262f8e0>, <weakref at 0x152df262f920; to 'JaxprTracer' at 0x152df262d6d0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4bfb370>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1d020>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df262c040; to 'JaxprTracer' at 0x152df262c3c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4bfb370>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1fed0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dffae7380; to 'JaxprTracer' at 0x152dffae5900>, <weakref at 0x152dffae6570; to 'JaxprTracer' at 0x152dffae5950>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4bfb370>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1f370>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dffae5da0; to 'JaxprTracer' at 0x152e031ce800>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4bfb370>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 247: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1fe10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152dee0b2c00; to 'JaxprTracer' at 0x152dee0b1180>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4bc5fb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1c070>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152deec00450; to 'JaxprTracer' at 0x152df3d9a670>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4f70470>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598aa50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152deb8d09a0; to 'JaxprTracer' at 0x152deb8d1e50>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4bd4370>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598b490>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df41c0810; to 'JaxprTracer' at 0x152df41c0960>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4977370>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1df00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de48fe930; to 'JaxprTracer' at 0x152de48fe9e0>, <weakref at 0x152de48feb10; to 'JaxprTracer' at 0x152de48fe8f0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4da69f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1f530>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de48feac0; to 'JaxprTracer' at 0x152de48fe530>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4da69f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1ee40>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df4735440; to 'JaxprTracer' at 0x152df4736a30>, <weakref at 0x152df4735670; to 'JaxprTracer' at 0x152df4735220>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4da69f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1f4e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df47346d0; to 'JaxprTracer' at 0x152df4735bd0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4da69f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 248: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1e960>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df298f830; to 'JaxprTracer' at 0x152df298efd0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4c5a9f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1d670>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df298d800; to 'JaxprTracer' at 0x152df298e210>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4dad570>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de5988ca0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152dee553fb0; to 'JaxprTracer' at 0x153eb0ad5e50>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4a2bb30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de5988490>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152dee547e20; to 'JaxprTracer' at 0x152dee546e40>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4885230>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1ed20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de4813d80; to 'JaxprTracer' at 0x152de4813ca0>, <weakref at 0x152de4813dd0; to 'JaxprTracer' at 0x152de4813e30>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4ac5130>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1f2a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de4813a60; to 'JaxprTracer' at 0x152de48139d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4ac5130>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1e660>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df7800130; to 'JaxprTracer' at 0x152df78000f0>, <weakref at 0x152df7800950; to 'JaxprTracer' at 0x152df7802b20>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4ac5130>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1c8f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df7801b70; to 'JaxprTracer' at 0x152df7802990>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4ac5130>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 249: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1ef20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152de5f40c20; to 'JaxprTracer' at 0x152de5f429e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4cd1430>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1ff20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152de8beaf70; to 'JaxprTracer' at 0x152de8beb200>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4916730>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de5989c10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152e0316dee0; to 'JaxprTracer' at 0x152e0316e6c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4addc30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598a050>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152de96540e0; to 'JaxprTracer' at 0x152de9654aa0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de58da670>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1ffa0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de58d4d60; to 'JaxprTracer' at 0x152de58d4c80>, <weakref at 0x152de58d4ef0; to 'JaxprTracer' at 0x152de58d4dc0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de48986f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1fe30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de58d4ea0; to 'JaxprTracer' at 0x152de58d4a00>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de48986f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1fdc0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e02fabe20; to 'JaxprTracer' at 0x152e02fa87d0>, <weakref at 0x152e02fa8180; to 'JaxprTracer' at 0x152e02fab570>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de48986f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1fc70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e02faa570; to 'JaxprTracer' at 0x152e02fa9090>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de48986f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 250: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1e300>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152de4c02c50; to 'JaxprTracer' at 0x152de4c005f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4a31ab0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1d670>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152def06bf60; to 'JaxprTracer' at 0x152def068d20>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4922970>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de59887b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152def501260; to 'JaxprTracer' at 0x152def503340>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de58469b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598ba80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152dffae74c0; to 'JaxprTracer' at 0x152dffae4be0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4663d30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1cbb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df4a37c90; to 'JaxprTracer' at 0x152df4a34b90>, <weakref at 0x152df4a36480; to 'JaxprTracer' at 0x152df4a34780>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de58e55f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1f930>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df4a37dd0; to 'JaxprTracer' at 0x152df4a34410>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de58e55f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1fcc0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df0e4f830; to 'JaxprTracer' at 0x152df0e4e1c0>, <weakref at 0x152df0e4e930; to 'JaxprTracer' at 0x152df0e4fd40>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de58e55f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1c380>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df0e4ddf0; to 'JaxprTracer' at 0x152df0e4d810>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de58e55f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 251: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1fbd0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152dee8a1490; to 'JaxprTracer' at 0x152dee8a3110>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de5864ef0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1fd20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152dee8a1d00; to 'JaxprTracer' at 0x152dee8a03c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4820270>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a54c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152de89d3650; to 'JaxprTracer' at 0x152de89d0c80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de58346f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a7910>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152de89d0cc0; to 'JaxprTracer' at 0x152de89d0820>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de44f1b70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1c380>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de4970fe0; to 'JaxprTracer' at 0x152de49703c0>, <weakref at 0x152de49705e0; to 'JaxprTracer' at 0x152de49713b0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de58c97b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1f640>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de4970180; to 'JaxprTracer' at 0x152de4970d20>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de58c97b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1e430>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de4c03ec0; to 'JaxprTracer' at 0x152de4c01b30>, <weakref at 0x152de4c02ca0; to 'JaxprTracer' at 0x152de4c00f00>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de58c97b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1d0a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de4c002c0; to 'JaxprTracer' at 0x152de4c02120>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de58c97b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 252: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1fe70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152de898c9a0; to 'JaxprTracer' at 0x152de898c8c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4a429f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1f120>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152de898fb00; to 'JaxprTracer' at 0x152de898e300>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de58c36f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d00d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152de4812250; to 'JaxprTracer' at 0x152de4812670>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de45bfa70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d01a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df4a37330; to 'JaxprTracer' at 0x152df4a348c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de46ec4f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1ed20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de4761a80; to 'JaxprTracer' at 0x152de4761900>, <weakref at 0x153ec488d7b0; to 'JaxprTracer' at 0x152de4761b80>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de446ef30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1ffa0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x153ec488ca90; to 'JaxprTracer' at 0x152de4761680>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de446ef30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1f010>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df0de3c40; to 'JaxprTracer' at 0x152df0de1d10>, <weakref at 0x152df0de1cb0; to 'JaxprTracer' at 0x152df0de3f70>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de446ef30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1fcd0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df0de2d40; to 'JaxprTracer' at 0x152df0de0820>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de446ef30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 253: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1e720>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152de728b740; to 'JaxprTracer' at 0x152de7289680>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4a8b6f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1f220>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152de7289120; to 'JaxprTracer' at 0x152de72882d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de46a15b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d0860>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152e05d05bc0; to 'JaxprTracer' at 0x152e05d045f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de40c66f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d02b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152de7d69c60; to 'JaxprTracer' at 0x152de7d6b3e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4129c30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1f900>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de41a1260; to 'JaxprTracer' at 0x152de41a1180>, <weakref at 0x152de41a1210; to 'JaxprTracer' at 0x152de41a12c0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de5ec94b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1cbb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de41a0ef0; to 'JaxprTracer' at 0x152de41a0eb0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de5ec94b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1e300>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df6935760; to 'JaxprTracer' at 0x152df69358b0>, <weakref at 0x152df6935e40; to 'JaxprTracer' at 0x152df6937f20>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de5ec94b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1d030>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de981fa10; to 'JaxprTracer' at 0x152df6937200>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de5ec94b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 254: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1e010>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152de9767470; to 'JaxprTracer' at 0x152de97670c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de51d8df0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de79a4f70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152deef4b420; to 'JaxprTracer' at 0x152deef484b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de40c63f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d0bd0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152dee354cc0; to 'JaxprTracer' at 0x152dee354820>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4747ab0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d1140>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df7803330; to 'JaxprTracer' at 0x152df7803fc0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3ff0370>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598bec0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de44063e0; to 'JaxprTracer' at 0x152de4406300>, <weakref at 0x152de4406570; to 'JaxprTracer' at 0x152de4406440>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4a8bb30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598bc10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de4406070; to 'JaxprTracer' at 0x152de4406030>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4a8bb30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1fda0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de439f330; to 'JaxprTracer' at 0x152de439f750>, <weakref at 0x152de439fd80; to 'JaxprTracer' at 0x152de439fac0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4a8bb30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1ea50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de439fd30; to 'JaxprTracer' at 0x152de439f980>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4a8bb30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 255: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1d230>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152deabf5670; to 'JaxprTracer' at 0x152deabf5400>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3fea1f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598ac60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df128da80; to 'JaxprTracer' at 0x152df128fed0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de41555f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d1720>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152de881a2a0; to 'JaxprTracer' at 0x152de8819e50>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de416eef0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d07d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152de881a070; to 'JaxprTracer' at 0x152de881be30>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3e71ab0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598a340>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de5d12890; to 'JaxprTracer' at 0x152de5d12350>, <weakref at 0x152de5d12c00; to 'JaxprTracer' at 0x152de5d126c0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de43f3bb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de59887a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de5d121b0; to 'JaxprTracer' at 0x152de5d12d50>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de43f3bb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1ef50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df3a1bf60; to 'JaxprTracer' at 0x152df3a194a0>, <weakref at 0x152df3a1b380; to 'JaxprTracer' at 0x152df3a1a620>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de43f3bb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1ea60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df3a19bc0; to 'JaxprTracer' at 0x152df3a194f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de43f3bb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 256: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de59889b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152de7572fc0; to 'JaxprTracer' at 0x152de7570870>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de45bc930>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598a430>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152de743a200; to 'JaxprTracer' at 0x152de743b110>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4183b30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d1c20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152de8c769d0; to 'JaxprTracer' at 0x152de8c774d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4035b70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d19d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152deb706bb0; to 'JaxprTracer' at 0x152deb7072a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3d5afb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1d040>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df75c09a0; to 'JaxprTracer' at 0x152df75c0190>, <weakref at 0x152df75c1120; to 'JaxprTracer' at 0x152df75c32f0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de586ebf0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1e430>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df75c2d90; to 'JaxprTracer' at 0x152df75c3ca0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de586ebf0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1c540>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df0bab920; to 'JaxprTracer' at 0x152df32594a0>, <weakref at 0x152df0ba9940; to 'JaxprTracer' at 0x152df0ba90e0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de586ebf0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de6a1fd80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df0ba9030; to 'JaxprTracer' at 0x152df3258d70>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de586ebf0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 257: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598a880>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e0316cea0; to 'JaxprTracer' at 0x152e0316d1d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3ecaa30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de5989f30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df55ef100; to 'JaxprTracer' at 0x152df55ef7f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de40468f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d16e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152de898c4a0; to 'JaxprTracer' at 0x152de898e580>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4054070>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d1140>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152de898f9c0; to 'JaxprTracer' at 0x152de898c730>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3c450b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598a240>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de3c39cb0; to 'JaxprTracer' at 0x152de3c39bd0>, <weakref at 0x152de3c39c60; to 'JaxprTracer' at 0x152de3c39d10>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de406df30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598ba80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de3c39df0; to 'JaxprTracer' at 0x152de3c39950>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de406df30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598a960>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de3e07560; to 'JaxprTracer' at 0x152de3e07980>, <weakref at 0x152de3e076a0; to 'JaxprTracer' at 0x152de3e07e80>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de406df30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598b770>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de3e07010; to 'JaxprTracer' at 0x152de3e069e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de406df30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 258: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598a800>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df075a110; to 'JaxprTracer' at 0x152df075a6c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3fc31b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de5988740>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152deabe8360; to 'JaxprTracer' at 0x152deabe92c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de414abf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d12a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152de439dfd0; to 'JaxprTracer' at 0x152de439d310>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3f48c30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d26b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152de439d5d0; to 'JaxprTracer' at 0x152de439e030>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3b32b30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598a1a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de3b296c0; to 'JaxprTracer' at 0x152de3b295e0>, <weakref at 0x152de3b29670; to 'JaxprTracer' at 0x152de3b29720>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3e20c30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de5988450>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de3b29350; to 'JaxprTracer' at 0x152de3b29310>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3e20c30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598b860>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152def6c9350; to 'JaxprTracer' at 0x152def6cadf0>, <weakref at 0x152def6cbc40; to 'JaxprTracer' at 0x152def6c9810>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3e20c30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598b530>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152def6c8f90; to 'JaxprTracer' at 0x152def6c8c80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3e20c30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 259: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de5989b80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152e0316e8e0; to 'JaxprTracer' at 0x152e0316e9e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de410f5b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598a7a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152de4c96570; to 'JaxprTracer' at 0x152de4c96260>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4079eb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d2cc0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152deb9399e0; to 'JaxprTracer' at 0x152deb938ff0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3ca0870>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d1c90>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152de7c2d3f0; to 'JaxprTracer' at 0x152de7c2ef30>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3a0c6b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de5989820>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dec316c50; to 'JaxprTracer' at 0x152dec314d70>, <weakref at 0x152dec317060; to 'JaxprTracer' at 0x152dec3149b0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3b8f4b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598b6e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dec315850; to 'JaxprTracer' at 0x152dec317c50>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3b8f4b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598a360>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dec315120; to 'JaxprTracer' at 0x152dec314b90>, <weakref at 0x152dec316de0; to 'JaxprTracer' at 0x152dec315040>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3b8f4b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598b1a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dec316340; to 'JaxprTracer' at 0x152dec316670>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3b8f4b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 260: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598b6e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df5dc5e90; to 'JaxprTracer' at 0x152df5dc5770>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de423cb70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598a890>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152de3e04ae0; to 'JaxprTracer' at 0x152de3e04dc0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4294c70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d1960>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152deb273ba0; to 'JaxprTracer' at 0x152deb270640>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de39491f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d1430>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152def3e28e0; to 'JaxprTracer' at 0x152def3e24e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3b260f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598a730>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de8ce5300; to 'JaxprTracer' at 0x152de8ce7a20>, <weakref at 0x152de8ce4e50; to 'JaxprTracer' at 0x152de8ce6440>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3ba1930>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598bf00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de8ce6610; to 'JaxprTracer' at 0x152de8ce4280>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3ba1930>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598bc70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de3a06570; to 'JaxprTracer' at 0x152de3a04550>, <weakref at 0x152de3a04400; to 'JaxprTracer' at 0x152de3a04140>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3ba1930>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598b370>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de3a06660; to 'JaxprTracer' at 0x152df1ca3750>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3ba1930>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 261: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de59894e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df5350860; to 'JaxprTracer' at 0x152df5353bb0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de43e1530>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598a7d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df0f11f80; to 'JaxprTracer' at 0x152df0f10d70>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3b8f3b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d1e90>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152debfbc680; to 'JaxprTracer' at 0x152debfbfe30>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3909430>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d1b20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152defb535b0; to 'JaxprTracer' at 0x152defb50730>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3937fb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598a5e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de58d5800; to 'JaxprTracer' at 0x152de58d63a0>, <weakref at 0x152de58d5580; to 'JaxprTracer' at 0x152de58d5220>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3dd7370>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de5988cf0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de58d6d90; to 'JaxprTracer' at 0x152de58d4dc0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3dd7370>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598b3e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df78ec900; to 'JaxprTracer' at 0x152df78ed090>, <weakref at 0x152df78eeac0; to 'JaxprTracer' at 0x152df78ef700>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3dd7370>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598aeb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df78ed2b0; to 'JaxprTracer' at 0x152df78ed400>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3dd7370>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 262: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de5988130>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152deab685e0; to 'JaxprTracer' at 0x152deab69720>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de42507b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598ad60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152deb2704a0; to 'JaxprTracer' at 0x152deab6a530>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de42cecf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d3450>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df7842b10; to 'JaxprTracer' at 0x152df7842800>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3ef0f30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d2a60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152def6cae80; to 'JaxprTracer' at 0x152def6ca490>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de37ae270>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598a890>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de379da80; to 'JaxprTracer' at 0x152de379d9a0>, <weakref at 0x152de379da30; to 'JaxprTracer' at 0x152de379dae0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de38bf130>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598bb40>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de379d710; to 'JaxprTracer' at 0x152de379d6d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de38bf130>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de5988210>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de39ee430; to 'JaxprTracer' at 0x152de39ee7b0>, <weakref at 0x152de39efa60; to 'JaxprTracer' at 0x152de39ef200>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de38bf130>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598bf50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de39ee660; to 'JaxprTracer' at 0x152de39ef520>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de38bf130>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 263: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598a1e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152dec88c4a0; to 'JaxprTracer' at 0x152dec88f390>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de44e6530>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de5988f30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df777bb00; to 'JaxprTracer' at 0x152df7779770>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de39e8c70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d04a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152de6a977e0; to 'JaxprTracer' at 0x152de6a94370>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de37e0a70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d3e50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152de4879760; to 'JaxprTracer' at 0x152de48792c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3557bf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598bc10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de3553650; to 'JaxprTracer' at 0x152de3553570>, <weakref at 0x152de35537e0; to 'JaxprTracer' at 0x152de35536b0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3a816f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de5988b90>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de3553790; to 'JaxprTracer' at 0x152de35532f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3a816f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598adf0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de5ebd0d0; to 'JaxprTracer' at 0x152de5ebe030>, <weakref at 0x152de5ebf740; to 'JaxprTracer' at 0x152de5ebd860>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3a816f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598b420>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de5ebcbd0; to 'JaxprTracer' at 0x152de5ebf610>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3a816f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 264: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de5989f00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152decf9cdb0; to 'JaxprTracer' at 0x152decf9da90>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de4258130>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598b700>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df78dc630; to 'JaxprTracer' at 0x152df78dedf0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3cf7430>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d35e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df1b72de0; to 'JaxprTracer' at 0x152df1b73200>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3cbb330>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d2e10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152de7d6b330; to 'JaxprTracer' at 0x152de7d6ae90>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de344e8b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598bb20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152ded14e610; to 'JaxprTracer' at 0x152ded14cf00>, <weakref at 0x152ded14eed0; to 'JaxprTracer' at 0x152ded14e210>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3a3b2b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de59896e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de33dff10; to 'JaxprTracer' at 0x152de33dfe80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3a3b2b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de5989ad0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df7800040; to 'JaxprTracer' at 0x152df7800fa0>, <weakref at 0x152df7800fe0; to 'JaxprTracer' at 0x152df7800e10>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3a3b2b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de5989ef0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df7803790; to 'JaxprTracer' at 0x152df7800a00>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3a3b2b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 265: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598bd30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152deea24310; to 'JaxprTracer' at 0x152deea274d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3454ff0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598b1b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df4a35710; to 'JaxprTracer' at 0x152df4a34410>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de39c2070>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d1b40>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152deba56de0; to 'JaxprTracer' at 0x152deba56440>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de34811b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d04a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152dee2e7f10; to 'JaxprTracer' at 0x152dee2e5e50>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de36d3970>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de5989fe0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152ded6e41d0; to 'JaxprTracer' at 0x152ded6e6440>, <weakref at 0x152ded6e5b70; to 'JaxprTracer' at 0x152ded6e5e50>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de352b470>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de59891d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152ded6e5080; to 'JaxprTracer' at 0x152ded6e47d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de352b470>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de5988cd0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de85f7330; to 'JaxprTracer' at 0x152de85f5900>, <weakref at 0x152de85f5b20; to 'JaxprTracer' at 0x152de85f4aa0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de352b470>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598af30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e03135440; to 'JaxprTracer' at 0x152de85f58b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de352b470>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 266: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de5989190>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152de8dcfab0; to 'JaxprTracer' at 0x152de8dccd70>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de33e9570>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598b900>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152deab6a750; to 'JaxprTracer' at 0x152deab6a530>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de34223b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d2580>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152deb4d3650; to 'JaxprTracer' at 0x152deb4d1450>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3673cb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d01a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152de7d6ba60; to 'JaxprTracer' at 0x152de7d68dc0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de32dd2f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de5988c60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de335de40; to 'JaxprTracer' at 0x152de335dd60>, <weakref at 0x152de335ddf0; to 'JaxprTracer' at 0x152de335dea0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de38a3970>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598a950>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de335df80; to 'JaxprTracer' at 0x152de335dae0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de38a3970>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598b2c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df207a660; to 'JaxprTracer' at 0x152df207b7a0>, <weakref at 0x152df207b0b0; to 'JaxprTracer' at 0x152df207bb10>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de38a3970>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598bae0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df207bba0; to 'JaxprTracer' at 0x152df2079900>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de38a3970>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 267: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598a900>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df0f12520; to 'JaxprTracer' at 0x152df0f13570>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de388b630>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de59892a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152deaf864d0; to 'JaxprTracer' at 0x152deaf84410>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de35e6970>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bc1e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152de85f7e20; to 'JaxprTracer' at 0x152de85f60d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3495470>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bcca0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df4bb5e40; to 'JaxprTracer' at 0x152de85f4b90>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3276cb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d3e30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de3273970; to 'JaxprTracer' at 0x152de3273890>, <weakref at 0x152de3273920; to 'JaxprTracer' at 0x152de32737f0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3681770>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d3160>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de3273420; to 'JaxprTracer' at 0x152de32735c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3681770>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598bc10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de3273600; to 'JaxprTracer' at 0x152de3273d90>, <weakref at 0x152de3273b50; to 'JaxprTracer' at 0x152de3270410>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3681770>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598b160>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de3270090; to 'JaxprTracer' at 0x152de3272bc0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3681770>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 268: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de5989fc0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152de6a948b0; to 'JaxprTracer' at 0x152de6a977f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3712230>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598bad0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152dea44fc40; to 'JaxprTracer' at 0x152dea44de00>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de34413b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bc2a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152de4ddf830; to 'JaxprTracer' at 0x152de4dde620>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de320b270>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bce10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152de4ddfb00; to 'JaxprTracer' at 0x152de4ddf4d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2f190f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de5988d50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de3f16110; to 'JaxprTracer' at 0x152de3f14500>, <weakref at 0x152de3f16b60; to 'JaxprTracer' at 0x152de3f17cf0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3666670>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de5989190>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df5dc48b0; to 'JaxprTracer' at 0x152df5dc5130>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3666670>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598b3e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de3f14860; to 'JaxprTracer' at 0x152de3f17bb0>, <weakref at 0x152de3f16700; to 'JaxprTracer' at 0x152de3f15770>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3666670>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de5989f00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de3f16070; to 'JaxprTracer' at 0x152de3f14410>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3666670>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 269: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de5989630>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df741cd60; to 'JaxprTracer' at 0x152df741f520>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de32d43b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598b450>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152ded14c630; to 'JaxprTracer' at 0x152ded14c550>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2ea2e70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bc370>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152de76ab5b0; to 'JaxprTracer' at 0x152de76a8960>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de30a6af0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bd4c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152de64c6d90; to 'JaxprTracer' at 0x152de64c4aa0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de30e22b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598bcd0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de8a53290; to 'JaxprTracer' at 0x152de8a51590>, <weakref at 0x152de8a501d0; to 'JaxprTracer' at 0x152de8a50190>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2ed7230>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598a0c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de8a52110; to 'JaxprTracer' at 0x152de8a52fd0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2ed7230>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598a890>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de8a511c0; to 'JaxprTracer' at 0x152de8a503c0>, <weakref at 0x152de8a502c0; to 'JaxprTracer' at 0x152de8a50b90>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2ed7230>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de5989310>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de8a51b20; to 'JaxprTracer' at 0x152de8a52120>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2ed7230>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 270: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598b030>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df3d24680; to 'JaxprTracer' at 0x152df3d252c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de34b4130>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598b170>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152de7573740; to 'JaxprTracer' at 0x152de7573d90>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de32656f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bc400>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152de7c2fbf0; to 'JaxprTracer' at 0x152de7c2d400>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de34432f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bd890>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152defec4f90; to 'JaxprTracer' at 0x152defec6580>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de30179f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598afc0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de3010d60; to 'JaxprTracer' at 0x152de3010c80>, <weakref at 0x152de3010d10; to 'JaxprTracer' at 0x152de3010dc0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3096d30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598bb50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de30109f0; to 'JaxprTracer' at 0x152de30109b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3096d30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598a400>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152ded14f240; to 'JaxprTracer' at 0x152ded14ead0>, <weakref at 0x152ded14f8d0; to 'JaxprTracer' at 0x152ded14f7a0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3096d30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598aa30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152ded14f7e0; to 'JaxprTracer' at 0x152ded14caa0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3096d30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 271: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d1780>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152de9764bd0; to 'JaxprTracer' at 0x152de97649b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de32fde30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d2670>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152ded237e70; to 'JaxprTracer' at 0x152ded236490>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de321f6f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bdea0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152def99d440; to 'JaxprTracer' at 0x152def99c230>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de5834470>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bc910>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152def99cc70; to 'JaxprTracer' at 0x152def99d270>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2b8cab0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de5989800>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de2b80770; to 'JaxprTracer' at 0x152de2b80690>, <weakref at 0x152de2b80720; to 'JaxprTracer' at 0x152de2b805f0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3167a30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de59895d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de2b806d0; to 'JaxprTracer' at 0x152de2b80230>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3167a30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598acd0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e04835c60; to 'JaxprTracer' at 0x152e04834500>, <weakref at 0x152e048367f0; to 'JaxprTracer' at 0x152e04836bc0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3167a30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de598a650>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152e04835490; to 'JaxprTracer' at 0x152e04837b10>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3167a30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 272: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d1100>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152deaed1850; to 'JaxprTracer' at 0x152deaed2260>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de316f3f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d0250>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df5d223e0; to 'JaxprTracer' at 0x152df5d22030>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de3171770>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bc310>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152de9123ce0; to 'JaxprTracer' at 0x152de9120af0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de311b4b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bc1b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152de9120f90; to 'JaxprTracer' at 0x152de9123930>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2deeef0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d0ed0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de2debf10; to 'JaxprTracer' at 0x152de2debcf0>, <weakref at 0x152de2debe20; to 'JaxprTracer' at 0x152de2debed0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de30a98b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d2da0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de2deba60; to 'JaxprTracer' at 0x152de2deba20>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de30a98b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d0e60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de821cdb0; to 'JaxprTracer' at 0x152de821e350>, <weakref at 0x152de821c180; to 'JaxprTracer' at 0x152de821d720>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de30a98b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d0860>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de821dc60; to 'JaxprTracer' at 0x152de821d270>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de30a98b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 273: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d3330>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152dea73c130; to 'JaxprTracer' at 0x152dea73e850>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de30e97b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d2780>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152def500040; to 'JaxprTracer' at 0x152def503c50>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2b7c4f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bcdb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152def22a610; to 'JaxprTracer' at 0x152def22a3a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2dbd3b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bda20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152de3c38630; to 'JaxprTracer' at 0x152de3c3a6c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2a053b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d1490>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de2a15c60; to 'JaxprTracer' at 0x152de2a15a90>, <weakref at 0x152de2a15bc0; to 'JaxprTracer' at 0x152de2a15cc0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2b24870>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d3f10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de2a158f0; to 'JaxprTracer' at 0x152de2a158b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2b24870>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d1810>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dee5444f0; to 'JaxprTracer' at 0x152dee546a30>, <weakref at 0x152dee544770; to 'JaxprTracer' at 0x152dee546ad0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2b24870>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d0b70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dee5466b0; to 'JaxprTracer' at 0x152dee546f30>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2b24870>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 274: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d3520>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152ded6e4d10; to 'JaxprTracer' at 0x152ded6e4640>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2a026f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d0b60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152de5ebea70; to 'JaxprTracer' at 0x152de5ebe9e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2fc01b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bdf40>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152de9121080; to 'JaxprTracer' at 0x152de9123660>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2a2d9b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35be260>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152de9122660; to 'JaxprTracer' at 0x152de9122080>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2743a30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d2a50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152deb36e980; to 'JaxprTracer' at 0x152deb36f930>, <weakref at 0x152deb36e070; to 'JaxprTracer' at 0x152deb36ce60>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2dd04b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d3a90>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152deb36e7a0; to 'JaxprTracer' at 0x152deb36f6b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2dd04b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d1e40>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dee483420; to 'JaxprTracer' at 0x152dee482cb0>, <weakref at 0x152dee481530; to 'JaxprTracer' at 0x152dee4827b0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2dd04b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d15e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dee483fb0; to 'JaxprTracer' at 0x152dee4806e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2dd04b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 275: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d37c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df1808d10; to 'JaxprTracer' at 0x152df18099a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2fe6930>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d1a80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df780f8d0; to 'JaxprTracer' at 0x152df780f7f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2dd2f30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bea50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152de6ea6390; to 'JaxprTracer' at 0x152de6ea5b80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de29ad130>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bdab0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152de6ea56c0; to 'JaxprTracer' at 0x152de6ea7890>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de26252b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d16f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de2612de0; to 'JaxprTracer' at 0x152de2612d00>, <weakref at 0x152de2612d90; to 'JaxprTracer' at 0x152de2612e40>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2b1beb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d14c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de2612f20; to 'JaxprTracer' at 0x152de2612a80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2b1beb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d3f70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df30e8d60; to 'JaxprTracer' at 0x152df30ea1c0>, <weakref at 0x152df30eb600; to 'JaxprTracer' at 0x152df30eb750>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2b1beb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d3820>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df30eb100; to 'JaxprTracer' at 0x152de27df570>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2b1beb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 276: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d23e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152dee042980; to 'JaxprTracer' at 0x152dee0419a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2a04c30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d26d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152de8dcdee0; to 'JaxprTracer' at 0x152dee040a50>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2924c30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bc1e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152de91230b0; to 'JaxprTracer' at 0x152de9123660>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de28928b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bf6a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df6282890; to 'JaxprTracer' at 0x152df6280190>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2512970>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d3910>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dee0b3d80; to 'JaxprTracer' at 0x152dee0b0d20>, <weakref at 0x152dee0b3470; to 'JaxprTracer' at 0x152dee0b1180>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2614a70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d0120>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dee0b0360; to 'JaxprTracer' at 0x152dee0b3de0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2614a70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d0f10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de685da30; to 'JaxprTracer' at 0x152de685d2c0>, <weakref at 0x152de685cea0; to 'JaxprTracer' at 0x152de685e530>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2614a70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d2660>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de685cf90; to 'JaxprTracer' at 0x152de685c140>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2614a70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 277: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d3f10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df6b108b0; to 'JaxprTracer' at 0x152df6b103c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2f903b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d3b50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df534ae80; to 'JaxprTracer' at 0x152df534aa30>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de28022f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bd6f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152de5613fb0; to 'JaxprTracer' at 0x152de5611e00>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2da0c70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bffd0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152de5613970; to 'JaxprTracer' at 0x152de5613570>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2410f70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d2c00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de24579c0; to 'JaxprTracer' at 0x152de24578e0>, <weakref at 0x152de2457ba0; to 'JaxprTracer' at 0x152de2457a20>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de292afb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d1d50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de2457b50; to 'JaxprTracer' at 0x152de2457750>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de292afb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d0eb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de2400d60; to 'JaxprTracer' at 0x152de24001e0>, <weakref at 0x152de24009a0; to 'JaxprTracer' at 0x152de2400230>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de292afb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d12f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de2400db0; to 'JaxprTracer' at 0x152de24004b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de292afb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 278: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d26d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152de5d10130; to 'JaxprTracer' at 0x152de5d11ef0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de29f6c70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d33a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152de27df6f0; to 'JaxprTracer' at 0x152de27dc6e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de250fc30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bec00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152decf322f0; to 'JaxprTracer' at 0x152decf30690>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de269f4b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bfa70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152de9120270; to 'JaxprTracer' at 0x152de9122f30>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de23ea330>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d00a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de46f3b50; to 'JaxprTracer' at 0x152de46f08c0>, <weakref at 0x152de46f30b0; to 'JaxprTracer' at 0x152de46f1810>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de24c6d70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d2b40>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de46f3fb0; to 'JaxprTracer' at 0x152de46f3390>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de24c6d70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d2db0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de685ee80; to 'JaxprTracer' at 0x152de685f1b0>, <weakref at 0x152de685c310; to 'JaxprTracer' at 0x152de685dae0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de24c6d70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d2710>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de685c770; to 'JaxprTracer' at 0x152de685e490>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de24c6d70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 279: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d3980>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df180b150; to 'JaxprTracer' at 0x152df180b980>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de29a1e70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d2b30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df1809080; to 'JaxprTracer' at 0x152df18099a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de24dbaf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bef30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152de6a97d30; to 'JaxprTracer' at 0x152de6a94dc0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de23cfd70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bc2d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152de6a96110; to 'JaxprTracer' at 0x152de6a97c00>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2287c70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35beb50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de21a0f40; to 'JaxprTracer' at 0x152de21a0e60>, <weakref at 0x152de21a0ef0; to 'JaxprTracer' at 0x152de21a0dc0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152e0b629270>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35be560>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de21a0ea0; to 'JaxprTracer' at 0x152de21a0a00>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152e0b629270>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bc360>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de21a0cc0; to 'JaxprTracer' at 0x152de21a0ff0>, <weakref at 0x152de21a0220; to 'JaxprTracer' at 0x152de21a27b0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152e0b629270>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bff00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de21a0b30; to 'JaxprTracer' at 0x152de21a0c80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152e0b629270>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 280: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bced0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152de3f14400; to 'JaxprTracer' at 0x152de3f14af0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de26237f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bdbd0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df3d24680; to 'JaxprTracer' at 0x152df3d24870>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de25a0bf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d2960>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152de6c5a430; to 'JaxprTracer' at 0x152de6c59a40>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de245d330>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d34c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152de6c5b9c0; to 'JaxprTracer' at 0x152de6c5bb10>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2066170>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bef60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df69bcf40; to 'JaxprTracer' at 0x152df69bee90>, <weakref at 0x152df69be6b0; to 'JaxprTracer' at 0x152df69bf110>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de21ee5f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bf6d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df69bd9e0; to 'JaxprTracer' at 0x152df69bd5e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de21ee5f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d3ea0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de30125c0; to 'JaxprTracer' at 0x152de30120d0>, <weakref at 0x152de3010ae0; to 'JaxprTracer' at 0x152de30104b0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de21ee5f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d0bd0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de3012ed0; to 'JaxprTracer' at 0x152de3011090>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de21ee5f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 281: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d27b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152de95af600; to 'JaxprTracer' at 0x152de95ac9b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2452730>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d11d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152de95ad620; to 'JaxprTracer' at 0x152de95ad7c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de217f2b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bfd80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152de24016c0; to 'JaxprTracer' at 0x152de2401400>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de21e47b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de22f0620>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152de2400f90; to 'JaxprTracer' at 0x152de2402ee0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de1f5f130>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d16f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de5611bc0; to 'JaxprTracer' at 0x152de5611040>, <weakref at 0x152de5612f70; to 'JaxprTracer' at 0x152de5611540>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de214a230>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d0d90>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de5613fb0; to 'JaxprTracer' at 0x152de5611c20>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de214a230>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d0440>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dee83a200; to 'JaxprTracer' at 0x152dee83b2a0>, <weakref at 0x152dee838b30; to 'JaxprTracer' at 0x152dee83a530>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de214a230>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d2e60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dee83b240; to 'JaxprTracer' at 0x152dee83aa80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de214a230>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 282: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d3590>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152de3c398a0; to 'JaxprTracer' at 0x152de3c3a170>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de21ee0b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d2bf0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df3d27290; to 'JaxprTracer' at 0x152df3d25c20>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de201f430>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de22f0770>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152deaa9f1a0; to 'JaxprTracer' at 0x152deaa9ddb0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2224470>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de22f0900>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152de4b7d3a0; to 'JaxprTracer' at 0x152de4b7ee40>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de1e4da30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bef00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de1e481d0; to 'JaxprTracer' at 0x152de1e480f0>, <weakref at 0x152de1e48180; to 'JaxprTracer' at 0x152de1e48050>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de1f18ff0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bf790>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de1ddfc90; to 'JaxprTracer' at 0x152de1ddfe80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de1f18ff0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d3a20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dea1825c0; to 'JaxprTracer' at 0x152dea183f20>, <weakref at 0x152dea1815d0; to 'JaxprTracer' at 0x152dea180b40>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de1f18ff0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d2e30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dea180090; to 'JaxprTracer' at 0x152dea180eb0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de1f18ff0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 283: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d2c80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152de2181300; to 'JaxprTracer' at 0x152de2181180>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de22f6870>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d1ce0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152de2180450; to 'JaxprTracer' at 0x152de2180280>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de20a5170>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de22f0560>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152dec1f7ec0; to 'JaxprTracer' at 0x152dec1f7660>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de23cd5b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de22f0ff0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152deaaa0f90; to 'JaxprTracer' at 0x152deaaa2580>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de1d6b730>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bdf80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de1d64fe0; to 'JaxprTracer' at 0x152de1d64f00>, <weakref at 0x152de1d65170; to 'JaxprTracer' at 0x152de1d65040>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de1e97d70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bfd00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de1d64c70; to 'JaxprTracer' at 0x152de1d64c30>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de1e97d70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d2a10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de1d64590; to 'JaxprTracer' at 0x152de1d64cd0>, <weakref at 0x152de1d66480; to 'JaxprTracer' at 0x152de1d65040>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de1e97d70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d1870>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de1d66020; to 'JaxprTracer' at 0x152de1d662b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de1e97d70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 284: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d0590>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152de4ddf3d0; to 'JaxprTracer' at 0x152de4ddd630>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de1f9be30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d1080>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152de92588b0; to 'JaxprTracer' at 0x152de925ada0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de1fb78b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de22f1060>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152defb425c0; to 'JaxprTracer' at 0x152defb41310>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de1e711b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de22f0e10>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df7941170; to 'JaxprTracer' at 0x152df7940460>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de1c51230>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d0af0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de1c3c6d0; to 'JaxprTracer' at 0x152de1c3c5f0>, <weakref at 0x152de1c3c680; to 'JaxprTracer' at 0x152de1c3c550>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de1c60870>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d0f80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de1c3c630; to 'JaxprTracer' at 0x152de1c3c190>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de1c60870>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d11d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df0563100; to 'JaxprTracer' at 0x152df0563b60>, <weakref at 0x152df0563e20; to 'JaxprTracer' at 0x152df0562170>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de1c60870>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d3f30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df0562570; to 'JaxprTracer' at 0x152df0563840>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de1c60870>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 285: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d30a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152de5ebeb60; to 'JaxprTracer' at 0x152de5ebd8b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de1d12df0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bff60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152dee0b1bc0; to 'JaxprTracer' at 0x152dee0b32f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de1e801f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de22f1090>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152de8dcf1a0; to 'JaxprTracer' at 0x152de8dcfb10>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de1d281f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de22f1530>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152de8dcecf0; to 'JaxprTracer' at 0x152de8dce1c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2ca7330>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bec60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de3c39bc0; to 'JaxprTracer' at 0x152de3c39900>, <weakref at 0x152de3c398a0; to 'JaxprTracer' at 0x152de3c3b5c0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de1c10930>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bf2b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de3c39b20; to 'JaxprTracer' at 0x152de3c38a00>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de1c10930>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d1720>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152ded5ba160; to 'JaxprTracer' at 0x152ded5bb390>, <weakref at 0x152ded5b93f0; to 'JaxprTracer' at 0x152ded5bb070>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de1c10930>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d3330>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152ded5b96c0; to 'JaxprTracer' at 0x152ded5b8690>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de1c10930>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 286: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bc7f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152defb41850; to 'JaxprTracer' at 0x152defb42d00>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de1ded4b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bd320>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df331d120; to 'JaxprTracer' at 0x152df331cc80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2be4970>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de22f1a40>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152de4b7ee80; to 'JaxprTracer' at 0x152de4b7df40>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de1e83270>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de22f0820>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152debfbf560; to 'JaxprTracer' at 0x152debfbfd90>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de19011b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d0af0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de188f060; to 'JaxprTracer' at 0x152de188f110>, <weakref at 0x152de188f240; to 'JaxprTracer' at 0x152de188f020>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2c37fb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d3570>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de188ec50; to 'JaxprTracer' at 0x152de188ecb0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2c37fb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d0350>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de18fd710; to 'JaxprTracer' at 0x152de18fc870>, <weakref at 0x152de18fc770; to 'JaxprTracer' at 0x152de18fc140>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2c37fb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de45d1510>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de18fd3a0; to 'JaxprTracer' at 0x152de18fd090>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2c37fb0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 287: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bc5f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152deffcab60; to 'JaxprTracer' at 0x152deffcb0c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de1fa3df0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bfab0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152de4b7e9d0; to 'JaxprTracer' at 0x152de4b7c640>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de1f88cf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de22f1880>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152de5535210; to 'JaxprTracer' at 0x152de5534050>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de186b7b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de22f1610>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152de67519e0; to 'JaxprTracer' at 0x152de6752030>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de199bf70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bd7a0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df780cef0; to 'JaxprTracer' at 0x152df780d680>, <weakref at 0x152df780d530; to 'JaxprTracer' at 0x152df780c730>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de367c170>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35beb90>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df780fb00; to 'JaxprTracer' at 0x152df780de50>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de367c170>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bfda0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df4a24590; to 'JaxprTracer' at 0x152df4a24f50>, <weakref at 0x152df4a247c0; to 'JaxprTracer' at 0x152df4a26170>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de367c170>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35be450>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df4a27510; to 'JaxprTracer' at 0x152df4a27ac0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de367c170>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 288: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bfe50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152de4c01a30; to 'JaxprTracer' at 0x152de4c015e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de18d3730>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35beca0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152de3c3bd30; to 'JaxprTracer' at 0x152de3c38f50>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de18cf6b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de22f2d70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152de188de90; to 'JaxprTracer' at 0x152de188fac0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de1e29b70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de22f1cb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152ded14e700; to 'JaxprTracer' at 0x152ded14fbb0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de1aa4fb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bf1f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de1b30810; to 'JaxprTracer' at 0x152de1b30730>, <weakref at 0x152de1b307c0; to 'JaxprTracer' at 0x152de1b30690>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2d36330>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bf5e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de1b302c0; to 'JaxprTracer' at 0x152de1b30460>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2d36330>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bc9b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152debfbef20; to 'JaxprTracer' at 0x152debfbd090>, <weakref at 0x152debfbd5d0; to 'JaxprTracer' at 0x152debfbf020>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2d36330>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35beb90>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152debfbc270; to 'JaxprTracer' at 0x152debfbe490>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2d36330>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 289: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bf940>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152deaa9e2a0; to 'JaxprTracer' at 0x152deaa9eee0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de1e49b30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bf400>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152de9d7dcb0; to 'JaxprTracer' at 0x152de9d7e260>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de18520f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de22f0f20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152de5610950; to 'JaxprTracer' at 0x152de5612120>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de2c3f8b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de22f0bf0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152de56122a0; to 'JaxprTracer' at 0x152de5610af0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de14fe9f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bf0d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de156dad0; to 'JaxprTracer' at 0x152de156d9f0>, <weakref at 0x152de156da80; to 'JaxprTracer' at 0x152de156db30>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de196a8b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bfb90>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de156dc10; to 'JaxprTracer' at 0x152de156d770>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de196a8b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bfe50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df1fbf560; to 'JaxprTracer' at 0x152df1fbf200>, <weakref at 0x152df1fbc090; to 'JaxprTracer' at 0x152df1fbf1b0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de196a8b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bed00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df1fbdc10; to 'JaxprTracer' at 0x152df1fbeee0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de196a8b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 290: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bc620>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152de1507ce0; to 'JaxprTracer' at 0x152de1507700>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de19f66b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bc790>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152de5610360; to 'JaxprTracer' at 0x152de5612030>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de189ffb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de22f11c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152de6c247c0; to 'JaxprTracer' at 0x152de6c26350>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de1541470>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de22f3670>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152df0794450; to 'JaxprTracer' at 0x152df0796210>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de17641f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bff30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de176f1f0; to 'JaxprTracer' at 0x152de176f070>, <weakref at 0x152de176f1a0; to 'JaxprTracer' at 0x152de176f020>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de15096b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bec90>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de176ec50; to 'JaxprTracer' at 0x152de176ee40>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de15096b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bf270>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de68414e0; to 'JaxprTracer' at 0x152de68433e0>, <weakref at 0x152de6841490; to 'JaxprTracer' at 0x152de6841860>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de15096b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bcfe0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de68422f0; to 'JaxprTracer' at 0x152de6841ea0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de15096b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 291: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bc5f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152de1ddf1a0; to 'JaxprTracer' at 0x152de1ddce10>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de18be3f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bf6f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152dea33ce50; to 'JaxprTracer' at 0x152dea33fc50>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de15184b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de22f0890>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152de2deb060; to 'JaxprTracer' at 0x152de2dea2b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de1afab30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de22f3310>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152de1d659e0; to 'JaxprTracer' at 0x152de1d64320>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de1232df0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35be940>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de13efe70; to 'JaxprTracer' at 0x152de13eff20>, <weakref at 0x152de13eff60; to 'JaxprTracer' at 0x152de13efe30>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de17759f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bd100>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de13effb0; to 'JaxprTracer' at 0x152de13efa70>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de17759f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bfa80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de1295030; to 'JaxprTracer' at 0x152de1295e00>, <weakref at 0x152de1294220; to 'JaxprTracer' at 0x152de1294fa0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de17759f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35be850>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de12956c0; to 'JaxprTracer' at 0x152de1294280>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de17759f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 292: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bdb70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152de543fc90; to 'JaxprTracer' at 0x152de543c5f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de18217b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bd160>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152de543d490; to 'JaxprTracer' at 0x152de543dc70>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de1568130>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de22f2670>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152de59aabb0; to 'JaxprTracer' at 0x152de59a8eb0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de1277470>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de22f3760>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152dea33e980; to 'JaxprTracer' at 0x152dea33dcc0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de11188f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bf360>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de1112a70; to 'JaxprTracer' at 0x152de1112990>, <weakref at 0x152de1112a20; to 'JaxprTracer' at 0x152de11128f0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de13b65b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bdab0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de1112520; to 'JaxprTracer' at 0x152de11126c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de13b65b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35be4c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de32ed850; to 'JaxprTracer' at 0x152de32edae0>, <weakref at 0x152de32ef330; to 'JaxprTracer' at 0x152de32ec6e0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de13b65b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bfa60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de32ed4e0; to 'JaxprTracer' at 0x152de32ef930>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de13b65b0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 293: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bf680>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152de2de8b80; to 'JaxprTracer' at 0x152de2de9cc0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de1a0e570>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bcb60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152de2deb290; to 'JaxprTracer' at 0x152de2de9720>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de178f8f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de22f0df0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152def34e110; to 'JaxprTracer' at 0x152def34c910>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de11a62f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de22f3130>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152de1507e70; to 'JaxprTracer' at 0x152de1506620>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de100a130>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de22f18b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dec317600; to 'JaxprTracer' at 0x152dec315540>, <weakref at 0x152dec317ba0; to 'JaxprTracer' at 0x152dec315c20>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de1765270>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de22f05e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dec315fd0; to 'JaxprTracer' at 0x152dec3145f0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de1765270>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de22f0450>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df785e520; to 'JaxprTracer' at 0x152df785d180>, <weakref at 0x152df785e7a0; to 'JaxprTracer' at 0x152df785f7a0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de1765270>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de22f3290>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df785f560; to 'JaxprTracer' at 0x152df785cb40>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de1765270>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 294: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de22f1870>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152de12949a0; to 'JaxprTracer' at 0x152de1297700>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de27939f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de22f0990>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152de1294a40; to 'JaxprTracer' at 0x152de1297200>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de1307730>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bfd00>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152de59a89f0; to 'JaxprTracer' at 0x152de59aa3a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de11ec530>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bec20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152de59a9cb0; to 'JaxprTracer' at 0x152de59a87d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de0eec270>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de22f1bb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de10c3dd0; to 'JaxprTracer' at 0x152de10c3c50>, <weakref at 0x152de10c3d80; to 'JaxprTracer' at 0x152de10c3c00>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de11f5030>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de22f3e30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de10c3ce0; to 'JaxprTracer' at 0x152de10c38e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de11f5030>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bf360>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de10c2750; to 'JaxprTracer' at 0x152de10c0870>, <weakref at 0x152de10c18f0; to 'JaxprTracer' at 0x152de10c2bc0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de11f5030>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bc9f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de10c3fb0; to 'JaxprTracer' at 0x152de10c18b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de11f5030>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 295: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bc880>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152de5150c20; to 'JaxprTracer' at 0x152de5150aa0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de10b64f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bde50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152de5153010; to 'JaxprTracer' at 0x152de5150690>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de13167b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de22f0290>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152de4763740; to 'JaxprTracer' at 0x152de4761270>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de0f8b270>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de11b0510>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152dea44c770; to 'JaxprTracer' at 0x152dea44f0c0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de0de9b70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35be540>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152e0c45dd00; to 'JaxprTracer' at 0x152e0c45e3a0>, <weakref at 0x152e0c45e570; to 'JaxprTracer' at 0x152e0c45d9f0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de0f3f3f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35be7f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dec315a80; to 'JaxprTracer' at 0x152dec3160d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de0f3f3f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35be370>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de2403560; to 'JaxprTracer' at 0x152de24005a0>, <weakref at 0x152de2400270; to 'JaxprTracer' at 0x152de2403250>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de0f3f3f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35be270>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de2401bc0; to 'JaxprTracer' at 0x152de2402710>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de0f3f3f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 296: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bc1e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df6cbade0; to 'JaxprTracer' at 0x152df6cbba70>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de20c29f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bcb20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152de12952b0; to 'JaxprTracer' at 0x152de1294460>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de10840b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de11b0280>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152de8eb28e0; to 'JaxprTracer' at 0x152de8eb2850>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de0e55cf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de11b0220>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152dee0b04a0; to 'JaxprTracer' at 0x152dee0b1770>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de0cbbbb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de22f3500>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de0caf3d0; to 'JaxprTracer' at 0x152de0caf1b0>, <weakref at 0x152de0caf2e0; to 'JaxprTracer' at 0x152de0caf390>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de0f079f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de22f24c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de0caef20; to 'JaxprTracer' at 0x152de0caeee0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de0f079f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bc5f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df16ea520; to 'JaxprTracer' at 0x152df16e8dc0>, <weakref at 0x152df16e8270; to 'JaxprTracer' at 0x152df16e8690>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de0f079f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bff70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df16e8090; to 'JaxprTracer' at 0x152df16e93b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de0f079f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 297: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35be8e0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152de6a35620; to 'JaxprTracer' at 0x152de6a37fc0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de12e90f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bfbb0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152de8be9e90; to 'JaxprTracer' at 0x152de8be94a0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de0e474b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de11b0e50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152de6843600; to 'JaxprTracer' at 0x152de6842800>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de0eddd30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de11b0fe0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152de4c01080; to 'JaxprTracer' at 0x152de4c02a80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de0b69970>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de22f04c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df4f6ee30; to 'JaxprTracer' at 0x152df4f6c1e0>, <weakref at 0x152df4f6ea70; to 'JaxprTracer' at 0x152df4f6cb40>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de1316630>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de22f0770>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df4f6ef70; to 'JaxprTracer' at 0x152df6843d90>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de1316630>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35beb50>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de4dc6110; to 'JaxprTracer' at 0x152de4dc7020>, <weakref at 0x152de4dc7380; to 'JaxprTracer' at 0x152de4dc7d40>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de1316630>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35be9d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de4dc7e70; to 'JaxprTracer' at 0x152de4dc4c80>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de1316630>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 298: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bc740>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152de58d6a20; to 'JaxprTracer' at 0x152de58d6fd0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de0b2ad70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bc710>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152e4337a700; to 'JaxprTracer' at 0x152e4337b020>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de0edf630>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de11b1130>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152de8f1d8f0; to 'JaxprTracer' at 0x152de8f1c370>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de0b90270>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de11b0800>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152de8f1eca0; to 'JaxprTracer' at 0x152de8f1d180>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de0b47730>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bee20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df77a8270; to 'JaxprTracer' at 0x152df77abfc0>, <weakref at 0x152df77abb50; to 'JaxprTracer' at 0x152df77a85a0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de0b48e30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bea20>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df77ab060; to 'JaxprTracer' at 0x152df77a9ae0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de0b48e30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bc740>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152dea33c2c0; to 'JaxprTracer' at 0x152dea33f110>, <weakref at 0x152dea33fdd0; to 'JaxprTracer' at 0x152dea33cc30>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de0b48e30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bd4d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152dea33ff60; to 'JaxprTracer' at 0x152dea33f430>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de0b48e30>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 299: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bde90>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152de59ab380; to 'JaxprTracer' at 0x152de59abbb0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de0cd95f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de22f3fa0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df0f865c0; to 'JaxprTracer' at 0x152df0f85950>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de11e8a70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de11b1a60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152de2b1c630; to 'JaxprTracer' at 0x152de2b1ca50>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de0bef1f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de11b1f80>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152de2b1ef20; to 'JaxprTracer' at 0x152de2b1e440>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de0a2d770>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bc710>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152def6cb060; to 'JaxprTracer' at 0x152def6c99f0>, <weakref at 0x152def6c9fd0; to 'JaxprTracer' at 0x152def6c8780>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de1089b70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bce30>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152def6c8b30; to 'JaxprTracer' at 0x152def6cba20>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de1089b70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bfa60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152ded14c450; to 'JaxprTracer' at 0x152ded14e760>, <weakref at 0x152ded14c3b0; to 'JaxprTracer' at 0x152ded14f2f0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de1089b70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bed70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152ded14d4e0; to 'JaxprTracer' at 0x152ded14f570>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de1089b70>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 300: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de22f3bd0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152de2b1f880; to 'JaxprTracer' at 0x152de2b1d0e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de09196f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de22f3570>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df10af1f0; to 'JaxprTracer' at 0x152df10ac320>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de1045ab0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de11b2380>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152df69be0c0; to 'JaxprTracer' at 0x152df69bf3e0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de0ae6f70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de11b0c40>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152dea33f150; to 'JaxprTracer' at 0x152dea33ff70>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de0807bb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de22f2c70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152deba55620; to 'JaxprTracer' at 0x152de07fead0>, <weakref at 0x152deba56890; to 'JaxprTracer' at 0x152de07fea30>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de0ae9170>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de35bf120>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152deba54720; to 'JaxprTracer' at 0x152de07fe5d0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de0ae9170>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de22f0860>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de5beeed0; to 'JaxprTracer' at 0x152de5befac0>, <weakref at 0x152de5bed8a0; to 'JaxprTracer' at 0x152de5bee850>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de0ae9170>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de22f26d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de5bed1c0; to 'JaxprTracer' at 0x152de5bec690>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de0ae9170>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 301: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de22f2750>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152debfbebb0; to 'JaxprTracer' at 0x152debfbd680>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de0a0d030>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de22f02c0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df52796c0; to 'JaxprTracer' at 0x152df5278370>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de08f88f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de11b0d60>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152deb46ec50; to 'JaxprTracer' at 0x152deb46d270>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de098f5f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=5/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=6/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=5/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de11b26b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=5/2)>), out_tracer_refs=[<weakref at 0x152de28fb100; to 'JaxprTracer' at 0x152de28fb520>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de06fd4f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=7/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=6/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=3/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=3/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de22f14b0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152de06f0f40; to 'JaxprTracer' at 0x152de06f0e60>, <weakref at 0x152de06f10d0; to 'JaxprTracer' at 0x152de06f0fa0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de09173f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de22f1750>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152de06f0bd0; to 'JaxprTracer' at 0x152de06f0b90>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de09173f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/0)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/0)> with
  val = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=4/0)> with
    primal = Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64)>with<JVPTrace(level=2/0)> with
      primal = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
      tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=1/0)> with
        pval = (ShapedArray(float64[12]), None)
        recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de22f2c70>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x152df128ccc0; to 'JaxprTracer' at 0x152df128d7c0>, <weakref at 0x152df128e110; to 'JaxprTracer' at 0x152df128d5e0>], out_avals=[ShapedArray(float64[12]), ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12] c:f64[12]. let
    d:f64[12] = mul a b
    e:f64[12] = neg d
    f:f64[12] = mul e 0.5
    g:f64[12] = mul f c
  in (d, g) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue, UnspecifiedValue), 'resource_env': None, 'donated_invars': (False, False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de09173f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/0)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de22f38f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/0)>, Traced<ConcreteArray([nan nan nan nan nan nan nan nan nan nan nan nan], dtype=float64):JaxprTrace(level=3/0)>), out_tracer_refs=[<weakref at 0x152df128da80; to 'JaxprTracer' at 0x152df128d8b0>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de09173f0>, name_stack=NameStack(stack=(Transform(name='transpose'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Iteration 302: Loss = nan
Updated Parameters:
morse_eps: nan
morse_alpha: nan
rep_A: nan
rep_alpha: nan
kbT: nan
[nan nan nan nan nan]
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=1/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=3/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=1/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=2/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de22f10f0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=2/2)>), out_tracer_refs=[<weakref at 0x152df1fbd580; to 'JaxprTracer' at 0x152df1fbf700>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de08d7e70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=4/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=2/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=4/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=2/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=3/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de22f0810>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=3/2)>), out_tracer_refs=[<weakref at 0x152df298fb50; to 'JaxprTracer' at 0x152df298d360>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de0985db0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=5/2)> with
  val = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=4/2)>
  batch_dim = 0
(13,)
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=1/1)> with
  val = Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11], dtype=int64)
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=1/1)> with
  val = Array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],      dtype=float64)
  batch_dim = 0
(13,)
Desired Yield: 0.3, Yield: nan
struc_idx: Traced<ShapedArray(int64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(int64[12])>with<DynamicJaxprTrace(level=3/2)>
  batch_dim = 0, loss shape: ()
Traced<ShapedArray(float64[])>with<BatchTrace(level=6/2)> with
  val = Traced<ShapedArray(float64[12])>with<JVPTrace(level=5/2)> with
    primal = Traced<ShapedArray(float64[12])>with<DynamicJaxprTrace(level=3/2)>
    tangent = Traced<ShapedArray(float64[12])>with<JaxprTrace(level=4/2)> with
      pval = (ShapedArray(float64[12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x152de11b01d0>, in_tracers=(Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>, Traced<ShapedArray(float64[12]):JaxprTrace(level=4/2)>), out_tracer_refs=[<weakref at 0x152de6ea6d40; to 'JaxprTracer' at 0x152de6ea4d20>], out_avals=[ShapedArray(float64[12])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12] b:f64[12]. let c:f64[12] = mul a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False, False), 'name': '<lambda>', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152de095db30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap')))))
  batch_dim = 0
(13,)
Grand Job completed for kt15_12
